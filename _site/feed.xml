<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-10-30T12:33:35+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">水镜的博客</title><subtitle>Save my study notes here, I hope it will be helpful to you</subtitle><author><name>Your Sidebar Name</name><email>none@example.org</email></author><entry><title type="html">Linux 使用教程</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/24/Linux%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" rel="alternate" type="text/html" title="Linux 使用教程" /><published>2024-10-24T00:00:00+08:00</published><updated>2024-10-24T00:00:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/24/Linux%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/24/Linux%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"><![CDATA[<h1 id="简介">简介</h1>
<p>本文主要内容：<br />
1.在Windows系统的基础上演示再安装Ubuntu系统<br />
2.演示在vmare上运行一个Ubuntu系统的虚拟机<br />
3.介绍Linux的相关知识和常用命令  <br />
Linux镜像大全：<a href="https://www.linux.org/pages/download/">https://www.linux.org/pages/download/</a></p>

<hr />

<h1 id="二双系统配置ubuntu">二.双系统配置Ubuntu</h1>

<hr />

<p><strong>注意：在安装Ubuntu系统前，我们先需要确定当前Windows系统的引导方式<br />
安装的Ubuntu系统需要与当前的Windows系统具有相同的引导方式，才能设置双系统菜单<br />
一些可能陌生的名词在第1点有介绍 <br />
演示中的电脑配置：<br />
引导方式为：UEFI引导<br />
磁盘分区格式为GPT<br />
如果你的电脑配置与我不相同，操作下去可能有些不同</strong></p>

<hr />

<h2 id="1基础知识介绍">1.基础知识介绍</h2>
<h3 id="11引导的简介">1.1.引导的简介</h3>
<p>引导（Booting）是指计算机在开机时进行的一系列过程，其目的是加载操作系统，使计算机能够正常工作。引导过程通常包括以下几个主要步骤：</p>

<ol>
  <li>
    <p><strong>硬件初始化</strong>：</p>

    <ul>
      <li>当计算机通电后，首先由固件（BIOS或UEFI）进行硬件自检（POST），确保关键组件（如内存、CPU、硬盘等）正常。</li>
    </ul>
  </li>
  <li>
    <p><strong>引导加载程序（Bootloader）</strong>：</p>

    <ul>
      <li>通过固件找到存储设备上的引导加载程序（如GRUB、LILO等），并将控制权转移给它。引导加载程序负责加载操作系统内核。</li>
    </ul>
  </li>
  <li>
    <p><strong>操作系统加载</strong>：</p>

    <ul>
      <li>引导加载程序从硬盘或其他存储设备加载操作系统的内核到内存中，并启动操作系统。</li>
    </ul>
  </li>
  <li>
    <p><strong>系统初始化</strong>：</p>

    <ul>
      <li>操作系统内核完成初始化，设置硬件驱动程序、文件系统等，为用户和应用程序提供服务。</li>
    </ul>
  </li>
</ol>

<p>引导过程是计算机启动的重要环节，成功引导后，用户可以使用计算机进行各种操作。引导的方式可以分为传统的BIOS引导和现代的UEFI引导，选择合适的引导方式可以提高系统的性能和安全性。</p>

<hr />

<h3 id="12bios模式的简介">1.2.BIOS模式的简介</h3>
<p>BIOS模式是指基本输入输出系统（Basic Input/Output System）的一种引导方式，它是在计算机启动时加载和执行的固件。BIOS负责硬件初始化和操作系统的加载。它是早期计算机的引导方式，主要用于x86架构的计算机。</p>

<p>引导方式指的是计算机启动时如何加载操作系统的方式。主要的引导方式有：</p>

<ol>
  <li>
    <p><strong>BIOS引导</strong>：</p>

    <ul>
      <li>使用MBR（主引导记录）格式。</li>
      <li>限制在2TB的磁盘大小，最多支持四个主分区。</li>
    </ul>
  </li>
  <li>
    <p><strong>UEFI引导</strong>：</p>

    <ul>
      <li>是BIOS的继任者，支持更大的硬盘（超过2TB）。</li>
      <li>使用GPT（GUID分区表）格式，支持更多的分区。</li>
      <li>提供更快的启动速度和更强的安全性（如Secure Boot）。</li>
    </ul>
  </li>
</ol>

<hr />

<h3 id="13磁盘分区格式的简介">1.3.磁盘分区格式的简介</h3>
<p>磁盘分区格式是定义磁盘如何组织和管理存储空间的结构。主要有以下几种分区格式：</p>

<ol>
  <li>
    <p><strong>MBR（主引导记录）</strong>：</p>

    <ul>
      <li>传统分区格式，支持最多四个主分区（或三个主分区和一个扩展分区）。</li>
      <li>最大支持2TB的磁盘空间。</li>
      <li>使用较旧的BIOS引导。</li>
    </ul>
  </li>
  <li>
    <p><strong>GPT（GUID分区表）</strong>：</p>

    <ul>
      <li>现代分区格式，支持更大的硬盘（超过2TB）和更多的分区（通常是128个）。</li>
      <li>采用UEFI引导，提供更强的安全性和灵活性。</li>
      <li>包含冗余的分区表，提高了数据的可靠性。</li>
    </ul>
  </li>
  <li>
    <p><strong>动态磁盘</strong>：</p>

    <ul>
      <li>Windows系统特有的分区管理方式，可以创建跨多个物理磁盘的卷，支持更复杂的磁盘管理功能，如镜像和条带化。</li>
    </ul>
  </li>
</ol>

<hr />

<h3 id="14bios模式与分区格式的对应关系">1.4.BIOS模式与分区格式的对应关系</h3>

<ol>
  <li>
    <p><strong>传统BIOS模式（Legacy BIOS）</strong>：</p>

    <ul>
      <li>通常使用<strong>MBR（主引导记录）</strong>分区格式。</li>
      <li>在这种模式下，支持最多四个主分区，最大磁盘大小为2TB。</li>
      <li>安装操作系统时，若选择Legacy模式，系统会要求将磁盘格式化为MBR。</li>
    </ul>
  </li>
  <li>
    <p><strong>UEFI模式</strong>：</p>

    <ul>
      <li>通常使用<strong>GPT（GUID分区表）</strong>分区格式。</li>
      <li>支持更大的磁盘（超过2TB）和更多的分区（通常是128个）。</li>
      <li>安装操作系统时，若选择UEFI模式，系统会要求将磁盘格式化为GPT。</li>
    </ul>
  </li>
</ol>

<p>一般BIOS模式是传统，磁盘分区格式就是MBR<br />
一般BIOS模式是UEFI，磁盘分区格式就是GPT</p>

<hr />

<h3 id="15ventoy的简介">1.5.ventoy的简介</h3>
<p>Ventoy 是一个开源工具，用于创建可启动的 USB 驱动器。与传统的方法不同，Ventoy 允许用户将多个 ISO 文件直接复制到 USB 驱动器上，而无需重新格式化或每次都写入 USB 驱动器。以下是 Ventoy 的一些主要特点：</p>

<ol>
  <li>
    <p><strong>多重 ISO 支持</strong>：用户可以在同一个 USB 驱动器上存储多个 ISO 文件，并在启动时选择要加载的 ISO。</p>
  </li>
  <li>
    <p><strong>快速创建</strong>：只需一次性格式化 USB 驱动器并安装 Ventoy，之后可以随意添加、删除或更新 ISO 文件。</p>
  </li>
  <li>
    <p><strong>兼容性</strong>：Ventoy 支持多种操作系统的 ISO，包括 Linux 发行版、Windows 安装镜像等。</p>
  </li>
  <li>
    <p><strong>UEFI 和 BIOS 支持</strong>：Ventoy 支持 UEFI 和传统 BIOS 启动，确保在不同类型的计算机上都能使用。</p>
  </li>
  <li>
    <p><strong>简单易用</strong>：用户界面友好，使用简单，无需复杂的命令行操作。</p>
  </li>
  <li>
    <p><strong>开源</strong>：Ventoy 是开源软件，可以免费使用，并且可以根据需要进行定制。</p>
  </li>
</ol>

<p>Ventoy 的使用非常适合需要频繁测试或安装不同操作系统的开发者和系统管理员。</p>

<hr />

<h3 id="16镜像的简介">1.6.镜像的简介</h3>
<p>镜像（Image）通常是指某个操作系统或软件的完整复制品，通常以文件的形式存在，包含了所有安装文件和配置设置。常见的镜像格式有 ISO 文件，这种文件可以用于创建可启动的 USB 驱动器或光盘。</p>

<hr />

<h3 id="17bitlocker的简介">1.7.BitLocker的简介</h3>
<p>BitLocker 是微软 Windows 操作系统中的一个全盘加密功能，用于保护存储在计算机上的数据。以下是 BitLocker 的一些关键特点和功能：</p>

<ol>
  <li>
    <p><strong>全盘加密</strong>：BitLocker 能够加密整个驱动器，包括系统驱动器和数据驱动器，从而保护存储在其上的所有文件。</p>
  </li>
  <li>
    <p><strong>安全性</strong>：通过使用 AES（高级加密标准）加密算法，BitLocker 提供强大的数据保护，防止未授权访问。</p>
  </li>
  <li>
    <p><strong>TPM 支持</strong>：BitLocker 可以与计算机的 TPM（受信任的平台模块）芯片结合使用，以增强安全性。TPM 存储加密密钥并提供安全启动功能。</p>
  </li>
  <li>
    <p><strong>多种解锁方式</strong>：用户可以通过多种方式解锁加密的驱动器，包括密码、PIN 码、USB 密钥和恢复密钥。</p>
  </li>
  <li>
    <p><strong>数据恢复</strong>：如果用户忘记密码或丢失解锁密钥，可以使用 BitLocker 恢复密钥来访问加密数据。</p>
  </li>
  <li>
    <p><strong>管理工具</strong>：Windows 提供图形界面和命令行工具（如 manage-bde）来管理 BitLocker 加密。</p>
  </li>
</ol>

<p>使用场景：</p>

<ul>
  <li><strong>保护敏感数据</strong>：适用于需要保护机密或敏感信息的个人用户和企业。</li>
  <li><strong>防止数据泄露</strong>：在设备被盗或丢失的情况下，BitLocker 可以防止未授权访问存储在驱动器上的数据。</li>
</ul>

<p>要启用 BitLocker，通常需要在 Windows 专业版或企业版上使用。在控制面板的“系统和安全”部分，可以找到 BitLocker 的设置选项。</p>

<hr />

<h3 id="18bios界面的boot的简介">1.8.BIOS界面的Boot的简介</h3>
<p>在 BIOS（基本输入输出系统）中，“Boot”指的是计算机启动的过程和相关设置。以下是“Boot”在 BIOS 中的几个关键方面：</p>

<p><strong>1. 启动顺序</strong></p>

<ul>
  <li>引导设备优先级：Boot 设置中包含启动设备的顺序，例如硬盘、光驱、USB 驱动器和网络。这决定了计算机在启动时从哪个设备加载操作系统。</li>
  <li>可更改顺序：用户可以根据需要调整启动顺序，例如设置 USB 驱动器为首选启动设备，以便从 USB 设备安装操作系统。</li>
</ul>

<p><strong>2. 引导选项</strong></p>

<ul>
  <li>引导选项菜单：某些 BIOS 提供了一个引导选项菜单，允许用户在启动时选择特定的引导设备，通常通过按下特定的键（如 F12）访问。</li>
</ul>

<p><strong>3. 引导模式</strong></p>

<ul>
  <li>Legacy BIOS 和 UEFI：现代计算机通常使用 UEFI（统一可扩展固件接口）作为替代传统的 BIOS。Boot 设置中可能有选项来选择使用 Legacy 或 UEFI 模式，影响操作系统的引导方式。</li>
</ul>

<p><strong>4. 安全启动（Secure Boot）</strong></p>

<ul>
  <li>安全启动设置：一些系统允许启用或禁用安全启动，这是一种防止未授权软件在系统启动时加载的安全功能。</li>
</ul>

<p><strong>5. 引导记录</strong></p>

<ul>
  <li>引导记录设置：在某些情况下，用户可以查看或修改与引导相关的记录，以确保系统能够正确加载操作系统。</li>
</ul>

<p>在 BIOS 中，Boot 设置是配置计算机启动过程的关键部分，确保操作系统能够从正确的设备加载。通过调整这些设置，你可以优化系统的启动顺序和引导方式，以适应不同的需求。</p>

<hr />

<h3 id="19secure-boot的简介">1.9.Secure Boot的简介</h3>
<p><strong>Secure Boot</strong> 可能会影响双系统安装，特别是当你尝试安装的操作系统不支持或未正确签名以通过 Secure Boot 验证时。以下是一些具体情况：</p>

<p><strong>1. 不支持的操作系统</strong></p>

<ul>
  <li>某些操作系统（例如某些 Linux 发行版）可能默认情况下不支持 Secure Boot。如果你在 Secure Boot 启用的状态下尝试安装这样的操作系统，可能会遇到启动失败或无法安装的问题。</li>
</ul>

<p><strong>2. 驱动程序和签名</strong></p>

<ul>
  <li>如果你要安装的操作系统或其驱动程序未经过签名，Secure Boot 将阻止它们加载，从而影响系统的启动过程。</li>
</ul>

<p><strong>3. UEFI 和 Legacy 模式</strong></p>

<ul>
  <li>在安装双系统时，你可能需要根据不同操作系统的需求选择 UEFI 模式或 Legacy 模式。如果 Secure Boot 启用，确保所有操作系统都兼容 UEFI 和 Secure Boot。</li>
</ul>

<p><strong>4. 需要禁用 Secure Boot</strong></p>

<ul>
  <li>在某些情况下，特别是当安装的操作系统不支持 Secure Boot 时，你可能需要在 BIOS/UEFI 设置中禁用 Secure Boot。这将允许你安装并运行不受 Secure Boot 保护的操作系统。</li>
</ul>

<hr />

<h3 id="110挂载点的简介">1.10.挂载点的简介</h3>
<p><strong>挂载点</strong> 是指在操作系统中用于访问文件系统的目录。它是一个特定的目录路径，系统通过这个路径将外部存储设备（如硬盘驱动器、USB 驱动器、网络共享等）连接到操作系统的文件系统中。通过挂载点，用户可以访问和操作存储在这些设备上的文件和目录。</p>

<ol>
  <li>
    <p><strong>文件系统结构</strong>：</p>

    <ul>
      <li>在 Linux 和类 Unix 系统中，所有文件和目录都以根目录 / 为基础构成一个统一的文件系统结构。任何外部存储设备都需要被“挂载”到这个结构中，才能被访问。</li>
    </ul>
  </li>
  <li>
    <p><strong>挂载过程</strong>：</p>

    <ul>
      <li>当你将设备连接到计算机时，需要通过挂载命令（如 mount）将其挂载到某个目录。例如，你可能将一个 USB 驱动器挂载到 /mnt/usb 目录下，这样就可以通过访问 /mnt/usb 来查看和操作 USB 驱动器中的文件。</li>
    </ul>
  </li>
  <li>
    <p><strong>卸载（Unmounting）</strong>：</p>

    <ul>
      <li>当你不再需要访问该设备时，可以通过卸载命令（如 umount）将其从文件系统中移除。这确保了数据的完整性，并释放系统资源。</li>
    </ul>
  </li>
</ol>

<p><strong>实际示例：</strong></p>

<ul>
  <li>假设你有一个外部硬盘，你可以在终端中使用如下命令将其挂载到 /media/external 目录：</li>
</ul>

<p><strong>sudo mount /dev/sdb1 /media/external</strong></p>

<p>之后，你可以通过访问 /media/external 来访问外部硬盘中的文件。</p>

<p>总结：挂载点是访问外部存储设备的关键概念，通过将设备挂载到特定的目录，用户可以在统一的文件系统中管理和操作不同的存储资源。</p>

<hr />

<h3 id="111根挂载点的简介">1.11.根挂载点的简介</h3>
<p>在文件系统中，/ 代表根目录（root directory），是整个文件系统的起始点。它是 Linux 和类 Unix 系统中所有文件和目录的顶层目录。下面是根目录的一些重要概念：</p>

<ol>
  <li><strong>文件系统的基础</strong></li>
</ol>

<ul>
  <li><strong>树状结构</strong>：所有的文件和目录都从根目录 / 开始，形成一个树状结构。根目录下可以有多个子目录和文件，所有其他目录（如 /home、/usr、/etc 等）都是根目录的子目录。</li>
</ul>

<ol>
  <li><strong>挂载点的含义</strong></li>
</ol>

<ul>
  <li><strong>挂载点的父级</strong>：当你将设备挂载到某个目录时，那个目录的路径会成为挂载点。例如，假设你将一个 USB 驱动器挂载到 /media/usb，则 /media/usb 就是这个 USB 驱动器的挂载点，而根目录 / 是整个文件系统的根。</li>
  <li><strong>根目录的重要性</strong>：挂载点可以是根目录下的任意目录，但最终所有的挂载和访问都与根目录相连。</li>
</ul>

<ol>
  <li><strong>示例</strong></li>
</ol>

<ul>
  <li>
    <p>在 Linux 系统中，如果你输入 ls /，将显示根目录下的所有文件和目录列表。</p>
  </li>
  <li>
    <p>如果你将一个硬盘分区挂载到 /mnt/data，你可以通过访问 /mnt/data 来查看该分区的内容，而 /mnt 和 /mnt/data 都是根目录的子目录。</p>
  </li>
</ul>

<p>总结：/作为根目录是整个文件系统的起点，所有挂载点都是相对于根目录的路径。通过挂载点，用户可以在统一的文件系统中访问和管理不同的存储设备。</p>

<hr />

<h3 id="112软件源和镜像服务器的简介">1.12.软件源和镜像服务器的简介</h3>
<p>软件源和镜像服务器是 Linux 及其他类 Unix 系统中用于管理和安装软件包的重要概念。
 软件源（Software Repository）</p>

<p>软件源是一个集中存储软件包的地方，通常包含了大量可供用户安装和更新的软件。这些软件包会经过审核和测试，以确保它们的安全性和稳定性。软件源的主要功能包括：</p>

<ul>
  <li><strong>软件安装</strong>：用户可以通过包管理工具（如 apt、yum、dnf 等）从软件源下载并安装软件包。</li>
  <li><strong>软件更新</strong>：软件源提供了软件的最新版本，用户可以方便地更新已安装的软件。</li>
  <li><strong>依赖管理</strong>：包管理工具能够自动处理软件包之间的依赖关系，确保所需的库和工具一同安装。</li>
</ul>

<p>镜像服务器（Mirror Server）</p>

<p>镜像服务器是软件源的复制版本，它们通常分布在不同地理位置，以便于用户更快地下载软件包。镜像服务器的特点包括：</p>

<ul>
  <li><strong>负载均衡</strong>：多个镜像服务器可以分散用户请求，减少单一服务器的负载，提高下载速度。</li>
  <li><strong>地理位置优化</strong>：用户可以选择离自己地理位置最近的镜像服务器，以获得更快的下载速度。</li>
  <li><strong>数据同步</strong>：镜像服务器定期与主软件源同步，以确保提供最新的软件包。</li>
</ul>

<p>总结:软件源和镜像服务器共同为用户提供了方便的软件管理功能。通过合理配置和选择镜像服务器，用户可以高效地安装和更新所需的软件，提高使用体验。</p>

<hr />

<h3 id="113gparted的简介">1.13.GParted的简介</h3>
<p>GParted（GNOME Partition Editor）是一个用于管理硬盘分区的图形化工具，通常在 Ubuntu 和其他 Linux 发行版中使用。它的主要功能包括：</p>

<ol>
  <li>
    <p><strong>创建、删除和调整分区</strong>：用户可以轻松创建新的分区、删除不再需要的分区，以及调整现有分区的大小。</p>
  </li>
  <li>
    <p><strong>格式化分区</strong>：GParted 支持多种文件系统格式，包括 ext4、NTFS、FAT32 等，用户可以对分区进行格式化。</p>
  </li>
  <li>
    <p><strong>移动分区</strong>：用户可以移动分区位置，以重新组织硬盘上的数据。</p>
  </li>
  <li>
    <p><strong>检查和修复分区</strong>：GParted 允许用户检查分区的完整性，并修复可能出现的错误。</p>
  </li>
  <li>
    <p><strong>支持多种存储设备</strong>：GParted 可以管理硬盘驱动器、SSD、USB 驱动器等多种存储设备。</p>
  </li>
</ol>

<p>GParted 的用户界面直观友好，适合用户进行硬盘管理，尤其是在进行系统安装、分区调整或数据备份时。使用 GParted 需要一定的权限，因此通常需要以管理员身份运行。</p>

<hr />

<h3 id="114grub的简介">1.14.GRUB的简介</h3>

<p>GRUB (Grand Unified Bootloader) 是一款开源的启动引导程序，主要用于在计算机启动时加载操作系统。它常见于 Linux 和其他 Unix 类系统中，但也可以引导 Windows 等操作系统。GRUB 的主要功能是让用户在系统启动时选择加载的操作系统或内核，特别适合多系统或双系统环境，例如 Linux 和 Windows 并存的情况下。</p>

<p>GRUB 的工作流程分为以下几步：</p>

<ol>
  <li>
    <p><strong>阶段1：加载启动引导器</strong><br />
 在 BIOS 或 UEFI 完成硬件初始化后，GRUB 的第一阶段代码会被加载。它通常存储在磁盘的主引导记录（MBR）或 UEFI 分区中，负责将控制权传递给 GRUB 阶段2。</p>
  </li>
  <li>
    <p><strong>阶段2：加载核心程序</strong><br />
 GRUB 阶段2会显示启动菜单，让用户选择操作系统或特定内核版本。用户也可以通过 GRUB 命令行手动输入内核参数或进行系统修复。</p>
  </li>
  <li>
    <p><strong>加载内核并启动操作系统</strong><br />
 一旦选定了内核，GRUB 会将内核和相关的初始 RAM 磁盘 (initramfs) 加载到内存，并将控制权交给操作系统内核以启动系统。</p>
  </li>
</ol>

<p>当你安装 Ubuntu 作为双系统时，Ubuntu 会默认安装 <strong>GRUB（Grand Unified Bootloader）</strong>。GRUB 是一个启动引导程序，它能够检测并列出系统上已安装的所有操作系统，允许你在启动时选择要加载的操作系统。通常在双系统中，GRUB 会被配置为引导菜单的默认管理程序，负责启动 Ubuntu 和 Windows 等系统。</p>

<h4 id="为什么-ubuntu-的启动优先级比-windows-高时才能启动-grub">为什么 Ubuntu 的启动优先级比 Windows 高时才能启动 GRUB？</h4>

<ol>
  <li>
    <p><strong>GRUB 安装位置</strong>：GRUB 通常安装在硬盘的主引导记录（MBR）或 EFI 分区中。GRUB 负责接管启动过程，因此当 BIOS/UEFI 设置中指定 Ubuntu（或带有 GRUB 的分区）为启动优先级更高时，GRUB 就会运行并显示启动菜单，供你选择启动 Ubuntu 或 Windows。</p>
  </li>
  <li>
    <p><strong>启动顺序的影响</strong>：如果你在 BIOS/UEFI 设置中将 Windows 的引导项放在优先级更高的位置，系统会直接使用 Windows 自带的启动引导程序，而不是 GRUB。Windows 启动引导程序通常不会列出 Ubuntu，除非进行特别配置（例如使用第三方引导管理器）。因此，只有在 Ubuntu 的启动项优先级高于 Windows 时，GRUB 才会被加载并展示选择菜单，从而引导任意一个操作系统。</p>
  </li>
</ol>

<p>简而言之，GRUB 作为默认的引导管理器，只有在它先于 Windows 的启动项被执行时，才能发挥作用并展示操作系统选择菜单。如果优先启动 Windows，则会跳过 GRUB
。
GRUB 具有灵活的配置能力，通过编辑其配置文件（通常位于 /boot/grub/grub.cfg）可以设置默认启动项、超时时间、图形界面等。其支持的文件系统也非常多，如 ext4、NTFS 和 FAT 等，确保了多系统兼容性。</p>

<p>在 GRUB 启动菜单中，序号是从 <strong>0</strong> 开始的。这意味着菜单中的第一个启动项对应于序号 0，第二个是序号 1，以此类推。这种从 0 开始的计数方式在配置文件中也保持一致，比如当你在 GRUB 配置文件中设置 GRUB_DEFAULT=0 时，它将默认选择第一个启动项。</p>

<p>GRUB 目前有两个主要版本：Legacy GRUB 和 GRUB 2。GRUB 2 是更现代的版本，具有更好的模块化和扩展性，广泛用于主流 Linux 发行版中。</p>

<hr />

<h3 id="115uefi-hardndisk-drive-bbs-priorities的简介">1.15.UEFI HardnDisk Drive BBS Priorities的简介</h3>
<p>UEFI Hard Disk Drive BBS Priorities 是主板 BIOS/UEFI 设置中的一项功能，用来配置硬盘的启动优先级。它决定了计算机在启动时，从哪些硬盘或者存储设备中加载操作系统，并按照优先级顺序依次尝试启动。</p>

<p>在这个设置中，你可以：</p>

<ol>
  <li>
    <p>设定不同硬盘的启动顺序：如果你有多块硬盘（例如一个固态硬盘和一个机械硬盘），可以在此调整启动的先后顺序。</p>
  </li>
  <li>
    <p>影响操作系统加载顺序：计算机会根据设定的优先级，尝试从首选硬盘启动操作系统。如果首选硬盘不可用，会自动切换到下一个硬盘。</p>
  </li>
</ol>

<p>这种设置对多系统配置（如 Windows 和 Linux 的双系统）以及多硬盘系统特别重要。</p>

<hr />

<h2 id="2查看bios模式">2.查看BIOS模式</h2>
<p>使用<strong>Win+R</strong>打开 <strong>“运行”对话框</strong> <br />
输入：<strong>Msinfo32</strong><br />
可以看到我的<strong>BIOS模式</strong>是<strong>UEFI</strong><br />
如果显示是<strong>传统</strong>，那用的就是<strong>BIOS引导</strong><br />
如果显示是<strong>UEFI</strong>，用的就是<strong>UEFI引导</strong>
<img src="/images/Linux-images/linux.1.png" alt="" /></p>

<hr />

<h2 id="3查看磁盘分区格式">3.查看磁盘分区格式</h2>
<p>一般看到<strong>BIOS模式</strong>是什么就能确定<strong>磁盘分区格式</strong>了，当然也可以去查看  <br />
右键点击开始，然后点击<strong>磁盘管理</strong>
<img src="/images/Linux-images/linux.2.png" alt="" />
鼠标右键点击当前<strong>Windows系统所在的硬盘</strong>，再点击<strong>属性</strong>  <br />
提前说一下：这些C盘D盘右边<strong>一般会</strong>有一个<strong>Bitlocker已加密</strong>的显示<br />
我这里没有是因为我已经关掉了，下文会介绍一般需要关掉它
<img src="/images/Linux-images/linux.3.png" alt="" />
可以看到我这里的磁盘分区格式是GPT<br />
<img src="/images/Linux-images/linux.4.png" alt="" /></p>

<hr />

<h2 id="4安装镜像">4.安装镜像</h2>
<p>Ubuntu镜像：<a href="https://ubuntu.com/download/desktop">https://ubuntu.com/download/desktop</a><br />
LTS 是 “Long Term Support” 的简写，意为“长期支持”。LTS 版本的操作系统会获得更长时间的支持和更新，通常是五年，这包括安全更新和软件包更新。
<img src="/images/Linux-images/linux.5.png" alt="" /></p>

<hr />

<h2 id="5制作ubuntu安装盘">5.制作Ubuntu安装盘</h2>
<h3 id="51下载ventoy">5.1.下载ventoy</h3>
<p>ventoy开源项目地址：<a href="https://github.com/ventoy/Ventoy">https://github.com/ventoy/Ventoy</a><br />
ventoy下载地址：<a href="https://sourceforge.net/projects/ventoy/">https://sourceforge.net/projects/ventoy/</a>
<img src="/images/Linux-images/linux.6.png" alt="" />
解压并打开
<img src="/images/Linux-images/linux.7.png" alt="" /></p>
<h3 id="52插入u盘">5.2.插入U盘</h3>
<p>注意：制作成安装盘后，U盘<strong>原来的数据</strong>都会被<strong>清空</strong><br />
在<strong>设备</strong>里选择你的U盘<br />
<strong>分区格式（MBR 或 GPT）</strong>会影响你在 USB 驱动器上安装系统时，<strong>目标磁盘的分区格式</strong><br />
可以看到<strong>默认的是MBR</strong>，我的Windows系统所在硬盘分区格式是<strong>GPT</strong>，所以<strong>修改</strong>一下<br />
如果你的Windows系统所在硬盘分区格式就是MBR，就不用修改<br />
我这里u盘已经安装了ventoy，没安装时设备内部ventoy版本那是空的
<img src="/images/Linux-images/linux.8.png" alt="" /></p>
<h3 id="53在u盘上安装ventoy">5.3.在U盘上安装ventoy</h3>
<p><strong>点击左上角配置选项-&gt;点击分区类型-&gt;选择GPT-&gt;安装</strong><br />
安装成功后会弹出恭喜<strong>安装成功</strong>的窗口，然后U盘名字变为<strong>ventoy</strong></p>
<h3 id="54将ubuntu镜像复制到安装盘">5.4.将Ubuntu镜像复制到安装盘</h3>
<p>前文下载的<strong>8Ubuntu镜像</strong>直接<strong>复制</strong>过来就成功制作了<strong>Ubuntu安装盘</strong>
<img src="/images/Linux-images/linux.9.png" alt="" /></p>

<hr />

<h2 id="6关闭bitlocker">6.关闭BitLocker</h2>
<p>如果启用了<strong>BitLocker</strong>，C盘和D盘右边都会显示<strong>BitLocker已经启用</strong><br />
如果已经关闭了或没有启用，就跳过这一小点<br />
BitLocker的密码一般在你第一次激活Windows系统的账号里<br />
关闭它比较省事，之后再打开就行
<img src="/images/Linux-images/linux.10.png" alt="" /></p>

<h3 id="61bitlocker可能触发条件">6.1.BitLocker可能触发条件</h3>
<p>BitLocker 会在以下情况下要求输入 48 位的恢复密码：</p>

<ol>
  <li>
    <p><strong>TPM 出现问题</strong>：</p>

    <ul>
      <li>如果计算机的 TPM（受信任的平台模块）在启动过程中未能正常工作，BitLocker 可能无法验证计算机的安全性，从而要求输入恢复密码。</li>
    </ul>
  </li>
  <li>
    <p><strong>系统硬件更改</strong>：</p>

    <ul>
      <li>当计算机的硬件组件（如主板、TPM 芯片或启动驱动器）发生更改时，BitLocker 可能会要求输入恢复密码以确保数据的安全性。</li>
    </ul>
  </li>
  <li>
    <p><strong>BIOS/UEFI 设置更改</strong>：</p>

    <ul>
      <li>如果更改了 BIOS/UEFI 设置，例如禁用了安全启动或重置了 BIOS/UEFI，BitLocker 也可能会要求输入恢复密码。</li>
    </ul>
  </li>
  <li>
    <p><strong>Windows 更新或修复</strong>：</p>

    <ul>
      <li>在进行某些系统更新或修复操作时，BitLocker 可能会触发恢复模式，要求输入密码。</li>
    </ul>
  </li>
  <li>
    <p><strong>启动顺序变化</strong>：</p>

    <ul>
      <li>如果启动顺序更改为尝试从不同的设备启动，BitLocker 可能会要求验证身份。</li>
    </ul>
  </li>
  <li>
    <p><strong>未按预期关机</strong>：</p>

    <ul>
      <li>如果计算机在非正常情况下关机（如断电），下次启动时可能会要求输入恢复密码。</li>
    </ul>
  </li>
</ol>

<p>在启用 BitLocker 时，系统会生成一个 48 位的恢复密码，并提示用户进行备份，以防在上述情况下无法访问数据。</p>

<h3 id="62关闭bitlocker">6.2.关闭BitLocker</h3>
<p>在搜索栏中搜索设备加密设置或管理BitLocker
<img src="/images/Linux-images/linux.11.png" alt="" />
关闭需要一些时间，请耐心等待<br />
成功后可进入磁盘管理器在C盘、D盘就不会显示有BitLocker已加密的字样了
<img src="/images/Linux-images/linux.12.png" alt="" /></p>

<hr />

<h2 id="7为ubuntu挤出硬盘空间">7.为Ubuntu挤出硬盘空间</h2>
<p>鼠标右键点击开始，打开磁盘管理
<img src="/images/Linux-images/linux.2.png" alt="" />
挑选一个分区为Ubuntu系统挤出空间<br />
这里我选择D盘这个分区，然后点击压缩卷
<img src="/images/Linux-images/linux.13.png" alt="" />
这里输入压缩空间量就是压缩出来空间的大小<br />
我这里就填10240MB<br />
<img src="/images/Linux-images/linux.14.png" alt="" />
未分配的10GB就是刚才压缩出来的硬盘空间<br />
补充：1G=1024MB<br />
压缩出来的分区应该显示的是未分配</p>

<p><img src="/images/Linux-images/linux.15.png" alt="" /></p>

<hr />

<h2 id="8进入bios界面进行设置">8.进入BIOS界面进行设置</h2>
<p>重启电脑，重启过程中点击F2<br />
(怕错过一直点也行，不同品牌的电脑快捷键和BIOS界面可能有所不同)
<img src="/images/Linux-images/linux.16.png" alt="" /></p>

<h3 id="81关闭secure-boot">8.1.关闭Secure Boot</h3>
<p>Secure Boot的选项一般在安全里，选择Disabled以关闭
<img src="/images/Linux-images/linux.17.png" alt="" /></p>

<h3 id="82boot-option-priorities">8.2.boot option priorities</h3>
<p>这是<strong>启动优先级</strong>的意思，在Boot里面，一般来说<strong>默认</strong>启动优先级最高的是<strong>U盘</strong><br />
如果不是，<strong>需要将U盘设为最优先启动项</strong><br />
退出时记得保存，退出时会提醒你保存，按<strong>F10可直接保存</strong>
<img src="/images/Linux-images/linux.18.png" alt="" /></p>

<hr />

<h2 id="9进入u盘的ubuntu系统">9.进入U盘的Ubuntu系统</h2>
<p>首先插入U盘重启电脑，进入ventoy的界面<br />
选择我们安装的Ubuntu镜像，回车
<img src="/images/Linux-images/linux.19.png" alt="" />
选择第一个以默认Boot启动，回车
<img src="/images/Linux-images/linux.20.png" alt="" />
选择第一个，试用或安装Ubuntu，回车
<img src="/images/Linux-images/linux.21.png" alt="" /></p>

<hr />

<h2 id="10安装ubuntu系统到硬盘">10.安装Ubuntu系统到硬盘</h2>
<p>1.下滑，选择中文
<img src="/images/Linux-images/linux.22.png" alt="" />
2.连接网络
<img src="/images/Linux-images/linux.23.png" alt="" />
3.选择安装Ubuntu
<img src="/images/Linux-images/linux.24.png" alt="" />
4.选择交互安装
<img src="/images/Linux-images/linux.25.png" alt="" />
5.选择默认集合
<img src="/images/Linux-images/linux.26.png" alt="" />
6.推荐选择这两个
<img src="/images/Linux-images/linux.27.png" alt="" />
7.选择手动分区
<img src="/images/Linux-images/linux.28.png" alt="" />
8.选择我们之前为安装Ubuntu系统而<strong>压缩出来的硬盘空间</strong>，并点击<strong>+号</strong> <br />
注意：这里对<strong>文件大小的计算方式不同</strong>，我们在Windows压缩出来的10个G在这里显示是10.74G <br />
根据你压缩出来的硬盘空间大概<strong>估算一下选择</strong>，<strong>不要选错了!</strong> <br />
很容易<strong>辨别</strong>的是，我们这种<strong>压缩出来的空间前面</strong>有个<strong>剩余空间</strong>的标记
<img src="/images/Linux-images/linux.29.png" alt="" />
9.<strong>挂载点</strong>选择<strong>根挂载点</strong> ，挂载点介绍见上文1.10
简而言之就是这个分区拿来储存Ubuntu系统的所有数据
<img src="/images/Linux-images/linux.30.png" alt="" />
10.选择用于安装引导程序的设备<br />
你刚才选的<strong>在哪个硬盘</strong>就选择哪个硬盘
这里的<strong>nvme0n1</strong>就是指代<strong>我的硬盘</strong>，上面那个是我们的安装盘
<img src="/images/Linux-images/linux.31.png" alt="" />
11.进行一些设置
<img src="/images/Linux-images/linux.32.png" alt="" />
12.选择时区
<img src="/images/Linux-images/linux.33.png" alt="" />
13.安装
<img src="/images/Linux-images/linux.34.png" alt="" />
14.安装完成后会提示你<strong>重启</strong><br />
会有一个界面让你拔掉U盘，再回车<br />
15.安装完成
<img src="/images/Linux-images/linux.35.png" alt="" /></p>

<hr />

<h2 id="11设置镜像服务器">11.设置镜像服务器</h2>
<p>软件源和镜像服务器介绍见上文1.12
<img src="/images/Linux-images/linux.36.png" alt="" /><img src="/images/Linux-images/linux.37.png" alt="" />
它会自动更新，直接<strong>停止</strong>,再点击<strong>设置</strong>就行
<img src="/images/Linux-images/linux.38.png" alt="" />
先点击下载自右边的链接进入下图的界面，然后点击<strong>选择最佳服务器</strong>
<img src="/images/Linux-images/linux.39.png" alt="" />
等待一段时间，他会给你选择一个最佳的服务器，然后我们<strong>直接点选择服务器</strong>
<img src="/images/Linux-images/linux.40.png" alt="" />
最后你关闭的时候会更新软件缓存，就大功告成
<img src="/images/Linux-images/linux.41.png" alt="" /></p>

<hr />

<h2 id="12对ubuntu的硬盘空间进行扩容">12.对Ubuntu的硬盘空间进行扩容</h2>
<p>要是用久了发现硬盘空间不够用，我们就可以进行<strong>扩容</strong></p>

<h3 id="121压缩硬盘空间">12.1.压缩硬盘空间</h3>
<p>从<strong>多余的分区</strong>中<strong>压缩</strong>出来一些<strong>硬盘空间</strong><br />
忘了<strong>操作</strong>的可以返回上文<strong>(一.7.为Ubuntu挤出硬盘空间)</strong>，是一样的操作<br />
我这里压缩了10个G
<img src="/images/Linux-images/linux.15.png" alt="" /></p>

<h3 id="122进入u盘的ubuntu系统">12.2.进入U盘的Ubuntu系统</h3>
<p>和上文<strong>(一.9.进入U盘的Ubuntu系统)</strong>一样</p>

<h3 id="123选择试用ubuntu">12.3.选择试用Ubuntu</h3>
<p>选择语言为中文，一路到下图这一步就要注意了<br />
<strong>一定要选择试用Ubuntu</strong><br />
其实你一进来或选完语言九点右上角的X关闭这个窗口就行<br />
这本来就是<strong>运行在U盘的Ubuntu系统</strong>
<img src="/images/Linux-images/linux.49.png" alt="" /></p>

<h3 id="124使用gparted扩容">12.4.使用GParted扩容</h3>
<p>注意：这期间会弹出一些需要确认的窗口<br />
<strong>1.打开终端（快捷键：Ctrl+Alt+G）<br />
2.运行命令以安装和启动GParted</strong><br />
GParted的简介见上文<strong>(一.1.13.GParted的简介)</strong></p>

<p><strong>sudo apt  install gparted  #下载GParted <br />
gparted   #打开GParted</strong></p>

<p><img src="/images/Linux-images/linux.42.png" alt="" />
3.右键点击我们需要扩容的Ubuntu系统的分区
<img src="/images/Linux-images/linux.43.png" alt="" />
4.可以在<strong>上方拖动</strong>进行扩容，也可以点击<strong>新大小右边的+</strong>进行扩容<br />
5.扩容完成后点击调整大小，然后确认
<img src="/images/Linux-images/linux.44.png" alt="" />
<img src="/images/Linux-images/linux.45.png" alt="" />
6.点击<strong>绿色的✓</strong>应用全部操作完成扩容
<img src="/images/Linux-images/linux.46.png" alt="" />
7.重启退出，<strong>不要提前把U盘拔了</strong>，能<strong>提示的时候再拔</strong>
<img src="/images/Linux-images/linux.47.png" alt="" />
安装好Ubuntu系统后，原来显示<strong>未分配</strong>的分区会变为<strong>状态良好</strong><br />
原来是97.67GB，可以看到扩容10GB成功了
<img src="/images/Linux-images/linux.48.png" alt="" /></p>

<hr />

<h2 id="13启用grub">13.启用GRUB</h2>
<p>不同电脑的操作可能不同<br />
关键在于<strong>把Ubuntu高的启动优级设置的比Windows系统的高</strong><br />
如果你细心一些，会发现一个问题<br />
有两个操作系统，该怎么选择进入哪一个操作系统？<br />
如果你直接重启，会发现直接进入Windows系统，看不到Ubuntu系统在哪<br />
这时候就需要启用GRUB了<br />
介绍见上文<strong>(一.1.14.GRUB的简介)</strong><br />
还是重启电脑进入BIOS设置界面<br />
操作与上文<strong>(一.8.进入BIOS设置界面进行设置)</strong>相同<br />
1.找到<strong>UEFI Hard Disk Drive BBS Priorities</strong><br />
介绍见上文<strong>(一.1.15.UEFI HardnDisk Drive BBS Priorities的简介)</strong>
<img src="/images/Linux-images/linux.87.png" alt="" />
将Boot Option 1设置为Ubuntu
<img src="/images/Linux-images/linux.88.png" alt="" />
2.现在退出，在启动时会进入GRUB的界面<br />
这是完全的界面<br />
<img src="/images/Linux-images/linux.89.png" alt="" /></p>

<hr />

<h2 id="14修改grub配置文件">14.修改GRUB配置文件</h2>
<p>接下来我们要设置默认选择Windows系统，10s倒计时自动进入<br />
这是启动的菜单，你没修改GRUB配置文件时默认进的时Ubuntu<br />
这个<strong>菜单的序号是从0开始</strong>的，比如第五个Windows的序号是4
<img src="/images/Linux-images/linux.90.png" alt="" />
这是页尾，可以看到我设计了一个倒计时
<img src="/images/Linux-images/linux.91.png" alt="" /></p>
<h3 id="141进入ubuntu系统">14.1.进入Ubuntu系统</h3>
<p>1.打开<strong>终端</strong>（快捷键<strong>Ctrl+Alt+t</strong>）<br />
2.输入<strong>命令</strong>用nano文本编辑器打开<strong>GRUB配置的模板文件</strong>：<br />
<strong>sudo nano /etc/default/grub</strong>
<img src="/images/Linux-images/linux.92.png" alt="" />
设置<strong>默认启动的序号</strong>和<strong>启动倒计时</strong><br />
再次强调：<strong>序号是从0开始的！</strong><br />
<strong>^是指Ctrl键</strong>，比如退出就是Ctrl+C
<img src="/images/Linux-images/linux.93.png" alt="" /></p>
<h3 id="142更新grub配置文件">14.2.更新GRUB配置文件</h3>
<p>上文修改的是<strong>GRUB配置的模板文件</strong>，我们还要更新到<strong>实际的GRUB配置文件</strong><br />
使用<strong>命令</strong>更新到实际的GRUB配置文件：<br />
<strong>sudo update-grub</strong>
<img src="/images/Linux-images/linux.94.png" alt="" /></p>
<h3 id="143配置成功">14.3.配置成功</h3>
<p>现在重启就能进入GRUB界面，可以选择进入Ubuntu系统，也可以倒计时结束默认进入Windows系统</p>

<hr />

<h1 id="三虚拟机中安装ubuntu">三.虚拟机中安装Ubuntu</h1>

<hr />

<h2 id="1虚拟机基础知识介绍">1.虚拟机基础知识介绍</h2>
<h3 id="11内存">1.1.内存</h3>
<p>虚拟机（VM）的内存作用与物理计算机中的内存类似，用于存储操作系统、应用程序以及正在运行的进程的临时数据。虚拟机的内存主要用于以下几个方面：</p>

<ol>
  <li>
    <p><strong>操作系统和应用程序的运行</strong>：虚拟机的内存会分配给操作系统和应用程序，以确保它们能够正常运行。操作系统使用这部分内存来管理进程和任务，应用程序则使用它来存储当前运行的数据和变量。</p>
  </li>
  <li>
    <p><strong>进程管理</strong>：每个正在运行的进程都会占用一部分虚拟内存空间。操作系统通过调度算法将这些进程管理在内存中，使其能够快速响应用户操作。</p>
  </li>
  <li>
    <p><strong>虚拟内存技术</strong>：虚拟机也使用虚拟内存技术，将物理内存与硬盘上的交换空间（或页面文件）结合使用。这使得虚拟机可以处理比分配给它的物理内存更多的数据。</p>
  </li>
  <li>
    <p><strong>缓存和缓冲区</strong>：虚拟机会将常用的数据存储在内存中，以减少对磁盘的访问，提高性能。例如，文件系统的缓存、数据库的查询结果等都会被存放在内存中，以提高数据读取的速度。</p>
  </li>
  <li>
    <p><strong>共享内存</strong>：在一些情况下，虚拟机可能需要与宿主机或其他虚拟机进行通信，内存也可以用于共享数据，尤其是通过共享内存机制来实现高效的数据交换。</p>
  </li>
</ol>

<p>总之，虚拟机的内存决定了它可以运行多么复杂的操作系统和应用程序，内存越大，虚拟机的性能通常也越好，尤其是当同时运行多个任务时。</p>

<hr />

<h3 id="12处理器数量和每个处理器的内核数量">1.2.处理器数量和每个处理器的内核数量</h3>
<p>虚拟机（VM）的处理器数量和每个处理器的内核数量是决定其计算性能的重要参数，它们直接影响虚拟机的并发处理能力和整体性能表现。以下是处理器数量和内核数量的具体作用：</p>

<h4 id="1-处理器数量vcpu数量">1. 处理器数量（vCPU数量）</h4>

<p>虚拟机的“处理器”通常指虚拟中央处理单元（vCPU），它是由宿主机的物理CPU资源虚拟化后分配给虚拟机的计算单元。vCPU的数量表示虚拟机可以利用多少个并行计算资源。vCPU数量越多，虚拟机能同时处理更多的并发任务。</p>

<ul>
  <li>
    <p><strong>多任务处理</strong>：更多的vCPU可以让虚拟机同时处理多个任务或线程。例如，当多个应用程序或进程在虚拟机上同时运行时，虚拟机可以将它们分配到不同的vCPU上进行并行处理，提升效率。</p>
  </li>
  <li>
    <p><strong>提高性能</strong>：对于并行计算密集型任务（如多线程应用、数据库服务器、大型Web应用等），增加vCPU数量可以显著提高性能。虚拟机可以利用多个vCPU分担计算负载，减少单个处理器的负载压力。</p>
  </li>
  <li>
    <p><strong>资源分配与隔离</strong>：在虚拟化环境中，宿主机可以将其物理CPU资源分配给多个虚拟机，而每个虚拟机有自己的vCPU。这使得可以在同一台物理服务器上运行多个独立的虚拟机，彼此隔离并独立分配计算资源。</p>
  </li>
</ul>

<h4 id="2-每个处理器的内核数量">2. 每个处理器的内核数量</h4>

<p>处理器的“内核”指的是每个vCPU中的物理或虚拟处理单元。一个多核处理器可以在同一时间执行多个独立的计算任务，核心数量决定了vCPU的内部并行处理能力。</p>

<ul>
  <li>
    <p><strong>提高并行计算能力</strong>：更多的内核意味着可以同时执行更多的线程或进程。多核虚拟机可以更好地处理需要并行计算的任务（如视频编码、科学计算、数据处理等），每个核心可以同时运行不同的线程，提高执行效率。</p>
  </li>
  <li>
    <p><strong>提升多线程性能</strong>：现代应用程序，尤其是多线程应用，可以有效利用多核处理器。每个线程可以分配到不同的核心上运行，这样可以加速任务完成时间。</p>
  </li>
  <li>
    <p><strong>负载分担</strong>：多核心处理器可以将计算负载均匀分布在多个核心上，避免单一核心的过载，从而提升系统的响应速度和整体性能。</p>
  </li>
</ul>

<h4 id="3-vcpu数量和内核数量的关系">3. vCPU数量和内核数量的关系</h4>

<p>虚拟机的vCPU数量和每个vCPU的内核数量往往一起决定了虚拟机的计算能力。一般来说：</p>

<ul>
  <li><strong>更多的vCPU</strong>：能够同时处理更多的任务，提高并行处理能力，适合多任务、并发较高的场景。</li>
  <li><strong>更多的内核</strong>：能够提高每个vCPU的内部处理能力，适合计算密集型、多线程的应用。</li>
</ul>

<h4 id="4-实际应用场景">4. 实际应用场景</h4>

<ul>
  <li><strong>Web服务器</strong>：对于负载较高的Web服务器，增加vCPU和每个vCPU的内核数量可以应对大量的并发请求，提高吞吐量。</li>
  <li><strong>数据库服务器</strong>：数据库操作通常涉及大量的计算和IO操作，更多的vCPU和内核可以显著提高查询和事务处理速度。</li>
  <li><strong>开发与测试</strong>：虚拟机常用于开发和测试环境，多vCPU和多内核配置可以快速构建复杂的应用环境并进行高并发测试。</li>
</ul>

<h4 id="5-资源分配与权衡">5. 资源分配与权衡</h4>

<p>在配置虚拟机时，需要在性能需求与资源分配之间做平衡。虽然增加vCPU和内核数量可以提高虚拟机的性能，但它们消耗的宿主机资源也会相应增加。如果分配的vCPU或内核数量超过宿主机的实际物理资源，可能会导致资源争用，影响整体性能。</p>

<h4 id="总结">总结</h4>

<ul>
  <li><strong>vCPU数量</strong>决定了虚拟机能够并行处理多少个任务或线程。</li>
  <li><strong>每个vCPU的内核数量</strong>决定了虚拟机处理每个任务时的效率，尤其是在处理多线程应用时表现明显。</li>
</ul>

<hr />

<h3 id="13软盘设备和-cddvd设备">1.3.软盘设备和 CD/DVD设备</h3>
<ol>
  <li>
    <p><strong>软盘（autoinst.flp）</strong>：软盘驱动器（floppy disk）在现代操作系统中已经基本被淘汰。这个虚拟软盘驱动器可能是在虚拟机创建时自动添加的。如果你不需要使用软盘镜像（如 autoinst.flp 文件），通常可以将其移除，以简化虚拟机配置。</p>
  </li>
  <li>
    <p><strong>CD/DVD 1 (SATA) - autoinst.iso</strong>：这个光驱设备正在使用名为 autoinst.iso 的ISO镜像文件，通常这个文件可能与自动化安装脚本或配置相关。如果你已经安装了操作系统或不再需要这个ISO镜像，可以选择移除这个CD/DVD设备。</p>
  </li>
  <li>
    <p><strong>CD/DVD 2 (SATA) - ubuntu.iso</strong>：第二个光驱设备挂载了一个 ubuntu.iso 文件。这应该是你用来安装 Ubuntu 操作系统的ISO文件。如果你已经安装完成了操作系统，并且不再需要使用安装介质，也可以选择移除这个设备。</p>
    <h4 id="是否可以移除">是否可以移除：</h4>
  </li>
</ol>

<ul>
  <li><strong>软盘设备</strong>：如果你不需要软盘镜像，可以安全移除。</li>
  <li><strong>CD/DVD设备</strong>：如果虚拟机已经完成系统安装，且你不再需要这些ISO镜像文件，可以移除它们，减少虚拟机的硬件设备数量。</li>
</ul>

<p>移除这些设备不会影响虚拟机的正常运行，尤其是在系统已经安装好的情况下。只要虚拟机在使用这些设备时不会加载镜像文件，就可以自由移除。</p>

<hr />

<h3 id="14网络适配器的常见模式">1.4.网络适配器的常见模式</h3>
<p>在虚拟机中，网络适配器的网络连接模式决定了虚拟机与宿主机、其他虚拟机以及外部网络之间的通信方式。常见的几种网络连接模式包括：</p>

<h4 id="1-桥接模式bridged-mode">1. 桥接模式（Bridged Mode）</h4>

<p>桥接模式允许虚拟机直接连接到宿主机所在的物理网络，就像它是网络中的一台独立的物理计算机。</p>

<ul>
  <li><strong>工作原理</strong>：虚拟机通过宿主机的物理网卡与局域网（LAN）直接通信。虚拟机会从局域网中的路由器或DHCP服务器获取自己的IP地址，与宿主机和其他物理设备在同一网络段上。</li>
  <li><strong>优点</strong>：虚拟机可以像其他物理设备一样与网络上的其他设备直接通信。适用于需要与宿主机和局域网中的其他设备通信的场景，如服务器虚拟化、测试网络设备等。</li>
  <li><strong>缺点</strong>：需要网络中有可用的IP地址，可能受限于局域网的配置。</li>
</ul>

<h4 id="2-nat模式network-address-translation-mode">2. NAT模式（Network Address Translation Mode）</h4>

<p>NAT模式通过宿主机共享网络连接，虚拟机在宿主机的网络环境下访问外部网络。虚拟机使用的是宿主机的IP地址，通过网络地址转换来实现外部访问。</p>

<ul>
  <li><strong>工作原理</strong>：虚拟机通过宿主机的网络连接访问外部网络，但它使用宿主机的IP地址进行通信，而虚拟机本身处于私有IP地址空间内。</li>
  <li><strong>优点</strong>：虚拟机可以轻松访问外部网络（如互联网），而不需要独立的IP地址配置。适合需要访问外部网络，但不需要与局域网内其他设备通信的场景。</li>
  <li><strong>缺点</strong>：虚拟机只能通过宿主机访问外部网络，局域网内的其他设备无法直接访问虚拟机，除非手动设置端口转发。</li>
</ul>

<h4 id="3-仅主机模式host-only-mode">3. 仅主机模式（Host-only Mode）</h4>

<p>仅主机模式将虚拟机与宿主机隔离在一个虚拟网络中，虚拟机与宿主机可以通信，但无法访问外部网络。</p>

<ul>
  <li><strong>工作原理</strong>：虚拟机与宿主机在一个独立的虚拟局域网中通信，虚拟机无法通过宿主机的物理网卡访问外部网络。</li>
  <li><strong>优点</strong>：适合虚拟机与宿主机或其他虚拟机进行独立网络通信的场景，例如用于测试和开发不需要外部网络连接的应用。</li>
  <li><strong>缺点</strong>：虚拟机无法访问外部网络（如互联网），如果需要访问，需要额外配置NAT或端口转发。</li>
</ul>

<h4 id="4-自定义模式custom-mode">4. 自定义模式（Custom Mode）</h4>

<p>有时，虚拟机管理工具会提供自定义的网络配置选项，让用户可以在不同的虚拟网络（例如多个虚拟网卡或不同的虚拟交换机）之间进行配置。</p>

<ul>
  <li><strong>工作原理</strong>：用户可以定义不同的虚拟交换机或网络，虚拟机可以连接到这些自定义的网络中。适合复杂的虚拟网络拓扑场景，如测试多种网络配置或跨虚拟机的专用网络通信。</li>
</ul>

<h4 id="5-内网模式internal-network-mode">5. 内网模式（Internal Network Mode）</h4>

<p>一些虚拟化工具（如VirtualBox）提供内网模式，虚拟机可以在一个完全隔离的内部虚拟网络中通信，而与宿主机和外部网络没有任何联系。</p>

<ul>
  <li>
    <p><strong>工作原理</strong>：所有连接到内网模式的虚拟机可以互相通信，但它们无法访问宿主机或外部网络。适合用于模拟完全隔离的网络环境，如测试局域网内的通信协议或安全配置。</p>
  </li>
  <li>
    <p><strong>优点</strong>：用于虚拟机之间的私有通信，确保虚拟机之间的网络流量不会泄露到外部网络。</p>
  </li>
  <li>
    <p><strong>缺点</strong>：虚拟机无法访问外部网络或宿主机，需要配置其他网络适配器来实现访问。</p>
  </li>
</ul>

<h4 id="6-nat网络模式nat-network-mode">6. NAT网络模式（NAT Network Mode）</h4>

<p>与普通NAT模式类似，但NAT网络模式允许多个虚拟机共享同一个NAT网络，同时还能彼此通信。</p>

<ul>
  <li><strong>工作原理</strong>：多个虚拟机通过宿主机的网络访问外部网络，并且可以在NAT网络中互相通信。类似于NAT模式，但适合多个虚拟机共享一个虚拟网络。</li>
  <li><strong>优点</strong>：虚拟机可以访问外部网络，并且多个虚拟机在同一虚拟网络中可以互相通信。</li>
  <li><strong>缺点</strong>：虚拟机无法直接被局域网或宿主机以外的设备访问。</li>
</ul>

<h4 id="总结-1">总结</h4>

<ul>
  <li><strong>桥接模式</strong>：虚拟机作为网络中独立的节点，适合需要局域网通信的场景。</li>
  <li><strong>NAT模式</strong>：适合需要虚拟机访问外部网络但不需要局域网通信的场景。</li>
  <li><strong>仅主机模式</strong>：适合虚拟机与宿主机或其他虚拟机之间的网络通信，不需要外部网络。</li>
  <li><strong>自定义/内网模式</strong>：用于创建复杂或完全隔离的网络环境。</li>
</ul>

<p>根据你的使用场景，可以选择合适的网络模式进行配置。</p>

<hr />

<h3 id="15加速3d图形">1.5.加速3D图形</h3>
<p>“加速3D图形”是指虚拟机中的3D图形硬件加速功能，这个功能允许虚拟机通过宿主机的物理GPU（图形处理单元）来处理三维图形渲染任务，从而提高虚拟机中运行的应用程序或操作系统的图形性能。以下是“加速3D图形”的作用及其意义：</p>

<h4 id="1-加速3d图形的作用">1. 加速3D图形的作用</h4>

<p>在虚拟机中启用3D图形加速后，虚拟机中的应用程序可以利用宿主机的GPU来处理3D渲染任务，而不只是依赖虚拟机本身的虚拟CPU进行图形处理。这可以显著提升虚拟机中的图形性能。</p>

<ul>
  <li>
    <p><strong>图形性能提升</strong>：启用加速3D图形后，虚拟机中的图形计算任务（如游戏、3D设计软件、图形密集型应用）可以由物理GPU处理，使得图形渲染速度更快、画面更流畅。</p>
  </li>
  <li>
    <p><strong>减少CPU负担</strong>：没有3D加速时，虚拟机依赖于虚拟CPU来进行图形处理，这通常导致性能较差，尤其是在运行图形密集型任务时。而启用3D加速后，图形计算转移到宿主机的GPU上，可以释放CPU资源用于其他任务，提升整体系统性能。</p>
  </li>
  <li>
    <p><strong>更好的用户体验</strong>：启用3D加速后，虚拟机能够更流畅地显示现代操作系统的图形界面（如Windows、Linux的3D桌面效果），例如Aero效果、窗口动画和透明效果等。</p>
  </li>
</ul>

<h4 id="2-适用场景">2. 适用场景</h4>

<p>加速3D图形功能主要用于以下几类场景：</p>

<ul>
  <li>
    <p><strong>3D应用程序和游戏</strong>：如果你在虚拟机中运行需要强大图形处理能力的3D软件（如AutoCAD、Blender等3D建模软件）或游戏，启用3D加速可以显著提高运行效果。</p>
  </li>
  <li>
    <p><strong>现代操作系统图形界面</strong>：一些操作系统（如Windows 10/11、某些Linux发行版）采用复杂的桌面环境和用户界面，3D加速有助于确保这些操作系统在虚拟机中运行时的界面流畅度。</p>
  </li>
  <li>
    <p><strong>视频处理和图像编辑</strong>：视频编辑软件和一些高级图像处理工具会使用GPU加速来提升处理速度。在虚拟机中启用3D加速可以让这些软件更快完成渲染、编码等操作。</p>
  </li>
</ul>

<h4 id="3-硬件要求">3. 硬件要求</h4>

<p>要启用3D图形加速，宿主机需要满足以下条件：</p>

<ul>
  <li>
    <p><strong>宿主机支持硬件加速</strong>：宿主机的GPU必须支持硬件加速功能。现代的独立显卡（如NVIDIA、AMD）和部分集成显卡（如Intel Iris系列）都支持硬件加速。</p>
  </li>
  <li>
    <p><strong>虚拟机软件支持</strong>：虚拟化软件（如VMware Workstation、VirtualBox）需要支持3D加速功能，并且在虚拟机设置中启用该功能。</p>
  </li>
  <li>
    <p><strong>宿主机GPU驱动</strong>：确保宿主机的GPU驱动是最新版本，并支持虚拟化的硬件加速功能。</p>
  </li>
</ul>

<h4 id="4-如何启用加速3d图形">4. 如何启用加速3D图形</h4>

<p>通常，你可以在虚拟机的设置中找到启用3D加速的选项。例如，在VMware Workstation中：</p>

<ol>
  <li>打开虚拟机的设置。</li>
  <li>选择“显示器”选项。</li>
  <li>勾选“加速3D图形”复选框。</li>
</ol>

<p>类似地，在其他虚拟化平台中（如VirtualBox），你也可以在显示器设置中启用3D加速。</p>

<h4 id="5-可能的限制和注意事项">5. 可能的限制和注意事项</h4>

<ul>
  <li>
    <p><strong>性能受限于宿主机的GPU</strong>：虚拟机中的图形性能仍然取决于宿主机的GPU能力。如果宿主机的GPU较弱，启用3D加速的效果可能不明显。</p>
  </li>
  <li>
    <p><strong>宿主机资源占用</strong>：启用3D加速后，虚拟机会占用宿主机的GPU资源。如果虚拟机与宿主机同时运行图形密集型任务，宿主机的性能可能会受到影响。</p>
  </li>
  <li>
    <p><strong>驱动兼容性</strong>：虚拟机中的操作系统需要正确的虚拟图形驱动才能充分利用3D加速功能。如果虚拟机中的驱动不兼容或版本过旧，3D加速可能无法正常工作。</p>
  </li>
</ul>

<h4 id="总结-2">总结</h4>

<p>“加速3D图形”功能使虚拟机能够通过宿主机的GPU处理3D图形任务，提升图形性能，特别是在需要运行3D软件、图形密集型应用、现代操作系统界面时有显著效果。如果你在虚拟机中运行这些任务，启用3D加速将会大幅改善用户体验。</p>

<hr />

<h3 id="16虚拟机中的磁盘">1.6.虚拟机中的磁盘</h3>
<p>在虚拟机中安装Ubuntu时，选项 <strong>“擦除磁盘并安装 Ubuntu”</strong> 所指的“磁盘”是<strong>虚拟机的磁盘</strong>，而不是你物理计算机上的硬盘。这是虚拟机软件为这个虚拟机创建的一个虚拟硬盘（VHD或VMDK等格式），它相当于是虚拟机的独立存储设备。</p>
<h4 id="1-擦除磁盘并安装-ubuntu">1. 擦除磁盘并安装 Ubuntu</h4>

<p>当你选择“擦除磁盘并安装 Ubuntu”时，Ubuntu会格式化并使用<strong>虚拟机创建的虚拟硬盘</strong>。它并不会影响到你物理主机（真实电脑）的硬盘，只是清空了虚拟机内部的虚拟硬盘。如果之前安装了其他系统或文件，这个选项会删除它们并进行全新安装。</p>

<h4 id="2-虚拟机硬盘空间是哪里来的">2. 虚拟机硬盘空间是哪里来的？</h4>

<p>虚拟机的硬盘是在你<strong>创建虚拟机</strong>时，<strong>手动分配的空间</strong>。例如，你可以为虚拟机分配一个50GB的虚拟硬盘空间。这个硬盘并不是真实的物理硬盘，它只是虚拟机软件（如 VMware 或 VirtualBox）在你物理硬盘上的一个文件（虚拟磁盘文件）。</p>

<h4 id="3-虚拟硬盘空间是否实际占用物理硬盘空间">3. 虚拟硬盘空间是否实际占用物理硬盘空间？</h4>

<ul>
  <li><strong>动态分配（Thin Provisioning）</strong>：如果你在虚拟机中选择了“动态分配”硬盘，虚拟磁盘文件不会立即占用你分配的所有空间。例如，你给虚拟机分配了50GB硬盘，但只有当你在虚拟机里逐步使用硬盘时，它才会逐渐增长。例如，如果Ubuntu系统仅用了10GB，虚拟磁盘文件只会占用物理硬盘上的10GB。</li>
  <li><strong>固定分配（Thick Provisioning）</strong>：如果你选择了“固定分配”硬盘，虚拟机会立即占用你分配的全部空间。比如你分配了50GB，虚拟磁盘文件会立即在物理硬盘上占用50GB的空间，即使虚拟机里面只用了2GB。</li>
</ul>

<h4 id="4-硬盘空间是如何管理的">4. 硬盘空间是如何管理的？</h4>

<p>虚拟机的硬盘空间是作为一个<strong>独立文件</strong>存在的，这个文件存储在你物理机的硬盘上。当你启动虚拟机时，操作系统（如Ubuntu）会将其视为正常的硬盘空间，和在真实电脑上操作没有差别。你分配给虚拟机的硬盘空间实际占用了你物理电脑的存储。</p>

<h4 id="5-未使用的虚拟磁盘空间还在原来的地方吗">5. 未使用的虚拟磁盘空间还在原来的地方吗？</h4>

<ul>
  <li>如果你采用了<strong>动态分配</strong>，那么未使用的虚拟硬盘空间<strong>不会立即占用</strong>物理硬盘的空间，物理机上的硬盘依然保留这些空间。</li>
  <li>如果你采用了<strong>固定分配</strong>，即使没有用到虚拟硬盘中的所有空间，这部分硬盘也已经被分配出去，占用了物理硬盘的空间。</li>
</ul>

<h4 id="总结-3">总结</h4>

<ul>
  <li>虚拟机中的“擦除磁盘并安装 Ubuntu”指的是虚拟机中的<strong>虚拟硬盘</strong>，不影响物理主机上的真实磁盘。</li>
  <li>虚拟硬盘是在创建虚拟机时分配的，它的空间来源于物理硬盘，但可以选择<strong>动态</strong>或者<strong>固定</strong>分配，动态分配下未使用的部分不会占用物理空间，固定分配则会立即占用。</li>
</ul>

<hr />

<h2 id="2下载vmware">2.下载VMware</h2>
<p>Broadcom官网：<a href="https://support.broadcom.com/">https://support.broadcom.com/</a><br />
1.VMware是这家公司的产品，需要先登录才能下载<br />
没有账号就先注册，注册需要一个邮箱，再填一些信息<br />
(邮箱需真实，会给你邮箱发验证码，信息可以随便填)
<img src="/images/Linux-images/linux.50.png" alt="" />
2.点击Software-&gt;VMware Cloud Foundation-&gt;My Downloads
<img src="/images/Linux-images/linux.51.png" alt="" />
3.下滑找到VMware Workstation Pro
<img src="/images/Linux-images/linux.52.png" alt="" />
4.选择个人版
<img src="/images/Linux-images/linux.53.png" alt="" />
5.第一次下载需要填一些信息，随便填
<img src="/images/Linux-images/linux.54.png" alt="" />
6.打开下载的安装包进行安装
<img src="/images/Linux-images/linux.55.png" alt="" />
7.选择安装位置，是否需要添加到系统PATH看你需求<br />
<img src="/images/Linux-images/linux.56.png" alt="" />
8.如果你自定义了安装目录就会弹出这个警告<br />
简单来说就是如果是推荐的目录，进行一些对VMware的操作需要管理员权限<br />
现在对VMware的操作不需要什么权限了
<img src="/images/Linux-images/linux.57.png" alt="" />
9.这也看你需不要，不需要就不勾选<br />
10.后面还有个快捷方式，可以勾上
<img src="/images/Linux-images/linux.58.png" alt="" />
11.如果你自定义了安装位置，可能会遇到下图的情况<br />
这是系统找不到该文件的默认位置<br />
你在浏览里找到要求的这个文件再点确定就行
<img src="/images/Linux-images/linux.59.png" alt="" /></p>

<p>12.安装完成
<img src="/images/Linux-images/linux.60.png" alt="" /></p>

<hr />

<h2 id="3下载ubuntu镜像">3.下载Ubuntu镜像</h2>
<p>ubantu镜像：<a href="https://ubuntu.com/download/desktop">https://ubuntu.com/download/desktop</a><br />
LTS 是 “Long Term Support” 的简写，意为“长期支持”。LTS 版本的操作系统会获得更长时间的支持和更新，通常是五年，这包括安全更新和软件包更新。
<img src="/images/Linux-images/linux.5.png" alt="" /></p>

<hr />

<h2 id="4创建虚拟机">4.创建虚拟机</h2>
<h3 id="41打开vmware">4.1.打开VMware</h3>
<p>有密钥可以输一下，没有就选第一个
<img src="/images/Linux-images/linux.61.png" alt="" /></p>
<h3 id="42创建新的虚拟机">4.2.创建新的虚拟机</h3>
<p><img src="/images/Linux-images/linux.62.png" alt="" />
下一步
<img src="/images/Linux-images/linux.63.png" alt="" />
选择我们下载好的光盘映像文件，再点下一步
<img src="/images/Linux-images/linux.64.png" alt="" />
填写信息
<img src="/images/Linux-images/linux.65.png" alt="" />
<img src="/images/Linux-images/linux.66.png" alt="" />
根据需要设置虚拟磁盘的大小
<img src="/images/Linux-images/linux.67.png" alt="" />
取消这个创建后打开(因为我们还需要进行其它设置)，再点击完成
<img src="/images/Linux-images/linux.68.png" alt="" /></p>
<h3 id="43编辑虚拟机">4.3.编辑虚拟机</h3>
<p>内存，处理器，网路i适配器这些概念见上文(三.1基础知识介绍)<br />
1.打开点击虚拟机设置
<img src="/images/Linux-images/linux.69.png" alt="" />
2.可以修改内存
<img src="/images/Linux-images/linux.70.png" alt="" />
3.可以修改处理器数量和每个处理器内核
<img src="/images/Linux-images/linux.71.png" alt="" />
4.可以移除软盘和CD/DVD (SATA)<br />
5.网络链接选择桥接模式
<img src="/images/Linux-images/linux.72.png" alt="" />
6.确定</p>

<hr />

<h2 id="5开启虚拟机">5.开启虚拟机</h2>
<p>1.开机虚拟机
<img src="/images/Linux-images/linux.73.png" alt="" />
2.不管什么界面，就是顺着安装走
<img src="/images/Linux-images/linux.74.png" alt="" />
3.选择语言
<img src="/images/Linux-images/linux.75.png" alt="" />
4.一路默认即可<br />
5.这里默认擦除磁盘并安装Ubuntu即可
<img src="/images/Linux-images/linux.76.png" alt="" />
6.设置信息
<img src="/images/Linux-images/linux.77.png" alt="" />
7.选择时区
<img src="/images/Linux-images/linux.78.png" alt="" />
8.安装
<img src="/images/Linux-images/linux.79.png" alt="" />
9.安装完成后重启
<img src="/images/Linux-images/linux.80.png" alt="" />
10.会让你回车进入
<img src="/images/Linux-images/linux.81.png" alt="" />
11.可以调节一些分辨率吧
先点击显示设置
<img src="/images/Linux-images/linux.82.png" alt="" />
我这里选择与我的电脑一样的分辨率
<img src="/images/Linux-images/linux.83.png" alt="" /></p>

<hr />

<h2 id="6设置镜像服务器">6.设置镜像服务器</h2>
<p>具体操作与(上文一.10.设置镜像服务器)一样，这里不再赘述
<img src="/images/Linux-images/linux.84.png" alt="" />
<img src="/images/Linux-images/linux.85.png" alt="" />
上面栏目的按键的作用，在把鼠标移上去后有解释
<img src="/images/Linux-images/linux.86.png" alt="" /></p>

<hr />

<h2 id="7查询ip和启动ssh服务">7.查询ip和启动SSH服务</h2>
<h3 id="71基础知识介绍">7.1.基础知识介绍</h3>
<h4 id="ssh">SSH</h4>
<p>SSH 是一种网络协议，用于安全地访问和管理远程计算机。它通过加密的连接提供安全的命令行界面，允许用户远程执行命令、管理文件、以及进行安全的文件传输（如 SFTP）。
SSH 可以同时支持这IPv4和IPv6协议</p>
<h4 id="ipv4">IPv4</h4>
<p>IPv4（Internet Protocol version 4）是互联网上最广泛使用的网络协议之一，使用 32 位地址格式，提供大约 42 亿个地址。IPv4 地址通常以四个十进制数表示，如 192.168.1.1。
我们之后传输文件都会用到ip地址</p>
<h4 id="ipv6">IPv6</h4>
<p>这是 IPv4 的继任者，使用 128 位地址，提供几乎无限的地址空间，旨在解决 IPv4 地址枯竭的问题。IPv6 地址通常以八组十六进制数表示。</p>
<h3 id="72查询ip">7.2.查询ip</h3>
<p>我们这里演示使用ipv4地址<br />
可以使用命令：<strong>ifconfig</strong>
一般需要先安装一下工具才能使用：<br />
<strong>sudo apt install net-tools</strong><br />
如果安装失败，可以换一下镜像服务器
<img src="/images/Linux-images/linux.95.png" alt="" /></p>
<h3 id="73启动ssh服务">7.3.启动SSH服务</h3>
<p>先安装openssh-server：<br />
<strong>sudo  apt install openssh-server</strong><br />
然后开启SSH(每次使用SSH都需要用此命令打开服务)：<br />
<strong>sudo systemctl start ssh</strong><br />
设置成开机自动启动(就成一直打开的状态了)：  <br />
<strong>sudo systemctl enable ssh</strong>
随后查看SSH服务状态：<br />
<strong>sudo systemctl status ssh</strong><br />
使用此命令后会进入分页器状态，按q退出
<img src="/images/Linux-images/linux.96.png" alt="" /></p>

<hr />

<h2 id="8传输文件vs-code">8.传输文件(VS Code)</h2>
<p>我们需要先下载插件，再配置环境</p>
<h3 id="81remote---ssh-插件">8.1.Remote - SSH 插件</h3>
<p><img src="/images/Linux-images/linux.97.png" alt="" /></p>
<h3 id="82主要功能">8.2.主要功能</h3>
<p>VS Code 的 Remote - SSH 插件允许你通过 SSH 远程连接到其他计算机，直接在 VS Code 中进行开发。这是一个非常强大的工具，适用于以下场景：</p>

<ol>
  <li>
    <p><strong>远程开发</strong>：你可以在本地计算机上使用 VS Code，但实际上是在远程服务器上运行代码。这对于服务器、云环境或容器的开发特别有用。</p>
  </li>
  <li>
    <p><strong>无缝集成</strong>：通过这个插件，你可以访问远程机器上的文件，使用终端和调试工具，几乎就像在本地开发一样。</p>
  </li>
  <li>
    <p><strong>环境配置</strong>：你可以在远程机器上安装所需的扩展和配置，VS Code 会自动同步这些设置。</p>
  </li>
  <li>
    <p><strong>安全性</strong>：通过 SSH 连接，数据传输是加密的，确保了安全性。</p>
  </li>
</ol>

<p>使用方法：</p>

<ul>
  <li>安装插件后，通过命令面板（Ctrl+Shift+P）选择“Remote-SSH: Connect to Host”，然后输入远程主机的 SSH 地址，进行连接。</li>
</ul>

<h3 id="83配置文件">8.3.配置文件</h3>
<p>打开命令面板，（F1,搜索栏输入一个&gt;，Ctrl+Shift+P都行），输入命令：   <br />
<strong>remote ssh: open  ssh configuration file</strong><br />
选第一个<br />
<img src="/images/Linux-images/linux.98.png" alt="" />
<strong>Host填入我们虚拟机的别名<br />
HostName填入我们虚拟机的ip地址<br />
User填入我们虚拟机上连接到用户的用户名</strong>
<img src="/images/Linux-images/linux.99.png" alt="" /></p>
<h3 id="84连接虚拟机">8.4.连接虚拟机</h3>
<p>打开命令面板，使用命令：
<strong>remote ssh : connect current windows to host</strong><br />
第一个当前窗口打开，第二个另外一个窗口打开
<img src="/images/Linux-images/linux.100.png" alt="" /></p>

<p><img src="/images/Linux-images/linux.101.png" alt="" />
我们虚拟机的系统是Linux，后面再输个密码
<img src="/images/Linux-images/linux.102.png" alt="" />
可以直接打开虚拟机上的文件，但需要输入密码
<img src="/images/Linux-images/linux.103.png" alt="" />
我打开桌面文件创建了一个py程序
<img src="/images/Linux-images/linux.104.png" alt="" />
<img src="/images/Linux-images/linux.105.png" alt="" />
VS Code左侧会出现一个远程资源管理器<br />
因为权限问题，只会显示你打开的文件<br />
终端可以直接使用linux上的命令<br />
如果要复制文件，你打开需要复制到的文件夹，然后把需要复制的文件拖进去就行了<br />
总的来说，VS Code中使用SSH连接更偏向开发，而不是传输文件
<img src="/images/Linux-images/linux.106.png" alt="" /></p>

<hr />

<h2 id="9传输文件mabaxterm">9.传输文件(MabaXterm)</h2>
<p>下载网址：<a href="https://mobaxterm.mobatek.net/download.html">https://mobaxterm.mobatek.net/download.html</a><br />
下载免费版的即可
<img src="/images/Linux-images/linux.107.png" alt="" />
可以看到常用的有两个版本,简单来说：<br />
第一个是便携版，无需安装就可直接运行<br />
第二个是安装版，需要安装，有更多功能<br />
<img src="/images/Linux-images/linux.108.png" alt="" />
我这里使用的是安装版，把下载的安装包解压后，点击msi文件安装
<img src="/images/Linux-images/linux.109.png" alt="" />
点击Session(指一个与远程服务器或系统的连接会话)
<img src="/images/Linux-images/linux.110.png" alt="" />
然后点击SSH，输入ip和用户名
<img src="/images/Linux-images/linux.111.png" alt="" />
初次连接需要输入密码
<img src="/images/Linux-images/linux.112.png" alt="" />
第一次用还需要设置一个主密码，在你进行特定操作时进行验证
<img src="/images/Linux-images/linux.113.png" alt="" />
我们成功连接了，可以进行文件间的传输了，拖动或点击上传图标都可以<br />
MobaXterm还有许多功能，需要自行探索<br />
<img src="/images/Linux-images/linux.114.png" alt="" /></p>

<hr />

<h2 id="10传输文件winscp">10.传输文件(WinSCP)</h2>
<p>下载网址：<a href="https://winscp.net/eng/download.php">https://winscp.net/eng/download.php</a>
<img src="/images/Linux-images/linux.115.png" alt="" />
打开进去，添加站点点新建标签页就会弹出这个页面<br />
主机名是我们虚拟机的ip地址，连接前确保虚拟机打开了SSH服务<br />
<img src="/images/Linux-images/linux.116.png" alt="" />
可以鼠标右键点击文件进行上传和下载，也可拖动进行
<img src="/images/Linux-images/linux.117.png" alt="" /></p>

<hr />

<h1 id="四使用linux">四.使用Linux</h1>

<hr />

<h2 id="1关于linux的一些网站">1.关于Linux的一些网站</h2>
<p>有几个网站提供了详细的 Linux 命令及其介绍：</p>

<ol>
  <li>
    <p><strong>Linux Command</strong> (<a href="https://linuxcommand.org/">https://linuxcommand.org/</a>)<br />
 这个网站提供了大量的 Linux 命令及其用法，适合初学者和有经验的用户。</p>
  </li>
  <li>
    <p><strong>SS64</strong> <a href="https://ss64.com/bash/">https://ss64.com/bash/</a><br />
 这个网站包含了 Bash 命令的完整列表，每个命令都有详细的说明和用法示例。</p>
  </li>
  <li>
    <p><strong>TLDP</strong> (The Linux Documentation Project) <a href="https://tldp.org/">https://tldp.org/</a><br />
 提供各种文档和指南，包括 Linux 命令和系统管理的手册。</p>
  </li>
  <li>
    <p><strong>Cheat Sheet</strong> <a href="https://www.cheat-sheets.org/">https://www.cheat-sheets.org/</a><br />
 这个网站提供了多个主题的备忘单，包括常用的 Linux 命令，方便快速查找。</p>
  </li>
  <li>
    <p><strong>Die.net</strong> <a href="https://linux.die.net/">https://linux.die.net/</a><br />
 这是一个提供 Linux 命令及其手册页的网站，可以查找特定命令的详细信息。</p>
  </li>
</ol>

<hr />

<h2 id="2shell的简介">2.Shell的简介</h2>
<h3 id="终端与-shell-的关系">终端与 Shell 的关系</h3>

<ul>
  <li>
    <p><strong>终端</strong>: 这是一个用于输入和输出的界面，用户通过终端与操作系统交互。在现代 Linux 系统中，终端通常指的是图形界面的终端模拟器（如 GNOME Terminal、Konsole、xterm 等）或纯文本的控制台（TTY）。</p>
  </li>
  <li>
    <p><strong>Shell</strong>: 这是一个在终端中运行的程序，用户通过它输入命令并接收结果。常见的 Shell 包括 Bash、Zsh 和 Fish 等。</p>
  </li>
</ul>

<h3 id="linux-命令">Linux 命令</h3>

<ul>
  <li>
    <p><strong>Linux 命令</strong>: 通常指的是可以在 Shell 中执行的命令。这些命令用于各种任务，如文件管理、系统监控和网络操作等。例如，<strong>ls</strong>、<strong>cp</strong>、<strong>mv</strong>、<strong>grep</strong> 等都是常见的 Linux 命令。</p>
  </li>
  <li>
    <p><strong>Shell 命令</strong>: 更准确地说，Linux 命令实际上是 Shell 命令，因为它们是在特定的 Shell 环境中执行的。因此，当人们提到“Linux 命令”时，通常是指 Shell 中可用的命令。</p>
  </li>
</ul>

<h3 id="总结-4">总结</h3>

<ul>
  <li><strong>终端</strong> 是与用户交互的界面。</li>
  <li><strong>Shell</strong> 是终端中的命令解释器，执行用户输入的命令。</li>
  <li><strong>Linux 命令</strong> 是在 Shell 中执行的命令。</li>
</ul>

<p>所以，Linux 终端通常与 Shell 是密切相关的，Linux 命令指的就是在 Shell 中可以执行的命令。</p>

<hr />

<h2 id="3linux的常用快捷键">3.Linux的常用快捷键</h2>
<p>在 Linux 中，尤其是在使用终端时，有许多快捷键可以提高效率。以下是一些常用的 Linux 快捷键及其功能：</p>
<h3 id="终端快捷键">终端快捷键</h3>

<ol>
  <li>
    <p><strong>基本操作</strong></p>

    <ul>
      <li><strong>Ctrl + C</strong>: 终止当前运行的命令。</li>
      <li><strong>Ctrl + Z</strong>: 将当前运行的命令暂停并放入后台。</li>
      <li><strong>fg</strong>: 将最近放入后台的命令恢复到前台运行。</li>
      <li><strong>bg</strong>: 将最近放入后台的命令在后台继续运行。</li>
    </ul>
  </li>
  <li>
    <p><strong>命令行编辑</strong></p>

    <ul>
      <li><strong>Ctrl + A</strong>: 移动光标到命令行的开头。</li>
      <li><strong>Ctrl + E</strong>: 移动光标到命令行的结尾。</li>
      <li><strong>Ctrl + U</strong>: 删除光标前的所有文本。</li>
      <li><strong>Ctrl + K</strong>: 删除光标后的所有文本。</li>
      <li><strong>Ctrl + W</strong>: 删除光标前一个单词。</li>
      <li><strong>Ctrl + Y</strong>: 粘贴之前删除的文本（来自 <strong>Ctrl + U</strong>、<strong>Ctrl + K</strong> 或 <strong>Ctrl + W</strong>）。</li>
    </ul>
  </li>
  <li>
    <p><strong>命令历史</strong></p>

    <ul>
      <li><strong>Ctrl + R</strong>: 启动反向搜索命令历史，可以输入命令的一部分来查找。</li>
      <li><strong>Ctrl + N</strong>: 向下浏览命令历史。</li>
      <li><strong>Ctrl + P</strong>: 向上浏览命令历史。</li>
      <li><strong>!!</strong>: 执行上一条命令。</li>
    </ul>
  </li>
  <li>
    <p><strong>光标移动</strong></p>

    <ul>
      <li><strong>左箭头</strong> / <strong>右箭头</strong>: 在命令行中移动光标。</li>
      <li><strong>Ctrl + 左箭头</strong> / <strong>Ctrl + 右箭头</strong>: 在命令行中按单词移动光标。</li>
    </ul>
  </li>
</ol>

<h3 id="系统快捷键">系统快捷键</h3>

<ol>
  <li>
    <p><strong>桌面环境快捷键（如 GNOME 或 KDE）</strong></p>

    <ul>
      <li><strong>Alt + F2</strong>: 打开运行对话框，可以输入命令直接运行。</li>
      <li><strong>Ctrl + Alt + T</strong>: 打开新的终端窗口。</li>
      <li><strong>Super (Windows 键) + D</strong>: 最小化所有窗口并显示桌面。</li>
      <li><strong>Alt + Tab</strong>: 在打开的应用程序之间切换。</li>
    </ul>
  </li>
  <li>
    <p><strong>文件管理器快捷键</strong></p>

    <ul>
      <li><strong>Ctrl + N</strong>: 打开新窗口。</li>
      <li><strong>Ctrl + Shift + N</strong>: 创建新文件夹。</li>
      <li><strong>Delete</strong>: 删除选中的文件或文件夹。</li>
    </ul>
  </li>
</ol>

<h3 id="文本编辑器如-vim-或-nano">文本编辑器（如 Vim 或 Nano）</h3>

<ul>
  <li>
    <p><strong>Vim 快捷键</strong></p>

    <ul>
      <li><strong>i</strong>: 进入插入模式。</li>
      <li><strong>Esc</strong>: 退出插入模式。</li>
      <li><strong>:w</strong>: 保存文件。</li>
      <li><strong>:q</strong>: 退出 Vim。</li>
      <li><strong>:wq</strong>: 保存并退出。</li>
    </ul>
  </li>
  <li>
    <p><strong>Nano 快捷键</strong></p>

    <ul>
      <li><strong>Ctrl + O</strong>: 保存文件。</li>
      <li><strong>Ctrl + X</strong>: 退出 Nano。</li>
      <li><strong>Ctrl + G</strong>: 显示帮助。</li>
    </ul>
  </li>
</ul>

<h3 id="其他常用快捷键">其他常用快捷键</h3>

<ul>
  <li><strong>Ctrl + Alt + F1</strong> 到 <strong>Ctrl + Alt + F6</strong>: 切换到不同的 TTY（文本终端）。</li>
  <li><strong>Ctrl + Alt + F7</strong>: 返回到图形界面。</li>
</ul>

<hr />

<h2 id="4linux目录的简介">4.Linux目录的简介</h2>
<p>Linux 文件系统采用树状结构，所有文件和目录都从根目录（<strong>/</strong>）开始。以下是一些主要的 Linux 目录及其功能：</p>

<h3 id="1--根目录">1. <strong>/</strong> (根目录)</h3>

<ul>
  <li>文件系统的顶层目录，所有其他目录都从这里开始。</li>
</ul>

<h3 id="2-bin">2. <strong>/bin</strong></h3>

<ul>
  <li>存放基本的用户命令和可执行文件，如 <strong>ls</strong>、<strong>cp</strong>、<strong>mv</strong>、<strong>cat</strong> 等。</li>
</ul>

<h3 id="3-sbin">3. <strong>/sbin</strong></h3>

<ul>
  <li>存放系统管理命令和可执行文件，通常需要管理员权限才能执行，如 <strong>shutdown</strong>、<strong>reboot</strong>、<strong>ifconfig</strong> 等。</li>
</ul>

<h3 id="4-etc">4. <strong>/etc</strong></h3>

<ul>
  <li>存放系统配置文件。这里的文件通常是纯文本格式，可以编辑和修改系统设置。</li>
</ul>

<h3 id="5-dev">5. <strong>/dev</strong></h3>

<ul>
  <li>存放设备文件，包括所有的硬件设备，如硬盘、终端、打印机等。在 Linux 中，设备也被视为文件。</li>
</ul>

<h3 id="6-proc">6. <strong>/proc</strong></h3>

<ul>
  <li>虚拟文件系统，提供关于系统和进程的信息。文件是动态生成的，包含内存使用、CPU 状态等信息，如 <strong>/proc/cpuinfo</strong> 和 <strong>/proc/meminfo</strong>。</li>
</ul>

<h3 id="7-var">7. <strong>/var</strong></h3>

<ul>
  <li>存放可变数据文件，如日志文件（在 <strong>/var/log</strong> 中）、邮件、缓存和临时文件等。</li>
</ul>

<h3 id="8-tmp">8. <strong>/tmp</strong></h3>

<ul>
  <li>存放临时文件，通常在系统重启后会被清空。</li>
</ul>

<h3 id="9-usr">9. <strong>/usr</strong></h3>

<ul>
  <li>存放用户级别的程序和文件，通常包含以下子目录：
    <ul>
      <li><strong>/usr/bin</strong>: 存放大多数用户命令的可执行文件。</li>
      <li><strong>/usr/sbin</strong>: 存放系统管理命令。</li>
      <li><strong>/usr/lib</strong>: 存放库文件和共享库。</li>
      <li><strong>/usr/share</strong>: 存放共享数据，如文档和图标。</li>
    </ul>
  </li>
</ul>

<h3 id="10-home">10. <strong>/home</strong></h3>

<ul>
  <li>每个用户的个人目录，用户的文件、配置和数据存储在这里。例如，用户 <strong>user1</strong> 的家目录通常是 <strong>/home/user1</strong>。</li>
</ul>

<h3 id="11-root">11. <strong>/root</strong></h3>

<ul>
  <li>超级用户（root 用户）的家目录，通常是 <strong>/root</strong>。</li>
</ul>

<h3 id="12-media">12. <strong>/media</strong></h3>

<ul>
  <li>挂载点，用于临时挂载可移动设备（如 USB 驱动器、CD-ROM 等）。</li>
</ul>

<h3 id="13-mnt">13. <strong>/mnt</strong></h3>

<ul>
  <li>通常用于临时挂载文件系统的地方，管理员可以在这里手动挂载额外的设备。</li>
</ul>

<h3 id="14-opt">14. <strong>/opt</strong></h3>

<ul>
  <li>存放额外的、可选的应用程序和软件包，通常用于大型软件包或应用程序。</li>
</ul>

<h3 id="15-boot">15. <strong>/boot</strong></h3>

<ul>
  <li>存放启动加载程序和内核文件。这里的文件在系统启动时被使用。</li>
</ul>

<h3 id="总结-5">总结</h3>

<p>Linux 目录结构清晰、层次分明，使得系统的管理和操作更为高效。理解这些目录及其功能是使用和管理 Linux 系统的重要基础。</p>

<hr />

<h2 id="5linux终端各种颜色的含义">5.Linux终端各种颜色的含义</h2>
<p>在 Linux 终端中，文件和目录的颜色编码提供了视觉上的帮助，帮助用户快速识别不同类型的文件和目录。颜色的具体表示可能因终端的配置而有所不同，但以下是常见的颜色及其代表的含义：</p>
<h3 id="常见颜色及其含义">常见颜色及其含义</h3>

<ol>
  <li>
    <p><strong>蓝色</strong></p>

    <ul>
      <li><strong>目录</strong>: 代表普通目录。</li>
    </ul>
  </li>
  <li>
    <p><strong>绿色</strong></p>

    <ul>
      <li><strong>可执行文件</strong>: 代表可执行的程序或脚本。</li>
    </ul>
  </li>
  <li>
    <p><strong>红色</strong></p>

    <ul>
      <li><strong>压缩文件</strong>: 代表压缩文件（如 <strong>.zip</strong>、<strong>.tar.gz</strong> 等）。</li>
    </ul>
  </li>
  <li>
    <p><strong>紫色（洋红色）</strong></p>

    <ul>
      <li><strong>图像文件</strong>: 代表图像文件（如 <strong>.jpg</strong>、<strong>.png</strong> 等）。</li>
    </ul>
  </li>
  <li>
    <p><strong>青色（青蓝色）</strong></p>

    <ul>
      <li><strong>符号链接</strong>: 代表指向其他文件或目录的符号链接。</li>
    </ul>
  </li>
  <li>
    <p><strong>黄色</strong></p>

    <ul>
      <li><strong>设备文件</strong>: 代表设备文件，通常位于 <strong>/dev</strong> 目录下。</li>
    </ul>
  </li>
  <li>
    <p><strong>白色</strong></p>

    <ul>
      <li><strong>普通文件</strong>: 代表普通文件。</li>
    </ul>
  </li>
  <li>
    <p><strong>亮蓝色</strong></p>

    <ul>
      <li><strong>目录（特殊目录）</strong>: 可能用于标识系统的特殊目录。</li>
    </ul>
  </li>
  <li>
    <p><strong>亮绿色</strong></p>

    <ul>
      <li><strong>可执行文件（特别的）</strong>: 可能用于标识系统的特殊可执行文件。</li>
    </ul>
  </li>
</ol>

<h3 id="颜色配置">颜色配置</h3>

<p>终端中的颜色设置通常由环境变量 <strong>LS_COLORS</strong> 控制。你可以通过以下命令查看当前的颜色设置：</p>

<p><strong>echo $LS_COLORS</strong></p>

<p>如果需要自定义颜色，你可以编辑 <strong>~/.bashrc</strong> 或 <strong>~/.bash_profile</strong> 文件，并设置 <strong>LS_COLORS</strong> 变量。</p>

<p>默认情况下，使用 <strong>ls</strong> 命令时，通常会带有 <strong>–color</strong> 选项，显示带颜色的文件和目录。示例如下：</p>

<p><strong>ls –color=auto</strong></p>

<p>这将自动根据文件类型使用颜色。</p>

<hr />

<h2 id="6linux的一些辅助操作">6.Linux的一些辅助操作</h2>
<h3 id="tab-键的作用">Tab 键的作用</h3>

<p>在 Linux 终端中，<strong>Tab 键</strong>主要用于自动补全功能，具体作用如下：</p>

<ol>
  <li>
    <p><strong>命令补全</strong>: 当你开始输入一个命令时，按下 Tab 键会自动补全命令。例如，输入 <strong>ls</strong> 后按 Tab，终端会尝试补全该命令。</p>
  </li>
  <li>
    <p><strong>文件和目录补全</strong>: 当输入文件或目录名时，按 Tab 键会自动补全输入。例如，输入 <strong>cd Doc</strong> 后按 Tab，如果当前目录下有名为 <strong>Documents</strong> 的目录，终端会自动补全为 <strong>cd Documents</strong>。</p>
  </li>
  <li>
    <p><strong>显示可选项</strong>: 如果有多个可能的补全选项，按下 Tab 键两次，终端会显示所有匹配的选项。例如，输入 <strong>ls /u</strong> 后按 Tab 两次，可能会显示 <strong>/usr/</strong> 和 <strong>/var/</strong> 等可选目录。</p>
  </li>
</ol>

<h3 id="man-命令"><strong>man</strong> 命令</h3>

<p><strong>man</strong>（manual的缩写）命令用于查看系统中的手册页（man pages），提供关于命令、系统调用和库函数的详细说明。使用格式如下：</p>

<p><strong>man [命令]</strong></p>

<h4 id="示例">示例：</h4>

<ul>
  <li>
    <p>查看 <strong>ls</strong> 命令的手册：</p>

    <p><strong>man ls</strong></p>
  </li>
  <li>
    <p>查看 <strong>man</strong> 命令本身的手册：</p>

    <p><strong>man man</strong></p>
  </li>
</ul>

<h4 id="手册页的简介">手册页的简介</h4>
<p>在 Linux 的 <strong>man</strong> 命令查看手册页时，有几个基本的键盘操作可以用来翻页、滚动和退出。以下是常用的操作键：</p>

<p><strong>翻页和滚动：</strong></p>

<ul>
  <li><strong>空格键 (Space)</strong>: 向下翻一页。</li>
  <li><strong>Enter</strong>: 向下滚动一行。</li>
  <li><strong>上箭头</strong>: 向上滚动一行。</li>
  <li><strong>下箭头</strong>: 向下滚动一行。</li>
  <li><strong>Ctrl + B</strong>: 向上翻一页（Back）。</li>
  <li><strong>Ctrl + F</strong>: 向下翻一页（Forward）。</li>
  <li><strong>Ctrl + U</strong>: 向上滚动半页（Up）。</li>
  <li><strong>Ctrl + D</strong>: 向下滚动半页（Down）。</li>
</ul>

<p><strong>搜索：</strong></p>

<ul>
  <li><strong>/</strong>: 启动向前搜索，可以输入你要搜索的关键词并按 Enter。</li>
  <li><strong>?</strong>: 启动向后搜索，同样输入关键词并按 Enter。</li>
  <li><strong>n</strong>: 跳转到下一个搜索结果。</li>
  <li><strong>N</strong>: 跳转到上一个搜索结果。</li>
</ul>

<p><strong>退出：</strong></p>

<ul>
  <li><strong>q</strong>: 退出手册页。</li>
</ul>

<p><strong>其他操作：</strong></p>

<ul>
  <li><strong>h</strong>: 显示帮助信息，提供常用的命令和快捷键的总结。</li>
</ul>

<h4 id="手册页结构">手册页结构</h4>

<p>手册页通常分为多个部分，包括：</p>

<ul>
  <li><strong>NAME</strong>: 命令的名称和简短描述。</li>
  <li><strong>SYNOPSIS</strong>: 命令的使用语法。</li>
  <li><strong>DESCRIPTION</strong>: 命令的详细描述和选项。</li>
  <li><strong>EXAMPLES</strong>: 使用命令的示例（并非所有手册都有）。</li>
  <li><strong>SEE ALSO</strong>: 相关命令或手册的参考。</li>
</ul>

<h4 id="常用选项">常用选项</h4>

<ul>
  <li><strong>man -k [关键词]</strong>: 根据关键词搜索手册页。</li>
  <li><strong>man -f [命令]</strong>: 显示命令的简短描述。
    <h3 id="whatis-命令"><strong>whatis</strong> 命令</h3>
  </li>
</ul>

<p><strong>whatis</strong> 命令用于显示指定命令或主题的简短描述。它通常用来快速了解某个命令的功能。使用格式如下：</p>

<p><strong>whatis [命令]</strong></p>

<h4 id="示例-1">示例：</h4>

<ul>
  <li>
    <p>查询 <strong>ls</strong> 命令的简短描述：</p>

    <p><strong>whatis ls</strong></p>
  </li>
  <li>
    <p>查询 <strong>grep</strong> 命令的简短描述：</p>

    <p><strong>whatis grep</strong></p>
  </li>
</ul>

<h4 id="注意事项">注意事项</h4>

<ul>
  <li>
    <p><strong>whatis</strong> 命令依赖于 man 数据库，通常在系统更新后需要更新手册数据库，可以通过以下命令更新：</p>

    <p><strong>mandb</strong></p>
  </li>
</ul>

<h3 id="总结-6">总结</h3>

<ul>
  <li><strong>Tab 键</strong>: 在 Linux 终端中用于命令和文件的自动补全。</li>
  <li><strong>man</strong> 命令**: 用于查看详细的命令手册。</li>
  <li><strong>whatis</strong> 命令**: 用于快速查看命令的简短描述。</li>
</ul>

<p>这些工具和功能可以大大提高在 Linux 系统中工作和操作的效率。</p>

<hr />

<h2 id="7linux常用命令">7.Linux常用命令</h2>
<p>以下是按使用频率排序的常用 Linux 命令，并简要介绍了它们的功能：</p>
<h3 id="1-ls-list">1. ls (List)</h3>

<ul>
  <li><strong>功能</strong>：列出当前目录下的文件和文件夹。</li>
  <li><strong>示例</strong>：<strong>ls -l</strong> 显示详细的文件信息（权限、大小、日期等）。</li>
</ul>

<h3 id="2-cd-change-directory">2. cd (Change Directory)</h3>

<ul>
  <li><strong>功能</strong>：用于在文件系统中更改当前目录。</li>
  <li><strong>示例</strong>：<strong>cd /home/user</strong> 切换到用户的主目录。</li>
</ul>

<h3 id="3-pwd-print-working-directory">3. pwd (Print Working Directory)</h3>

<ul>
  <li><strong>功能</strong>：显示当前所在的工作目录。</li>
  <li><strong>示例</strong>：<strong>pwd</strong> 返回当前路径，比如 <strong>/home/user</strong>。</li>
</ul>

<h3 id="4-mkdir-make-directory">4. mkdir (Make Directory)</h3>

<ul>
  <li><strong>功能</strong>：创建新的文件夹。</li>
  <li><strong>示例</strong>：<strong>mkdir new_folder</strong> 创建名为 <strong>new_folder</strong> 的目录。</li>
</ul>

<h3 id="5-rm-remove">5. rm (Remove)</h3>

<ul>
  <li><strong>功能</strong>：删除文件或目录。</li>
  <li><strong>示例</strong>：<strong>rm file.txt</strong> 删除文件，<strong>rm -r folder</strong> 递归删除文件夹及其内容。</li>
</ul>

<h3 id="6-cp-copy">6. cp (Copy)</h3>

<ul>
  <li><strong>功能</strong>：复制文件或目录。</li>
  <li><strong>示例</strong>：<strong>cp file.txt /home/user/</strong> 将 <strong>file.txt</strong> 复制到 <strong>/home/user/</strong> 目录。</li>
</ul>

<h3 id="7-mv-move">7. mv (Move)</h3>

<ul>
  <li><strong>功能</strong>：移动或重命名文件。</li>
  <li><strong>示例</strong>：<strong>mv file.txt /home/user/</strong> 移动文件，或 <strong>mv old_name.txt new_name.txt</strong> 重命名文件。</li>
</ul>

<h3 id="8-cat-concatenate">8. cat (Concatenate)</h3>

<ul>
  <li><strong>功能</strong>：查看文件内容，或将多个文件合并输出。</li>
  <li><strong>示例</strong>：<strong>cat file.txt</strong> 显示文件内容。</li>
</ul>

<h3 id="9-touch">9. touch</h3>

<ul>
  <li><strong>功能</strong>：创建空文件或更新现有文件的时间戳。</li>
  <li><strong>示例</strong>：<strong>touch newfile.txt</strong> 创建空文件 <strong>newfile.txt</strong>。</li>
</ul>

<h3 id="10-chmod-change-mode">10. chmod (Change Mode)</h3>

<ul>
  <li><strong>功能</strong>：更改文件或目录的权限。</li>
  <li><strong>示例</strong>：<strong>chmod 755 script.sh</strong> 设置 <strong>script.sh</strong> 为可执行权限。</li>
</ul>

<h3 id="11-chown-change-owner">11. chown (Change Owner)</h3>

<ul>
  <li><strong>功能</strong>：更改文件或目录的所有者。</li>
  <li><strong>示例</strong>：<strong>chown user:group file.txt</strong> 更改文件的所有者和组。</li>
</ul>

<h3 id="12-find">12. find</h3>

<ul>
  <li><strong>功能</strong>：在文件系统中搜索文件或目录。</li>
  <li><strong>示例</strong>：<strong>find /home -name “file.txt”</strong> 在 <strong>/home</strong> 目录下查找 <strong>file.txt</strong> 文件。</li>
</ul>

<h3 id="13-grep">13. grep</h3>

<ul>
  <li><strong>功能</strong>：从文件中搜索匹配的文本。</li>
  <li><strong>示例</strong>：<strong>grep “keyword” file.txt</strong> 在 <strong>file.txt</strong> 中搜索包含 “keyword” 的行。</li>
</ul>

<h3 id="14-echo">14. echo</h3>

<ul>
  <li><strong>功能</strong>：输出文本或变量的值。</li>
  <li><strong>示例</strong>：<strong>echo “Hello, World!”</strong> 输出文本，<strong>echo $PATH</strong> 显示环境变量 <strong>PATH</strong>。</li>
</ul>

<h3 id="15-df-disk-free">15. df (Disk Free)</h3>

<ul>
  <li><strong>功能</strong>：显示文件系统的磁盘使用情况。</li>
  <li><strong>示例</strong>：<strong>df -h</strong> 以人类可读的格式显示磁盘使用情况。</li>
</ul>

<h3 id="16-du-disk-usage">16. du (Disk Usage)</h3>

<ul>
  <li><strong>功能</strong>：查看文件或目录占用的磁盘空间。</li>
  <li><strong>示例</strong>：<strong>du -sh /home/user/</strong> 查看用户目录的大小。</li>
</ul>

<h3 id="17-ps-process-status">17. ps (Process Status)</h3>

<ul>
  <li><strong>功能</strong>：显示当前系统运行的进程。</li>
  <li><strong>示例</strong>：<strong>ps aux</strong> 列出所有进程的详细信息。</li>
</ul>

<h3 id="18-top">18. top</h3>

<ul>
  <li><strong>功能</strong>：实时显示系统进程和资源使用情况。</li>
  <li><strong>示例</strong>：<strong>top</strong> 显示 CPU、内存使用等进程状态。</li>
</ul>

<h3 id="19-kill">19. kill</h3>

<ul>
  <li><strong>功能</strong>：结束进程。</li>
  <li><strong>示例</strong>：<strong>kill 1234</strong> 结束进程号为 <strong>1234</strong> 的进程，<strong>kill -9 1234</strong> 强制结束。</li>
</ul>

<h3 id="20-nano--vim--vi">20. nano / vim / vi</h3>

<ul>
  <li><strong>功能</strong>：文本编辑器，<strong>nano</strong> 是易用的命令行文本编辑器，<strong>vim</strong> 和 <strong>vi</strong> 功能更强大，适合高级用户。</li>
  <li><strong>示例</strong>：<strong>nano file.txt</strong> 或 <strong>vim file.txt</strong> 编辑文件。</li>
</ul>

<h3 id="21-sudo-superuser-do">21. sudo (Superuser Do)</h3>

<ul>
  <li><strong>功能</strong>：以超级用户权限执行命令。</li>
  <li><strong>示例</strong>：<strong>sudo apt update</strong> 更新软件包信息。</li>
</ul>

<h3 id="22-apt--yum--dnf">22. apt / yum / dnf</h3>

<ul>
  <li><strong>功能</strong>：包管理器，用于安装、更新、删除软件包。<strong>apt</strong> 用于基于 Debian 的系统（如 Ubuntu），<strong>yum</strong> 和 <strong>dnf</strong> 用于基于 RedHat 的系统。</li>
  <li><strong>示例</strong>：<strong>sudo apt install package</strong> 安装软件包。</li>
</ul>

<h3 id="23-wget">23. wget</h3>

<ul>
  <li><strong>功能</strong>：从网络下载文件。</li>
  <li><strong>示例</strong>：<strong>wget http://example.com/file.zip</strong> 下载文件。</li>
</ul>

<h3 id="24-curl">24. curl</h3>

<ul>
  <li><strong>功能</strong>：传输数据，支持多种协议（HTTP、FTP等），通常用于 API 调用或文件下载。</li>
  <li><strong>示例</strong>：<strong>curl https://api.example.com</strong> 发送 GET 请求。</li>
</ul>

<h3 id="25-tar">25. tar</h3>

<ul>
  <li><strong>功能</strong>：用于压缩和解压缩文件。</li>
  <li><strong>示例</strong>：<strong>tar -czvf archive.tar.gz /path/to/directory</strong> 压缩目录，<strong>tar -xvzf archive.tar.gz</strong> 解压缩。</li>
</ul>

<h3 id="26-zipunzip">26. zip/unzip</h3>

<ul>
  <li><strong>功能</strong>：压缩和解压缩 ZIP 文件。</li>
  <li><strong>示例</strong>：<strong>zip -r archive.zip folder</strong> 压缩目录，<strong>unzip archive.zip</strong> 解压缩文件。</li>
</ul>

<h3 id="27-ssh-secure-shell">27. ssh (Secure Shell)</h3>

<ul>
  <li><strong>功能</strong>：远程登录到另一台 Linux 服务器。</li>
  <li><strong>示例</strong>：<strong>ssh user@hostname</strong> 通过 SSH 登录远程服务器。</li>
</ul>

<h3 id="28-scp-secure-copy">28. scp (Secure Copy)</h3>

<ul>
  <li><strong>功能</strong>：通过 SSH 进行安全的文件传输。</li>
  <li><strong>示例</strong>：<strong>scp file.txt user@remote:/path/to/destination</strong> 将文件传输到远程服务器。</li>
</ul>

<h3 id="29-history">29. history</h3>

<ul>
  <li><strong>功能</strong>：显示用户输入过的命令历史记录。</li>
  <li><strong>示例</strong>：<strong>history</strong> 列出最近的命令，<strong>!123</strong> 执行历史记录中第 123 个命令。</li>
</ul>

<h3 id="30-reboot--shutdown">30. reboot / *shutdown</h3>

<ul>
  <li><strong>功能</strong>：重新启动或关闭系统。</li>
  <li><strong>示例</strong>：<strong>sudo reboot</strong> 重新启动系统，<strong>sudo shutdown -h now</strong> 立即关闭系统。</li>
</ul>

<h3 id="31-alias">31. alias</h3>

<ul>
  <li><strong>功能</strong>：为命令创建别名。</li>
  <li><strong>示例</strong>：<strong>alias ll=’ls -l’</strong> 将 <strong>ll</strong> 设置为 <strong>ls -l</strong> 的别名。</li>
</ul>

<h3 id="32-unalias">32. unalias</h3>

<ul>
  <li><strong>功能</strong>：删除命令别名。</li>
  <li><strong>示例</strong>：<strong>unalias ll</strong> 删除 <strong>ll</strong> 的别名。</li>
</ul>

<h3 id="33-awk">33. awk</h3>

<ul>
  <li><strong>功能</strong>：一个强大的文本处理工具，用于模式匹配和文本过滤。</li>
  <li><strong>示例</strong>：<strong>awk ‘{print $1}’ file.txt</strong> 输出每行的第一个字段。</li>
</ul>

<h3 id="34-sed-stream-editor">34. sed (Stream Editor)</h3>

<ul>
  <li><strong>功能</strong>：用于对文件内容进行文本替换、删除等操作。</li>
  <li><strong>示例</strong>：<strong>sed ‘s/old/new/g’ file.txt</strong> 将文件中所有的 “old” 替换为 “new”。</li>
</ul>

<h3 id="35-head">35. head</h3>

<ul>
  <li><strong>功能</strong>：显示文件的前几行。</li>
  <li><strong>示例</strong>：<strong>head -n 10 file.txt</strong> 显示文件的前 10 行。</li>
</ul>

<h3 id="36-tail">36. tail</h3>

<ul>
  <li><strong>功能</strong>：显示文件的最后几行。</li>
  <li><strong>示例</strong>：<strong>tail -n 10 file.txt</strong> 显示文件的最后 10 行，<strong>tail -f file.txt</strong> 实时监视文件更新。</li>
</ul>

<h3 id="37-sort">37. sort</h3>

<ul>
  <li><strong>功能</strong>：对文件内容进行排序。</li>
  <li><strong>示例</strong>：<strong>sort file.txt</strong> 对文件的行进行排序。</li>
</ul>

<h3 id="38-uniq">38. uniq</h3>

<ul>
  <li><strong>功能</strong>：删除文件中的重复行。</li>
  <li><strong>示例</strong>：<strong>uniq file.txt</strong> 去除重复的行。</li>
</ul>

<h3 id="39-wc-word-count">39. wc (Word Count)</h3>

<ul>
  <li><strong>功能</strong>：计算文件中的行数、单词数、字符数。</li>
  <li><strong>示例</strong>：<strong>wc file.txt</strong> 输出文件的行数、单词数和字符数。</li>
</ul>

<h3 id="40-basename">40. basename</h3>

<ul>
  <li><strong>功能</strong>：获取路径中去掉目录部分的文件名。</li>
  <li><strong>示例</strong>：<strong>basename /home/user/file.txt</strong> 输出 <strong>file.txt</strong>。</li>
</ul>

<h3 id="41-dirname">41. dirname</h3>

<ul>
  <li><strong>功能</strong>：获取文件的目录路径。</li>
  <li><strong>示例</strong>：<strong>dirname /home/user/file.txt</strong> 输出 <strong>/home/user</strong>。</li>
</ul>

<h3 id="42-diff">42. diff</h3>

<ul>
  <li><strong>功能</strong>：比较两个文件的不同。</li>
  <li><strong>示例</strong>：<strong>diff file1.txt file2.txt</strong> 显示两个文件之间的差异。</li>
</ul>

<h3 id="43-ln">43. ln</h3>

<ul>
  <li><strong>功能</strong>：创建文件或目录的符号链接或硬链接。</li>
  <li><strong>示例</strong>：<strong>ln -s file.txt link_to_file.txt</strong> 创建一个符号链接。</li>
</ul>

<h3 id="44-locate">44. locate</h3>

<ul>
  <li><strong>功能</strong>：快速查找文件。</li>
  <li><strong>示例</strong>：<strong>locate file.txt</strong> 查找系统中所有名为 <strong>file.txt</strong> 的文件。</li>
</ul>

<h3 id="45-updatedb">45. updatedb</h3>

<ul>
  <li><strong>功能</strong>：更新 <strong>locate</strong> 命令使用的数据库。</li>
  <li><strong>示例</strong>：<strong>sudo updatedb</strong> 更新文件索引。</li>
</ul>

<h3 id="46-mount">46. mount</h3>

<ul>
  <li><strong>功能</strong>：挂载文件系统到指定目录。</li>
  <li><strong>示例</strong>：<strong>sudo mount /dev/sdb1 /mnt</strong> 将 <strong>/dev/sdb1</strong> 分区挂载到 <strong>/mnt</strong> 目录。</li>
</ul>

<h3 id="47-umount">47. umount</h3>

<ul>
  <li><strong>功能</strong>：卸载文件系统。</li>
  <li><strong>示例</strong>：<strong>sudo umount /mnt</strong> 卸载挂载的文件系统。</li>
</ul>

<h3 id="48-dd">48. dd</h3>

<ul>
  <li><strong>功能</strong>：用于低级别复制和转换文件或设备数据，通常用于创建磁盘映像。</li>
  <li><strong>示例</strong>：<strong>dd if=/dev/sda of=/dev/sdb</strong> 复制磁盘。</li>
</ul>

<h3 id="49-fdisk">49. fdisk</h3>

<ul>
  <li><strong>功能</strong>：用于查看和管理磁盘分区表。</li>
  <li><strong>示例</strong>：<strong>sudo fdisk -l</strong> 列出所有分区信息。</li>
</ul>

<h3 id="50-df-disk-free">50. df (Disk Free)</h3>

<ul>
  <li><strong>功能</strong>：显示文件系统的磁盘空间使用情况。</li>
  <li><strong>示例</strong>：<strong>df -h</strong> 以人类可读的格式显示磁盘使用情况。</li>
</ul>

<h3 id="51-du">51. du</h3>

<ul>
  <li><strong>功能</strong>：查看文件或目录占用的磁盘空间。</li>
  <li><strong>示例</strong>：<strong>du -sh /home/user/</strong> 查看用户目录的大小。</li>
</ul>

<h3 id="52-nc-netcat">52. nc (Netcat)</h3>

<ul>
  <li><strong>功能</strong>：网络工具，用于调试和通信。</li>
  <li><strong>示例</strong>：<strong>nc -l 12345</strong> 启动监听端口 12345。</li>
</ul>

<h3 id="53-ifconfig">53. ifconfig</h3>

<ul>
  <li><strong>功能</strong>：配置或显示网络接口。</li>
  <li><strong>示例</strong>：<strong>ifconfig</strong> 显示网络接口信息。</li>
</ul>

<h3 id="54-ip">54. ip</h3>

<ul>
  <li><strong>功能</strong>：更现代的网络接口管理工具，替代 <strong>ifconfig</strong>。</li>
  <li><strong>示例</strong>：<strong>ip addr</strong> 显示网络接口及 IP 地址。</li>
</ul>

<h3 id="55-ping">55. ping</h3>

<ul>
  <li><strong>功能</strong>：用于测试网络连接和延迟。</li>
  <li><strong>示例</strong>：<strong>ping google.com</strong> 测试到 Google 的网络连接。</li>
</ul>

<h3 id="56-traceroute">56. traceroute</h3>

<ul>
  <li><strong>功能</strong>：追踪数据包从源到目的地经过的路径。</li>
  <li><strong>示例</strong>：<strong>traceroute google.com</strong> 查看数据包的传输路径。</li>
</ul>

<h3 id="57-netstat">57. netstat</h3>

<ul>
  <li><strong>功能</strong>：显示网络连接、路由表和接口统计信息。</li>
  <li><strong>示例</strong>：<strong>netstat -an</strong> 显示所有网络连接。</li>
</ul>

<h3 id="58-ss">58. ss</h3>

<ul>
  <li><strong>功能</strong>：类似于 <strong>netstat</strong>，用于显示网络连接。</li>
  <li><strong>示例</strong>：<strong>ss -tuln</strong> 显示监听的套接字。</li>
</ul>

<h3 id="59-uptime">59. uptime</h3>

<ul>
  <li><strong>功能</strong>：显示系统已运行的时间、当前时间和负载。</li>
  <li><strong>示例</strong>：<strong>uptime</strong> 显示系统运行时长。</li>
</ul>

<h3 id="60-htop">60. htop</h3>

<ul>
  <li><strong>功能</strong>：一个增强版的 <strong>top</strong>，用于实时查看系统资源使用情况。</li>
  <li><strong>示例</strong>：<strong>htop</strong> 启动 htop 监控工具。</li>
</ul>

<h3 id="61-dmesg">61. dmesg</h3>

<ul>
  <li><strong>功能</strong>：显示内核环缓冲区的消息，通常用于调试系统问题。</li>
  <li><strong>示例</strong>：<strong>dmesg</strong> 查看启动日志。</li>
</ul>

<h3 id="62-journalctl">62. journalctl</h3>

<ul>
  <li><strong>功能</strong>：查看和过滤系统日志。</li>
  <li><strong>示例</strong>：<strong>journalctl -xe</strong> 查看系统日志中最新的错误。</li>
</ul>

<h3 id="63-who">63. who</h3>

<ul>
  <li><strong>功能</strong>：显示当前登录到系统的用户。</li>
  <li><strong>示例</strong>：<strong>who</strong> 列出当前在线用户。</li>
</ul>

<h3 id="64-w">64. w</h3>

<ul>
  <li><strong>功能</strong>：显示当前登录用户及其活动。</li>
  <li><strong>示例</strong>：<strong>w</strong> 列出用户的登录时间和活动。</li>
</ul>

<h3 id="65-useradd">65. useradd</h3>

<ul>
  <li><strong>功能</strong>：添加新用户。</li>
  <li><strong>示例</strong>：<strong>sudo useradd username</strong> 添加新用户。</li>
</ul>

<h3 id="66-usermod">66. usermod</h3>

<ul>
  <li><strong>功能</strong>：修改用户帐户信息。</li>
  <li><strong>示例</strong>：<strong>sudo usermod -aG sudo username</strong> 将用户添加到 sudo 组。</li>
</ul>

<h3 id="67-userdel">67. userdel</h3>

<ul>
  <li><strong>功能</strong>：删除用户。</li>
  <li><strong>示例</strong>：<strong>sudo userdel username</strong> 删除用户帐户。</li>
</ul>

<h3 id="68-passwd">68. passwd</h3>

<ul>
  <li><strong>功能</strong>：更改用户密码。</li>
  <li><strong>示例</strong>：<strong>passwd username</strong> 为 <strong>username</strong> 更改密码。</li>
</ul>

<h3 id="69-groupadd">69. groupadd</h3>

<ul>
  <li><strong>功能</strong>：创建新用户组。</li>
  <li><strong>示例</strong>：<strong>sudo groupadd groupname</strong> 创建新组。</li>
</ul>

<h3 id="70-groups">70. groups</h3>

<ul>
  <li><strong>功能</strong>：显示用户所属的组。</li>
  <li><strong>示例</strong>：<strong>groups username</strong> 查看用户所属的组。</li>
</ul>

<h3 id="71-tar">71. tar</h3>

<ul>
  <li><strong>功能</strong>：用于打包和解压缩文件。</li>
  <li><strong>示例</strong>：<strong>tar -czvf archive.tar.gz folder/</strong> 压缩目录。</li>
</ul>

<h3 id="72-gzip">72. gzip</h3>

<ul>
  <li><strong>功能</strong>：压缩文件。</li>
  <li><strong>示例</strong>：<strong>gzip file.txt</strong> 将文件压缩为 <strong>file.txt.gz</strong>。</li>
</ul>

<h3 id="73-gunzip">73. gunzip</h3>

<ul>
  <li><strong>功能</strong>：解压缩 gzip 文件。</li>
  <li><strong>示例</strong>：<strong>gunzip file.txt.gz</strong> 解压缩文件。</li>
</ul>

<h3 id="74-bzip2">74. bzip2</h3>

<ul>
  <li><strong>功能</strong>：使用 bzip2 压缩文件。</li>
  <li><strong>示例</strong>：<strong>bzip2 file.txt</strong> 将文件压缩为 **fileHere is the continuation of 70 additional Linux commands, completing the list:</li>
</ul>

<h3 id="74-bzip2-1">74. bzip2</h3>

<ul>
  <li><strong>功能</strong>：使用 bzip2 压缩文件。</li>
  <li><strong>示例</strong>：<strong>bzip2 file.txt</strong> 将文件压缩为 <strong>file.txt.bz2</strong>。</li>
</ul>

<h3 id="75-bunzip2">75. bunzip2</h3>

<ul>
  <li><strong>功能</strong>：解压缩 bzip2 文件。</li>
  <li><strong>示例</strong>：<strong>bunzip2 file.txt.bz2</strong> 解压缩文件。</li>
</ul>

<h3 id="76-xargs">76. xargs</h3>

<ul>
  <li><strong>功能</strong>：将标准输入的输出作为命令的参数。</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td><strong>示例</strong>：**cat files.txt</td>
          <td>xargs rm** 删除列表中的文件。</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h3 id="77-find">77. find</h3>

<ul>
  <li><strong>功能</strong>：查找文件或目录。</li>
  <li><strong>示例</strong>：<strong>find /home -name “file.txt”</strong> 在 <strong>/home</strong> 目录下查找名为 <strong>file.txt</strong> 的文件。</li>
</ul>

<h3 id="78-locate">78. locate</h3>

<ul>
  <li><strong>功能</strong>：基于数据库快速查找文件。</li>
  <li><strong>示例</strong>：<strong>locate file.txt</strong> 查找文件。</li>
</ul>

<h3 id="79-chown">79. chown</h3>

<ul>
  <li><strong>功能</strong>：更改文件的所有者。</li>
  <li><strong>示例</strong>：<strong>sudo chown user:group file.txt</strong> 更改文件的所有者为 <strong>user</strong>，组为 <strong>group</strong>。</li>
</ul>

<h3 id="80-chgrp">80. chgrp</h3>

<ul>
  <li><strong>功能</strong>：更改文件的组。</li>
  <li><strong>示例</strong>：<strong>sudo chgrp groupname file.txt</strong> 将文件的组更改为 <strong>groupname</strong>。</li>
</ul>

<h3 id="81-chmod">81. chmod</h3>

<ul>
  <li><strong>功能</strong>：更改文件权限。</li>
  <li><strong>示例</strong>：<strong>chmod 755 file.txt</strong> 设置文件权限为所有者可读写执行，组和其他人可读执行。</li>
</ul>

<h3 id="82-umask">82. umask</h3>

<ul>
  <li><strong>功能</strong>：设置文件创建时的默认权限掩码。</li>
  <li><strong>示例</strong>：<strong>umask 022</strong> 创建文件的默认权限为 755。</li>
</ul>

<h3 id="83-scp">83. scp</h3>

<ul>
  <li><strong>功能</strong>：通过 SSH 安全地复制文件。</li>
  <li><strong>示例</strong>：<strong>scp file.txt user@server:/path</strong> 将文件复制到远程服务器。</li>
</ul>

<h3 id="84-rsync">84. rsync</h3>

<ul>
  <li><strong>功能</strong>：高效地同步文件和目录。</li>
  <li><strong>示例</strong>：<strong>rsync -avz /source/ /destination/</strong> 同步源目录到目标目录。</li>
</ul>

<h3 id="85-ssh">85. ssh</h3>

<ul>
  <li><strong>功能</strong>：通过 SSH 连接到远程服务器。</li>
  <li><strong>示例</strong>：<strong>ssh user@server</strong> 连接到远程服务器。</li>
</ul>

<h3 id="86-wget">86. wget</h3>

<ul>
  <li><strong>功能</strong>：从网络下载文件。</li>
  <li><strong>示例</strong>：<strong>wget http://example.com/file.txt</strong> 下载文件。</li>
</ul>

<h3 id="87-curl">87. curl</h3>

<ul>
  <li><strong>功能</strong>：从网络传输数据，支持多种协议。</li>
  <li><strong>示例</strong>：<strong>curl http://example.com</strong> 从网页获取内容。</li>
</ul>

<h3 id="88-uptime">88. uptime</h3>

<ul>
  <li><strong>功能</strong>：显示系统已运行时间和负载。</li>
  <li><strong>示例</strong>：<strong>uptime</strong> 显示系统正常运行的时间。</li>
</ul>

<h3 id="89-free">89. free</h3>

<ul>
  <li><strong>功能</strong>：显示系统内存的使用情况。</li>
  <li><strong>示例</strong>：<strong>free -h</strong> 以人类可读格式显示内存使用。</li>
</ul>

<h3 id="90-vmstat">90. vmstat</h3>

<ul>
  <li><strong>功能</strong>：显示系统的虚拟内存统计。</li>
  <li><strong>示例</strong>：<strong>vmstat</strong> 实时监控系统性能。</li>
</ul>

<h3 id="91-lsof">91. lsof</h3>

<ul>
  <li><strong>功能</strong>：显示当前打开的文件。</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td><strong>示例</strong>：**lsof</td>
          <td>grep filename** 查看哪些进程打开了特定文件。</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h3 id="92-top">92. top</h3>

<ul>
  <li><strong>功能</strong>：实时显示系统进程的运行情况。</li>
  <li><strong>示例</strong>：<strong>top</strong> 显示进程及资源使用情况。</li>
</ul>

<h3 id="93-kill">93. kill</h3>

<ul>
  <li><strong>功能</strong>：终止指定进程。</li>
  <li><strong>示例</strong>：<strong>kill -9 PID</strong> 强制终止进程。</li>
</ul>

<h3 id="94-pkill">94. pkill</h3>

<ul>
  <li><strong>功能</strong>：根据进程名终止进程。</li>
  <li><strong>示例</strong>：<strong>pkill firefox</strong> 关闭所有 Firefox 进程。</li>
</ul>

<h3 id="95-killall">95. killall</h3>

<ul>
  <li><strong>功能</strong>：终止所有匹配的进程。</li>
  <li><strong>示例</strong>：<strong>killall apache2</strong> 终止所有 <strong>apache2</strong> 进程。</li>
</ul>

<h3 id="96-cron">96. cron</h3>

<ul>
  <li><strong>功能</strong>：用于定时执行任务的守护进程。</li>
  <li><strong>示例</strong>：<strong>crontab -e</strong> 编辑定时任务。</li>
</ul>

<h3 id="97-at">97. at</h3>

<ul>
  <li><strong>功能</strong>：用于计划在特定时间运行一次性任务。</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td><strong>示例</strong>：**echo “sh backup.sh”</td>
          <td>at 2pm** 计划在下午 2 点运行备份脚本。</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h3 id="98-batch">98. batch</h3>

<ul>
  <li><strong>功能</strong>：在系统负载较低时运行批处理任务。</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td><strong>示例</strong>：**echo “tar -czf backup.tar.gz /data”</td>
          <td>batch** 任务将在系统负载较低时执行。</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h3 id="99-hostname">99. hostname</h3>

<ul>
  <li><strong>功能</strong>：显示或设置系统的主机名。</li>
  <li><strong>示例</strong>：<strong>hostname</strong> 显示当前主机名。</li>
</ul>

<h3 id="100-whoami">100. whoami</h3>

<ul>
  <li><strong>功能</strong>：显示当前登录用户的用户名。</li>
  <li><strong>示例</strong>：<strong>whoami</strong> 输出当前用户名称。</li>
</ul>

<h3 id="101-uptime">101. uptime</h3>

<ul>
  <li><strong>功能</strong>：显示系统启动时间及负载。</li>
  <li><strong>示例</strong>：<strong>uptime</strong> 显示系统运行时长。</li>
</ul>

<h3 id="102-dstat">102. dstat</h3>

<ul>
  <li><strong>功能</strong>：实时显示系统的资源使用情况。</li>
  <li><strong>示例</strong>：<strong>dstat</strong> 实时监控 CPU、内存和网络使用。</li>
</ul>

<h3 id="103-passwd">103. passwd</h3>

<ul>
  <li><strong>功能</strong>：更改用户密码。</li>
  <li><strong>示例</strong>：<strong>passwd</strong> 为当前用户更改密码。</li>
</ul>

<h3 id="104-groupadd">104. groupadd</h3>

<ul>
  <li><strong>功能</strong>：创建一个新的用户组。</li>
  <li><strong>示例</strong>：<strong>sudo groupadd developers</strong> 创建一个名为 <strong>developers</strong> 的用户组。</li>
</ul>

<h3 id="105useradd">105.useradd</h3>

<ul>
  <li><strong>功能</strong>：创建一个新用户。</li>
  <li><strong>示例</strong>：<strong>sudo useradd username</strong> 创建新用户。</li>
</ul>

<h3 id="106-usermod">106. usermod</h3>

<ul>
  <li><strong>功能</strong>：修改现有用户的属性。</li>
  <li><strong>示例</strong>：<strong>sudo usermod -aG groupname username</strong> 将用户添加到一个组中。</li>
</ul>

<h3 id="107-deluser">107. deluser</h3>

<ul>
  <li><strong>功能</strong>：删除用户。</li>
  <li><strong>示例</strong>：<strong>sudo deluser username</strong> 删除用户账户。</li>
</ul>

<h3 id="108-modprobe">108. modprobe</h3>

<ul>
  <li><strong>功能</strong>：加载或移除内核模块。</li>
  <li><strong>示例</strong>：<strong>sudo modprobe module_name</strong> 加载内核模块。</li>
</ul>

<h3 id="109-lsmod">109. lsmod</h3>

<ul>
  <li><strong>功能</strong>：列出已加载的内核模块。</li>
  <li><strong>示例</strong>：<strong>lsmod</strong> 显示当前加载的内核模块。</li>
</ul>

<h3 id="110-rmmod">110. rmmod</h3>

<ul>
  <li><strong>功能</strong>：卸载内核模块。</li>
  <li><strong>示例</strong>：<strong>sudo rmmod module_name</strong> 卸载指定的内核模块。</li>
</ul>

<h3 id="111-depmod">111. depmod</h3>

<ul>
  <li><strong>功能</strong>：生成模块依赖信息。</li>
  <li><strong>示例</strong>：<strong>sudo depmod</strong> 生成模块依赖信息文件。</li>
</ul>

<h3 id="112-iwconfig">112. iwconfig</h3>

<ul>
  <li><strong>功能</strong>：配置无线网络接口。</li>
  <li><strong>示例</strong>：<strong>iwconfig wlan0 essid “network_name”</strong> 配置无线网络。</li>
</ul>

<h3 id="113-ifup">113. ifup</h3>

<ul>
  <li><strong>功能</strong>：启动网络接口。</li>
  <li><strong>示例</strong>：<strong>sudo ifup eth0</strong> 启动以太网接口。</li>
</ul>

<h3 id="114-ifdown">114. ifdown</h3>

<ul>
  <li><strong>功能</strong>：关闭网络接口。</li>
  <li><strong>示例</strong>：<strong>sudo ifdown eth0</strong> 关闭以太网接口。</li>
</ul>

<h3 id="115-dhclient">115. dhclient</h3>

<ul>
  <li><strong>功能</strong>：获取或释放 DHCP 分配的 IP 地址。</li>
  <li><strong>示例</strong>：<strong>sudo dhclient eth0</strong> 获取新的 IP 地址。</li>
</ul>

<h3 id="116-host">116. host</h3>

<ul>
  <li><strong>功能</strong>：DNS 查找工具，用于解析域名到 IP。</li>
  <li><strong>示例</strong>：<strong>host google.com</strong> 获取 Google 的 IP 地址。</li>
</ul>

<h3 id="117-dig">117. dig</h3>

<ul>
  <li><strong>功能</strong>：更高级的 DNS 查找工具。</li>
  <li><strong>示例</strong>：<strong>dig example.com</strong> 查询 DNS 信息。</li>
</ul>

<h3 id="118-nslookup">118. nslookup</h3>

<ul>
  <li><strong>功能</strong>：查询域名或 IP 地址的 DNS 记录。</li>
  <li><strong>示例</strong>：<strong>nslookup google.com</strong> 查询 DNS 记录。</li>
</ul>]]></content><author><name>Your Sidebar Name</name><email>none@example.org</email></author><category term="技术，编程" /><category term="Linux" /><summary type="html"><![CDATA[Linux 是一个开源的类 Unix 操作系统，以其自由、开源、多任务处理和安全性而闻名，广泛应用于服务器和个人计算机，具有强大的命令行工具和社区支持]]></summary></entry><entry><title type="html">CMD与Powershell 使用教程</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/22/CMD%E4%B8%8EPowershell%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" rel="alternate" type="text/html" title="CMD与Powershell 使用教程" /><published>2024-10-22T00:00:00+08:00</published><updated>2024-10-22T00:00:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/22/CMD%E4%B8%8EPowershell%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/22/CMD%E4%B8%8EPowershell%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"><![CDATA[<h1 id="简介"><strong>简介</strong></h1>
<p>本文主要内容： <br />
1.分别介绍CMD与Powershell的概念<br />
2.分别列出CMD与Powershell的常用命令<br />
3.分别演示CMD与Powershell的常见使用<br />
4.分别举例bat与ps1脚本的一些使用示例</p>

<hr />

<h1 id="一cmd与powershell的概述"><strong>一.CMD与Powershell的概述</strong></h1>

<hr />

<h2 id="1cmd">1.CMD</h2>

<p>CMD（命令提示符）是<strong>Windows 操作系统</strong>中的一个<strong>命令行界面</strong>，用于执行各种命令行任务。它的作用主要集中在基本的<strong>系统操作、文件管理、网络配置和诊断任务</strong>等，尽管功能比 PowerShell 简单，但在日常使用中仍然非常实用。</p>

<h3 id="1-文件和目录管理">1. 文件和目录管理</h3>

<p>CMD 最基本的功能是操作文件和文件夹。用户可以通过命令创建、删除、复制和移动文件及文件夹，也可以查看当前目录中的文件列表或更改当前工作目录。文件管理操作在维护和组织系统文件时非常常用。</p>

<h3 id="2-系统诊断和维护">2. 系统诊断和维护</h3>

<p>CMD 提供了许多系统维护相关的命令，用于检查系统健康状态、修复系统文件错误和获取有关计算机硬件和操作系统的信息。这些命令可以帮助用户排查系统问题，如文件损坏、磁盘错误等，确保计算机稳定运行。</p>

<h3 id="3-网络操作与诊断">3. 网络操作与诊断</h3>

<p>通过 CMD，可以执行多种网络操作和测试。用户可以查看计算机的网络配置、测试与其他计算机或服务器的连接、追踪网络路径以及查看当前网络连接的状态。这些网络命令在解决网络连接问题或配置网络设置时非常有用。</p>

<h3 id="4-批处理与自动化">4. 批处理与自动化</h3>

<p>CMD 支持批处理脚本，这使得用户可以自动执行一系列任务。批处理文件可以包含多个命令，按照顺序执行，从而自动化一些重复性的工作任务。批处理文件在系统管理和运维中经常使用，特别是需要定期执行的任务，如备份或清理。</p>

<h3 id="5-进程和服务管理">5. 进程和服务管理</h3>

<p>CMD 提供了管理系统进程和服务的功能。用户可以查看当前正在运行的进程，终止不需要的进程，启动或停止系统服务。管理进程和服务对于监控和维护计算机的正常运行至关重要，特别是在处理性能问题或特定服务故障时。</p>

<h3 id="6-用户和权限管理">6. 用户和权限管理</h3>

<p>CMD 允许用户管理系统账户和权限设置。这包括创建新用户、删除现有用户、更改用户密码以及将用户添加到系统组。这些功能在多用户系统或需要配置权限的环境中非常重要，特别是管理员在管理本地用户时。</p>

<h3 id="7-磁盘和分区管理">7. 磁盘和分区管理</h3>

<p>CMD 具有一些磁盘管理命令，可以帮助用户查看和管理磁盘上的分区、格式化驱动器或检查磁盘的健康状况。这些命令可以在处理存储设备问题或重新组织磁盘空间时发挥作用。</p>

<h3 id="8-计划任务管理">8. 计划任务管理</h3>

<p>用户可以通过 CMD 配置计划任务，自动执行某些命令或脚本。这对定期执行的任务（如备份、更新、清理等）非常有帮助，且可以精确控制任务执行的时间和频率。</p>

<h3 id="9-高级系统设置">9. 高级系统设置</h3>

<p>CMD 提供了某些高级系统设置的访问权限，包括管理启动配置、更新组策略等。系统管理员通常使用这些命令来修改系统行为或执行深度管理任务。</p>

<h3 id="10-调试与故障排查">10. 调试与故障排查</h3>

<p>CMD 还提供了许多用于调试和故障排查的工具。例如，用户可以使用它检查系统的详细状态信息、查看日志，或测试与特定服务器的连接。它是排查问题、修复故障、提高计算机稳定性的重要工具。</p>

<p>CMD 是一个功能丰富的工具，虽然它的界面基于文本，但它可以执行各种任务，尤其适用于系统管理、文件操作、批量任务自动化以及故障排查等场景。在现代 Windows 系统中，虽然 PowerShell 更加功能强大，但 CMD 依然是一个简单易用的工具，适合执行许多日常的系统操作。</p>

<h3 id="cmd-的局限性">CMD 的局限性：</h3>

<p>CMD 虽然功能实用，但与现代工具（如 PowerShell）相比，功能较为基础，缺少编程和高级管理功能。而 PowerShell 不仅能够执行 CMD 的所有功能，还提供了更强大的脚本能力和系统管理功能。</p>

<p>总结：CMD 是一个简单但功能可靠的工具，适合执行文件操作、网络诊断、批处理任务等基本管理任务，但它在现代自动化需求中已经逐渐被 PowerShell 等功能更强的工具所取代。</p>

<p>Windows批处理是使用CMD运行的一系列命令，通常以.bat或.cmd扩展名的文件保存</p>

<hr />

<h2 id="2powershell">2.Powershell</h2>

<p>PowerShell 是一种基于命令行的任务自动化和配置管理框架，由 Microsoft 开发，专为系统管理员和高级用户设计。它具有以下几个主要功能和作用：</p>

<h3 id="1-命令行接口-cli">1. 命令行接口 (CLI)</h3>

<p>PowerShell 允许你使用命令（称为 <strong>cmdlets</strong>）执行各种任务，如文件操作、网络配置、服务管理等。它比传统的 CMD 提供了更强大的功能和更复杂的脚本处理能力。</p>

<h3 id="2-脚本编写和自动化">2. 脚本编写和自动化</h3>

<p>PowerShell 支持编写脚本文件（通常扩展名为 .ps1），通过这些脚本，你可以自动化复杂的系统管理任务，比如批量创建用户、部署应用、备份数据等。系统管理员可以使用它自动化日常任务，提高工作效率。</p>

<h3 id="3-对象导向">3. 对象导向</h3>

<p>与传统命令行不同，PowerShell 的输出是对象，而不是纯文本。这意味着可以轻松处理、过滤和操作这些数据，进行更精细的管理。例如，你可以获取系统中的进程，然后筛选或终止特定的进程。</p>

<h3 id="4-跨平台支持">4. 跨平台支持</h3>

<p>虽然 PowerShell 最初是为 Windows 开发的，但现在它已经开源并跨平台支持，可以在 Linux 和 macOS 上运行。这使得它适合管理混合环境的企业或开发者。</p>

<h3 id="5-系统管理和配置">5. 系统管理和配置</h3>

<p>PowerShell 提供了对 Windows 操作系统和应用程序的深入控制，用户可以通过它管理注册表、服务、进程、事件日志、网络配置、文件系统等。管理员也可以使用 PowerShell 执行远程管理。</p>

<h3 id="6-模块扩展和社区支持">6. 模块扩展和社区支持</h3>

<p>PowerShell 支持模块化扩展，你可以安装第三方模块以获得更多功能，像 Azure PowerShell 模块用于管理 Azure 资源。PowerShell 库还提供了大量社区和官方开发的脚本和模块，进一步增强了它的功能。</p>

<h3 id="常见用法">常见用法：</h3>

<ul>
  <li><strong>启动 PowerShell</strong>：按 Win+X，选择 “Windows PowerShell” 或 “Windows PowerShell (管理员)”。</li>
  <li><strong>执行命令</strong>：你可以在 PowerShell 中输入类似 Get-Process 来获取当前运行的进程，或用  Get-Help 查询命令的帮助文档。</li>
</ul>

<p>如果你是开发人员或系统管理员，PowerShell 是非常强大且灵活的工具，适合用于自动化任务和复杂的系统管理。</p>

<hr />

<h2 id="3区别">3.区别</h2>

<p>PowerShell 和 CMD（命令提示符）是 Windows 操作系统中两种命令行接口，但它们在功能、设计和用途上有显著的区别。（不过都使用命令cls清屏）以下是一些主要差异：</p>

<h3 id="1-命令集和功能">1. 命令集和功能</h3>

<ul>
  <li><strong>CMD</strong>：CMD 是 Windows 操作系统的传统命令行界面，它使用一组相对简单的命令（如 dir, copy, del）来执行文件管理和一些基本的系统任务。CMD 的命令集较为有限，适合执行简单的任务。</li>
  <li><strong>PowerShell</strong>：PowerShell 是一个功能强大的任务自动化工具，提供了更为丰富和复杂的命令集（称为 <strong>cmdlets</strong>）。它可以管理文件系统、注册表、进程、服务、事件日志等，远超 CMD 的功能。</li>
</ul>

<h3 id="2-基于文本-vs-基于对象">2. 基于文本 vs 基于对象</h3>

<ul>
  <li><strong>CMD</strong>：CMD 的输出都是纯文本。当你运行一个命令时，它会以文本格式输出结果。这意味着进一步处理或解析数据时，需要手动使用字符串操作。</li>
  <li><strong>PowerShell</strong>：PowerShell 的输出是 <strong>对象</strong>，而不是文本。每个 cmdlet 都输出.NET 对象，可以直接对这些对象进行操作，而不需要将输出转换为文本再解析。这使得数据处理更加简洁和高效。</li>
</ul>

<h3 id="3-脚本能力">3. 脚本能力</h3>

<ul>
  <li><strong>CMD</strong>：CMD 支持简单的批处理脚本（以 .bat 或 .cmd 为后缀），这些脚本文件可以自动执行一系列命令。然而，CMD 的脚本功能较为基础，缺少现代编程语言中的结构和灵活性。</li>
  <li><strong>PowerShell</strong>：PowerShell 提供了强大的脚本编写能力，支持复杂的编程结构，如循环、条件语句、函数和错误处理。PowerShell 脚本文件以 .ps1 作为扩展名，能够编写和自动化非常复杂的任务。</li>
</ul>

<h3 id="4-跨平台支持-1">4. 跨平台支持</h3>

<ul>
  <li><strong>CMD</strong>：CMD 是 Windows 专用的命令行界面，只能在 Windows 系统中使用。</li>
  <li><strong>PowerShell</strong>：PowerShell（从 PowerShell Core 开始）是跨平台的，支持 Windows、Linux 和 macOS。这使得它在管理混合系统环境时非常有用。</li>
</ul>

<h3 id="5-模块化和扩展性">5. 模块化和扩展性</h3>

<ul>
  <li><strong>CMD</strong>：CMD 的功能较为固定，没有模块化系统，无法轻松扩展其命令集。</li>
  <li><strong>PowerShell</strong>：PowerShell 具有模块化体系结构，允许用户加载模块以扩展其功能。用户可以安装官方或社区提供的模块，来支持更多任务，如管理云资源、网络设备等。</li>
</ul>

<h3 id="6-管理员权限">6. 管理员权限</h3>

<ul>
  <li><strong>CMD</strong>：虽然 CMD 可以通过“以管理员身份运行”提升权限，但其系统管理功能相对有限。</li>
  <li><strong>PowerShell</strong>：PowerShell 提供了更深入的系统管理功能，特别是在管理员权限下，可以执行高级任务，如管理注册表、Windows服务、事件日志、进程等。</li>
</ul>

<h3 id="7-命令语法">7. 命令语法</h3>

<ul>
  <li><strong>CMD</strong>：CMD 的命令语法比较简单。例如，列出目录中的文件使用 dir。</li>
  <li><strong>PowerShell</strong>：PowerShell 的命令语法更像编程语言，通常遵循 动词-名词 格式。例如，列出目录中的文件使用 Get-ChildItem。这种命令格式使命令更加直观和一致。</li>
</ul>

<h3 id="8-集成-net">8. 集成 .NET</h3>

<ul>
  <li><strong>CMD</strong>：CMD 与 .NET 无关，无法直接利用 .NET 框架的功能。</li>
  <li><strong>PowerShell</strong>：PowerShell 完全基于 .NET 框架，允许你直接使用 .NET 类和方法，这为编写复杂脚本和自动化任务提供了强大支持。</li>
</ul>

<h3 id="9-远程管理">9. 远程管理</h3>

<ul>
  <li><strong>CMD</strong>：CMD 不具备本地化远程管理功能。</li>
  <li><strong>PowerShell</strong>：PowerShell 具有强大的远程管理能力，支持通过 PowerShell Remoting 连接到远程计算机，执行远程任务，非常适合管理员对大规模服务器或计算机网络进行管理。</li>
</ul>

<h3 id="什么时候使用-cmd-和-powershell">什么时候使用 CMD 和 PowerShell？</h3>

<ul>
  <li><strong>CMD</strong>：如果你只是需要执行一些简单的命令，如导航目录、管理文件等，CMD 足够好用，启动速度也较快。</li>
  <li><strong>PowerShell</strong>：如果你需要自动化复杂的任务，进行系统管理、跨平台开发，或者需要更强大的编程能力，那么 PowerShell 是更好的选择。</li>
</ul>

<p>总结：</p>

<ul>
  <li>CMD 适合执行简单的、快速的任务。</li>
  <li>PowerShell 更现代化、功能更强大，适合需要复杂任务自动化和系统管理的场景。</li>
</ul>

<p>你可以根据任务的复杂度选择最合适的工具！</p>

<hr />

<h2 id="4winr">4.win+R</h2>
<p>Win+R用于打开 “运行”对话框<br />
在这个<strong>对话框</strong>中，你可以输入<strong>程序名、文件名、文档名或互联网地址</strong>，<strong>快速启动</strong>相应的<strong>应用程序</strong>或打开<strong>文件</strong><br />
你可以输入<strong>cmd打开命令提示符</strong>，也可输入<strong>powershell打开终端</strong>
<img src="/images/CMD_Powershell-images/cmd_powershell.1.png" alt="" /></p>

<hr />

<h1 id="二cmd使用示例"><strong>二.CMD使用示例</strong></h1>

<hr />

<p>以我目前使用CMD的经验，主要有三个方面的用法<br />
关于这些命令和bat中的语法，可以先去看看后面<br />
下面演示都只用了最基本的命令与语法<br />
更高级的目前我还没用到</p>
<h2 id="1查询信息">1.查询信息</h2>
<p>1.可以用ipconfig查询ip地址
<img src="/images/CMD_Powershell-images/cmd_powershell.2.png" alt="" />
2.可以使用ping命令查看是否连接有网络，包括是否是科学环境
<img src="/images/CMD_Powershell-images/cmd_powershell.3.png" alt="" /></p>
<h2 id="2使用bat脚本">2.使用bat脚本</h2>
<p>再次介绍：BAT文件是批处理文件的一种，包含一系列可以在CMD中自动执行的命令，常用于自动化任务<br />
需求：1.我每次想浏览Jekyll网站时，都需要运行一个命令，以此启动一个本地的开发服务器<br />
通过运行这个bat文件，就能自动运行其中的命令
<img src="/images/CMD_Powershell-images/cmd_powershell.4.png" alt="" />
2.可以写一个py文件的启动器
<img src="/images/CMD_Powershell-images/cmd_powershell.5.png" alt="" /></p>
<h2 id="3进行文件间的操作">3.进行文件间的操作</h2>
<p>1.图中演示了我将ipconfig的输出重定向到了ip.txt
<img src="/images/CMD_Powershell-images/cmd_powershell.6.png" alt="" /></p>
<h2 id="4核心概念">4.核心概念</h2>
<p>1.重定向运算</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; (是左边出内容追加到右边)
&gt;  (是左边输出内容覆盖到右边)
&lt;  (是右边出内容追加到左边)
&lt;&lt; (记忆：箭头哪边，内容向哪边走)
</code></pre></div></div>
<p>2.管道运算</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A `|` B (A的输出作为B的输入)
</code></pre></div></div>
<p>3.命令帮助信息查看</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>命令 /?
</code></pre></div></div>
<p>使用此命令后会显示命令的用法，和参数的介绍
<img src="/images/CMD_Powershell-images/cmd_powershell.7.png" alt="" />
4.更多的操作我目前并没怎么没有用到，如果有机会用到再更新</p>

<hr />

<h1 id="三cmd命令大全"><strong>三.CMD命令大全</strong></h1>

<hr />

<p>CMD（命令提示符）有许多命令，用于文件管理、系统诊断、网络操作等。在这里，将根据日常使用的<strong>重要性和频率</strong>对 CMD 命令进行排序和介绍。</p>

<h2 id="1-文件和目录管理命令">1. 文件和目录管理命令</h2>

<p>这些是最常用的命令，用于操作文件和文件夹。</p>

<ul>
  <li><strong>dir</strong>：列出当前目录的文件和子目录。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dir
</code></pre></div>    </div>
  </li>
  <li><strong>cd</strong>：改变当前目录，进入指定路径。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd 路径
</code></pre></div>    </div>
  </li>
  <li><strong>copy</strong>：复制文件到指定位置。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>copy source.txt 路径
</code></pre></div>    </div>
  </li>
  <li><strong>move</strong>：移动文件或重命名文件。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>move source.txt 路径
</code></pre></div>    </div>
  </li>
  <li><strong>del</strong>：删除一个或多个文件。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>del file.txt
</code></pre></div>    </div>
  </li>
  <li><strong>mkdir</strong>：创建新目录。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir NewFolder
</code></pre></div>    </div>
  </li>
  <li><strong>rmdir</strong>：删除目录。</li>
</ul>

<h2 id="2-系统诊断和修复命令">2. 系统诊断和修复命令</h2>

<p>这些命令用于检查和修复系统，排查问题。</p>

<ul>
  <li><strong>sfc /scannow</strong>：扫描并修复系统文件的完整性。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sfc /scannow
</code></pre></div>    </div>
  </li>
  <li><strong>chkdsk</strong>：检查磁盘并修复文件系统错误。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chkdsk C: /f
</code></pre></div>    </div>
  </li>
  <li><strong>tasklist</strong>：显示当前运行的所有进程。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tasklist
</code></pre></div>    </div>
  </li>
  <li><strong>taskkill</strong>：终止指定进程。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>taskkill /IM notepad.exe /F
</code></pre></div>    </div>
  </li>
  <li><strong>systeminfo</strong>：显示系统的详细配置信息。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systeminfo
</code></pre></div>    </div>
  </li>
  <li><strong>ipconfig</strong>：显示网络接口的配置信息，如 IP 地址、子网掩码等。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ipconfig
</code></pre></div>    </div>
  </li>
  <li><strong>ping</strong>：测试与远程服务器的网络连接。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping google.com
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="3-网络命令">3. 网络命令</h2>

<p>这些命令用于诊断网络连接和配置网络设置。</p>

<ul>
  <li><strong>netstat</strong>：显示当前的网络连接、端口和协议。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netstat -an
</code></pre></div>    </div>
  </li>
  <li><strong>tracert</strong>：显示到目标主机的路由路径。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tracert google.com
</code></pre></div>    </div>
  </li>
  <li><strong>nslookup</strong>：查询域名对应的 IP 地址或检查 DNS 解析问题。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nslookup google.com
</code></pre></div>    </div>
  </li>
  <li><strong>net use</strong>：映射或断开网络驱动器。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net use Z: \\server\sharedfolder
</code></pre></div>    </div>
  </li>
  <li><strong>netsh</strong>：管理网络配置（如 IP 设置、防火墙规则）。</li>
</ul>

<h2 id="4-批处理命令">4. 批处理命令</h2>

<p>这些命令经常在批处理脚本（.bat 文件）中使用，以自动化重复任务。</p>

<ul>
  <li><strong>echo</strong>：显示消息或启用/禁用命令回显。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo Hello, World!
</code></pre></div>    </div>
  </li>
  <li><strong>set</strong>：设置或显示环境变量。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set PATH
</code></pre></div>    </div>
  </li>
  <li><strong>pause</strong>：在批处理文件中暂停命令执行，等待用户按键。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pause
</code></pre></div>    </div>
  </li>
  <li><strong>if</strong>：条件语句，判断是否执行某些命令。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if exist file.txt echo File exists
</code></pre></div>    </div>
  </li>
  <li><strong>for</strong>：循环处理文件或命令。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for %%f in (*.txt) do echo %%f
</code></pre></div>    </div>
  </li>
  <li><strong>goto</strong>：跳转到脚本中的某个标签，通常和 if 配合使用。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>goto :start
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="5-用户和权限管理">5. 用户和权限管理</h2>

<p>这些命令用于管理用户账户和权限。</p>

<ul>
  <li><strong>net user</strong>：管理用户账户（创建、删除、修改用户）。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net user username password /add
</code></pre></div>    </div>
  </li>
  <li><strong>net localgroup</strong>：管理本地用户组。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net localgroup administrators username /add
</code></pre></div>    </div>
  </li>
  <li><strong>runas</strong>：以其他用户身份执行命令。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>runas /user:Administrator cmd
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="6-磁盘管理命令">6. 磁盘管理命令</h2>

<p>这些命令用于管理硬盘驱动器和分区。</p>

<ul>
  <li><strong>diskpart</strong>：管理磁盘分区（创建、删除、调整大小）。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diskpart
</code></pre></div>    </div>
  </li>
  <li><strong>format</strong>：格式化磁盘或分区。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>format D:
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="7-进程和服务管理">7. 进程和服务管理</h2>

<p>这些命令用于查看、终止进程或管理系统服务。</p>

<ul>
  <li><strong>sc</strong>：管理系统服务（启动、停止、查询服务状态）。</li>
</ul>

<p><strong>sc query wuauserv</strong></p>

<ul>
  <li><strong>shutdown</strong>：关闭或重启计算机。</li>
</ul>

<p><strong>shutdown /s /t 0  # 立即关机 shutdown /r /t 0  # 立即重启</strong></p>

<h2 id="8-时间与计划任务管理">8. 时间与计划任务管理</h2>

<p>这些命令用于与系统时间、计划任务有关的操作。</p>

<ul>
  <li><strong>time</strong>：显示或设置系统时间。</li>
</ul>

<p><strong>time</strong></p>

<ul>
  <li><strong>schtasks</strong>：管理计划任务，自动执行任务。</li>
</ul>

<p><strong>schtasks /create /sc daily /tn “Backup” /tr “backup.bat” /st 23:00</strong></p>

<h2 id="9-高级管理命令">9. 高级管理命令</h2>

<ul>
  <li><strong>bcdedit</strong>：管理启动配置数据（修改启动选项）。</li>
</ul>

<p><strong>bcdedit /set {bootmgr} timeout 30</strong></p>

<ul>
  <li><strong>gpupdate</strong>：更新组策略设置。</li>
</ul>

<p><strong>gpupdate /force</strong></p>

<ul>
  <li><strong>wmic</strong>：Windows Management Instrumentation Command，用于查询和管理操作系统相关信息。</li>
</ul>

<p><strong>wmic process get name</strong></p>

<h2 id="10总结">10.总结：</h2>

<ol>
  <li><strong>文件和目录管理</strong>：如 dir、cd、copy、del 等，是最基础的操作。</li>
  <li><strong>系统诊断和修复</strong>：如 sfc、chkdsk、ipconfig 等，用于维护和修复系统。</li>
  <li><strong>网络操作</strong>：如 ping、netstat、tracert，对于网络调试和故障排查非常有用。</li>
  <li><strong>批处理和自动化</strong>：如 echo、for、if，用于编写自动化脚本。</li>
  <li><strong>用户和权限管理</strong>：如 net user、runas，用于管理账户和权限。</li>
</ol>

<hr />

<h1 id="四bat文件语法"><strong>四.bat文件语法</strong></h1>

<hr />

<p>批处理文件（BAT 文件）的语法基于 Windows 的命令行工具 CMD。BAT 文件用于自动执行一系列命令，通常以 .bat 或 .cmd 为扩展名。编写 BAT 文件时，使用的是 CMD 中的命令及其特定的控制结构来控制脚本的流程。</p>

<h2 id="1基本语法结构">1.基本语法结构</h2>

<p>BAT 文件的每一行通常包含一个命令，并且按照自上而下的顺序执行。常用的命令包括文件操作、系统管理、进程控制等。</p>

<ul>
  <li><strong>注释：</strong> 使用 REM 或 :: 来注释代码，注释行不会执行。</li>
</ul>

<p><strong>REM This is a comment
::  This is also a comment</strong></p>

<ul>
  <li><strong>显示消息：</strong> 使用 echo 打印消息或控制命令回显。</li>
</ul>

<p><strong>echo Hello, World!</strong></p>

<ul>
  <li><strong>变量：</strong> 使用 set 定义和访问变量。变量名用 % 包围来引用。</li>
</ul>

<p><strong>set myVar=123 echo %myVar%</strong></p>

<ul>
  <li><strong>禁用回显：</strong> 在脚本开头使用 @echo off 来关闭命令回显，使得脚本只输出你想要的内容，而不是每个命令的执行行。</li>
</ul>

<p><strong>@echo off</strong></p>

<h2 id="2流程控制语法">2.流程控制语法</h2>

<p>BAT 文件支持基本的流程控制语法，如条件语句、循环等。</p>

<h3 id="条件语句-if">条件语句 (if)</h3>

<ul>
  <li>
    <p>if用于执行条件判断。可以根据文件是否存在、字符串比较或者数值比较来决定代码的执行。</p>
  </li>
  <li>
    <p>存在判断：</p>
  </li>
</ul>

<p><strong>if exist file.txt echo File exists</strong></p>

<ul>
  <li>字符串比较：</li>
</ul>

<p><strong>if “%myVar%”==”123” echo Variable is 123</strong></p>

<ul>
  <li>数值比较：</li>
</ul>

<p><strong>if %myVar% GEQ 100 echo Value is greater than or equal to 100</strong></p>

<h3 id="循环语句-for">循环语句 (for)</h3>

<ul>
  <li>
    <p>for 循环用于遍历文件、目录或变量集合。</p>
  </li>
  <li>
    <p>遍历文件：</p>
  </li>
</ul>

<p><strong>for %%f in (*.txt) do echo %%f</strong></p>

<ul>
  <li>遍历数字范围：</li>
</ul>

<p><strong>for /L %%i in (1, 1, 10) do echo %%i</strong></p>

<h2 id="3输入输出">3.输入输出</h2>

<ul>
  <li><strong>用户输入：</strong> 使用 set /p 提示用户输入，并将输入存储到变量中。</li>
</ul>

<p><strong>set /p userInput=Enter your name:  echo Hello, %userInput%</strong></p>

<ul>
  <li>
    <p><strong>重定向输出：</strong> 使用 &gt;、» 将命令的输出重定向到文件。</p>
  </li>
  <li>
    <p>将输出重定向到文件并覆盖该文件的内容。</p>
  </li>
</ul>

<p><strong>echo This is a test &gt; output.txt</strong></p>

<ul>
  <li>将输出附加到文件末尾。</li>
</ul>

<p><strong>echo Another line » output.txt</strong></p>

<h2 id="4子程序与跳转">4.子程序与跳转</h2>

<ul>
  <li><strong>标签 (:)</strong> 和 <strong>跳转 (goto)</strong>：可以通过标签创建脚本的不同部分，并使用 goto 跳转到某个标签。</li>
</ul>

<p><strong>goto :start  :start echo This is the start</strong></p>

<ul>
  <li><strong>call 语句：</strong> 用于调用另一个批处理文件或调用当前脚本的子例程。</li>
</ul>

<p><strong>call otherScript.bat</strong></p>

<h2 id="5错误处理">5.错误处理</h2>

<ul>
  <li><strong>errorlevel</strong>：每个命令执行后会设置一个返回码，称为 errorlevel。可以通过检查 errorlevel 来执行错误处理。</li>
</ul>

<p><strong>if %errorlevel% neq 0 echo An error occurred</strong></p>

<h2 id="6批处理文件常见参数">6.批处理文件常见参数</h2>

<ul>
  <li><strong>%1 到 %9</strong>：批处理文件可以接收命令行参数，使用 %1 访问第一个参数，%2 访问第二个参数，依次类推。</li>
</ul>

<p><strong>echo First parameter is %1</strong></p>

<ul>
  <li><strong>shift</strong>：用于左移参数，%2 变为 %1，%3 变为 %2。</li>
</ul>

<p><strong>shift</strong></p>

<h2 id="7批处理文件常用命令">7.批处理文件常用命令</h2>

<ul>
  <li><strong>pause</strong>：暂停脚本执行，等待用户按任意键继续。</li>
</ul>

<p><strong>pause</strong></p>

<ul>
  <li><strong>exit</strong>：终止批处理文件的执行，并可选择返回错误码。</li>
</ul>

<p><strong>exit</strong></p>

<h2 id="8高级功能">8.高级功能</h2>

<ul>
  <li><strong>setlocal 和 endlocal</strong>：用于限制变量的作用范围，使得在 setlocal 和 endlocal 之间定义的变量在该范围外无效。</li>
</ul>

<p><strong>setlocal set myVar=123 endlocal</strong></p>

<ul>
  <li><strong>环境变量操作</strong>：批处理文件可以访问系统环境变量，如 PATH、TEMP 等，并进行修改或使用。</li>
</ul>

<h2 id="9批处理文件的应用场景">9.批处理文件的应用场景</h2>

<ul>
  <li><strong>自动化任务</strong>：定期执行备份、清理日志文件或其他维护任务。</li>
  <li><strong>批量操作</strong>：批处理文件可以批量处理大量文件，如重命名、复制或移动。</li>
  <li><strong>系统配置和设置</strong>：设置系统变量、安装软件或配置网络等。</li>
</ul>

<h2 id="10总结-1">10.总结：</h2>

<p>BAT 文件语法虽然简单，但在系统自动化和维护中非常有用。它结合了条件语句、循环、变量操作等功能，可以编写复杂的脚本来处理各种任务。如果需要实现更复杂的功能或与外部工具交互，批处理脚本也可以作为基础，通过调用其他程序实现更强大的自动化解决方案。</p>

<hr />

<h1 id="五powershell命令大全"><strong>五.Powershell命令大全</strong></h1>

<hr />

<p>PowerShell 是一个功能强大的命令行界面和脚本语言，支持多种命令（cmdlets），这些命令用于系统管理、文件操作、网络管理等。以下是按重要性排序的一些常用 PowerShell 命令及其简要说明：</p>

<h2 id="1基本命令">1.基本命令</h2>

<ul>
  <li><strong>Get-Command</strong>：获取可用的所有命令及其详细信息。</li>
  <li><strong>Get-Help</strong>：显示有关 PowerShell 命令和语法的帮助信息。</li>
  <li><strong>Get-Process</strong>：获取当前正在运行的进程列表。</li>
  <li><strong>Get-Service</strong>：获取当前计算机上所有服务的状态。</li>
</ul>

<h2 id="2文件和目录管理">2.文件和目录管理</h2>

<ul>
  <li><strong>Get-ChildItem</strong>：列出目录中的文件和子目录（相当于 CMD 中的 dir）。</li>
  <li><strong>Set-Location</strong>：改变当前工作目录（相当于 CMD 中的 cd）。</li>
  <li><strong>Copy-Item</strong>：复制文件或目录。</li>
  <li><strong>Move-Item</strong>：移动文件或目录。</li>
  <li><strong>Remove-Item</strong>：删除文件或目录。</li>
  <li><strong>New-Item</strong>：创建新文件或目录。</li>
</ul>

<h2 id="3系统管理">3.系统管理</h2>

<ul>
  <li><strong>Get-EventLog</strong>：获取系统事件日志。</li>
  <li><strong>Clear-Host</strong>：清除 PowerShell 窗口中的所有内容。</li>
  <li><strong>Get-ExecutionPolicy</strong>：查看当前的脚本执行策略。</li>
  <li><strong>Set-ExecutionPolicy</strong>：设置 PowerShell 脚本的执行策略。</li>
</ul>

<h2 id="4网络管理">4.网络管理</h2>

<ul>
  <li><strong>Test-Connection</strong>：测试与远程主机的网络连接（相当于 ping 命令）。</li>
  <li><strong>Get-NetAdapter</strong>：获取网络适配器的详细信息。</li>
  <li><strong>Get-NetIPAddress</strong>：获取 IP 地址配置。</li>
  <li><strong>New-NetFirewallRule</strong>：创建新的防火墙规则。</li>
</ul>

<h2 id="5用户和权限管理">5.用户和权限管理</h2>

<ul>
  <li><strong>Get-LocalUser</strong>：列出本地用户账户。</li>
  <li><strong>New-LocalUser</strong>：创建新的本地用户账户。</li>
  <li><strong>Remove-LocalUser</strong>：删除本地用户账户。</li>
  <li><strong>Add-LocalGroupMember</strong>：将用户添加到本地组中。</li>
</ul>

<h2 id="6服务和进程管理">6.服务和进程管理</h2>

<ul>
  <li><strong>Start-Service</strong>：启动指定服务。</li>
  <li><strong>Stop-Service</strong>：停止指定服务。</li>
  <li><strong>Restart-Service</strong>：重启指定服务。</li>
  <li><strong>Stop-Process</strong>：终止指定进程。</li>
</ul>

<h2 id="7脚本和自动化">7.脚本和自动化</h2>

<ul>
  <li><strong>Invoke-Command</strong>：在本地或远程计算机上执行命令或脚本块。</li>
  <li><strong>Start-Job</strong>：启动后台作业。</li>
  <li><strong>Get-Job</strong>：获取后台作业的信息。</li>
  <li><strong>Receive-Job</strong>：接收后台作业的输出。</li>
</ul>

<h2 id="8对象和管道处理">8.对象和管道处理</h2>

<ul>
  <li><strong>Select-Object</strong>：选择对象的特定属性。</li>
  <li><strong>Where-Object</strong>：过滤对象集合，返回满足条件的对象。</li>
  <li><strong>Sort-Object</strong>：对对象集合进行排序。</li>
</ul>

<h2 id="9注册表操作">9.注册表操作</h2>

<ul>
  <li><strong>Get-Item</strong>：获取指定路径的注册表项。</li>
  <li><strong>Set-Item</strong>：设置注册表项的值。</li>
  <li><strong>Remove-Item</strong>：删除注册表项或值。</li>
</ul>

<h2 id="10获取系统信息">10.获取系统信息</h2>

<ul>
  <li><strong>Get-ComputerInfo</strong>：获取计算机的系统信息。</li>
  <li><strong>Get-WmiObject</strong>：访问 Windows 管理工具（WMI）以获取系统的详细信息。</li>
</ul>

<h2 id="11环境变量">11.环境变量</h2>

<ul>
  <li><strong>Get-ChildItem Env:</strong>：列出所有环境变量。</li>
  <li><strong>Set-Item Env:VariableName</strong>：设置或修改环境变量。</li>
</ul>

<h2 id="12其他常用命令">12.其他常用命令</h2>

<ul>
  <li><strong>Write-Host</strong>：向控制台输出信息。</li>
  <li><strong>Read-Host</strong>：从用户获取输入。</li>
  <li><strong>Exit</strong>：退出 PowerShell 会话。</li>
</ul>

<h2 id="13总结">13.总结</h2>

<p>以上列举的是一些重要且常用的 PowerShell 命令，按照其在日常使用中的重要性进行排序。这些命令可以帮助用户完成许多任务，从基础的文件管理到复杂的系统管理和自动化操作。PowerShell 的强大之处在于它的命令组合能力和对象处理能力，用户可以通过管道将一个命令的输出直接传递给另一个命令，从而实现更复杂的操作。</p>

<hr />

<h1 id="六ps1文件语法"><strong>六.ps1文件语法</strong></h1>

<hr />

<p>PSL 文件通常是指 PowerShell 脚本文件，其扩展名为 .ps1。PowerShell 脚本使用 PowerShell 语言编写，支持丰富的语法和功能。以下是对 PowerShell 脚本（PSL 文件）语法的详细介绍：</p>

<h2 id="1基本结构">1.<strong>基本结构</strong></h2>

<ul>
  <li>
    <p><strong>脚本注释</strong>：</p>
  </li>
  <li>
    <p>单行注释使用井符号</p>
  </li>
</ul>

<p><strong># This is a comment</strong></p>

<ul>
  <li>多行注释使用 &lt;# 和 #&gt;：</li>
</ul>

<p><strong>&lt;# This is a multi-line comment It can span multiple lines #&gt;</strong></p>

<h2 id="2变量">2.变量</h2>

<ul>
  <li><strong>定义变量</strong>：使用 $ 符号定义变量，等号（=）用于赋值。</li>
</ul>

<p><strong>$myVariable = “Hello, World!”</strong></p>

<ul>
  <li><strong>使用变量</strong>：在字符串中使用变量时，可用双引号引用。</li>
</ul>

<p><strong>Write-Host “The message is: $myVariable”</strong></p>

<h2 id="3数据类型">3.数据类型</h2>

<p><strong>$stringVar = “This is a string” $intVar = 42 $arrayVar = @(1, 2, 3, 4) $hashTable = @{“key1” = “value1”; “key2” = “value2”}</strong></p>

<h2 id="4流程控制">4.流程控制</h2>

<ul>
  <li><strong>条件语句</strong>：</li>
</ul>

<p><strong>if ($condition) {     # Do something } elseif ($otherCondition) {     # Do something else } else {     # Do another thing }</strong></p>

<ul>
  <li>
    <p><strong>循环语句</strong>:</p>
  </li>
  <li>
    <p>for 循环：</p>
  </li>
</ul>

<p><strong>for ($i = 0; $i -lt 10; $i++) {     Write-Host $i }</strong></p>

<ul>
  <li>foreach 循环：</li>
</ul>

<p><strong>foreach ($item in $arrayVar) {     Write-Host $item }</strong></p>

<ul>
  <li>while 循环：</li>
</ul>

<p><strong>$counter = 0 while ($counter -lt 5) {     Write-Host $counter     $counter++ }</strong></p>

<h2 id="5函数">5.函数</h2>

<ul>
  <li><strong>定义函数</strong>：使用 function 关键字定义一个函数。</li>
</ul>

<p><strong>function MyFunction {     param ($param1, $param2)     Write-Host “Parameter 1 is $param1”     Write-Host “Parameter 2 is $param2” }  MyFunction “Value1” “Value2”</strong></p>

<h2 id="6错误处理">6.错误处理</h2>

<ul>
  <li><strong>try、catch 和 finally</strong>：</li>
</ul>

<p><strong>try {     # Code that might throw an exception } catch {     Write-Host “An error occurred: $_” } finally {     # Code that runs regardless of success or failure }</strong></p>

<h2 id="7模块和导入">7.模块和导入</h2>

<ul>
  <li><strong>导入模块</strong>：使用 Import-Module 导入 PowerShell 模块。</li>
</ul>

<p><strong>Import-Module ModuleName</strong></p>

<h2 id="8输入和输出">8.输入和输出</h2>

<ul>
  <li><strong>输出到控制台</strong></li>
</ul>

<p><strong>Write-Host “This is output to the console”</strong></p>

<ul>
  <li><strong>获取用户输入</strong></li>
</ul>

<p><strong>$userInput = Read-Host “Enter your name” Write-Host “Hello, $userInput!”</strong></p>

<h2 id="9管道">9.管道</h2>

<ul>
  <li>PowerShell支持管道（<code class="language-plaintext highlighter-rouge">|</code>）将一个命令的输出直接传递给另一个命令。</li>
</ul>

<p><strong>Get-Process <code class="language-plaintext highlighter-rouge">|</code> Where-Object { $_.CPU -gt 100 }</strong></p>

<h2 id="10文件操作">10.文件操作</h2>

<ul>
  <li><strong>读取文件</strong></li>
</ul>

<p><strong>$content = Get-Content “C:\path\to\file.txt”</strong></p>

<ul>
  <li><strong>写入文件</strong></li>
</ul>

<p><strong>“Hello, World!” <code class="language-plaintext highlighter-rouge">|</code> Out-File “C:\path\to\output.txt”</strong></p>

<h2 id="11-对象和属性">11 对象和属性</h2>

<ul>
  <li>PowerShell 的强大之处在于对对象的处理，可以访问对象的属性和方法。</li>
</ul>

<p><strong>$process = Get-Process <code class="language-plaintext highlighter-rouge">|</code> Where-Object { $_.Name -eq “powershell” } Write-Host “Process ID: $($process.Id)”</strong></p>

<h2 id="12自动化和计划任务">12.自动化和计划任务</h2>

<ul>
  <li><strong>创建计划任务</strong>：</li>
</ul>

<p><strong>$action = New-ScheduledTaskAction -Execute “PowerShell.exe” -Argument “C:\path\to\script.ps1” $trigger = New-ScheduledTaskTrigger -At 7am -Daily Register-ScheduledTask -Action $action -Trigger $trigger -TaskName “MyTask”</strong></p>

<h2 id="13模块的创建与使用">13.模块的创建与使用</h2>

<ul>
  <li><strong>创建模块</strong>：将相关的函数和命令放入一个 .psm1 文件中。</li>
  <li><strong>使用模块</strong>：导入模块并调用模块中的函数。</li>
</ul>

<h2 id="14管道和流">14.管道和流</h2>

<ul>
  <li>管道允许多个命令连接在一起，可以有效处理数据流。</li>
  <li><strong>示例</strong>：</li>
</ul>

<p><strong>Get-Service <code class="language-plaintext highlighter-rouge">|</code> Where-Object { $_.Status -eq ‘Running’ }</strong></p>

<h2 id="15自动完成和参数">15.自动完成和参数</h2>

<ul>
  <li>PowerShell 支持命令的自动完成功能，并可以使用参数简化命令的输入。</li>
</ul>

<h2 id="16总结">16.总结</h2>

<p>PowerShell 脚本（PSL 文件）语法强大且灵活，支持多种编程结构，使其能够用于系统管理、自动化任务、文件处理等多种场景。通过合理使用这些语法结构，用户可以编写高效、可维护的脚本来完成复杂的操作。</p>

<hr />

<h1 id="七powershell使用示例"><strong>七.Powershell使用示例</strong></h1>

<hr />

<h2 id="1配置环境">1.配置环境</h2>

<h3 id="11执行策略介绍">1.1.执行策略介绍</h3>

<p>执行策略（Execution Policy）是 PowerShell 中的一个安全功能，用于控制脚本和配置文件的运行权限。它通过限制脚本的执行来保护系统不受潜在恶意代码的影响。主要的执行策略有：</p>

<ol>
  <li><strong>Restricted</strong>：默认策略，不允许任何脚本运行。</li>
  <li><strong>AllSigned</strong>：只允许运行由受信任的发布者签名的脚本。</li>
  <li><strong>RemoteSigned</strong>：本地脚本可以运行，远程脚本必须签名。</li>
  <li><strong>Unrestricted</strong>：允许所有脚本运行，但在执行远程脚本时会有警告。</li>
  <li><strong>Bypass</strong>：不进行任何检查，允许所有脚本运行。</li>
  <li><strong>Undefined</strong>：没有设置策略，PowerShell 会回到默认策略。</li>
</ol>

<p>可以通过 PowerShell 中的 Get-ExecutionPolicy 命令查看当前策略，通过 Set-ExecutionPolicy 命令更改策略。修改执行策略时需要考虑安全性和系统的需求。</p>

<h3 id="12运行命令检查执行策略">1.2.运行命令检查执行策略</h3>

<p>我这已经提前更改过了，初始是限制的</p>

<p><strong>Get-ExecutionPolicy -List</strong></p>

<p><img src="/images/CMD_Powershell-images/cmd_powershell.8.png" alt="" /></p>

<h3 id="13更改执行策略">1.3.更改执行策略</h3>
<p>更改CurrentUser 的策略为RemoteSigned</p>

<p><strong>Set-ExecutionPolicy RemoteSigned -Scope CurrentUser</strong></p>

<h2 id="2批量重命名文件名">2.批量重命名文件名</h2>

<h3 id="21需求">2.1.需求</h3>

<p>我需要对一个目录下的所有png图片按照时间顺序进行指定格式的重命名</p>

<h3 id="22编写代码">2.2.编写代码</h3>

<p>文件后缀是ps1,不要写成psl了，数字1与字母l很像
<img src="/images/CMD_Powershell-images/cmd_powershell.9.png" alt="" /></p>

<h3 id="23在终端中运行">2.3.在终端中运行</h3>

<p>需处理的文件
<img src="/images/CMD_Powershell-images/cmd_powershell.10.png" alt="" />
运行命令
<img src="/images/CMD_Powershell-images/cmd_powershell.11.png" alt="" />
完成处理
<img src="/images/CMD_Powershell-images/cmd_powershell.12.png" alt="" /></p>

<h3 id="24python实现相同操作">2.4.python实现相同操作</h3>

<p><img src="/images/CMD_Powershell-images/cmd_powershell.13.png" alt="" />
<img src="/images/CMD_Powershell-images/cmd_powershell.14.png" alt="" /></p>

<h2 id="3注意事项">3.注意事项</h2>

<h3 id="1文件名命名最好不要用中文和空格">1.文件名命名最好不要用中文和空格</h3>

<p>在<strong>文件路径</strong>中使用<strong>中文字符和空格</strong>可能导致路径<strong>解析错误</strong>，特别是在某些编程语言和工具中。这可能导致文件<strong>无法找到或命令无法执行</strong>，增加了开发和调试的复杂性。因此，使用英文字符和下划线等替代方式更为稳妥</p>

<hr />

<h1 id="八完结"><strong>八.完结</strong></h1>

<hr />

<p><strong>关于CMD与Powershell，我目前并没有使用到过多的功能，相比于ps1脚本，更多人应该更喜欢py脚本，本文也仅简要介绍ps1与bat脚本，更多的功能请自行探索</strong></p>]]></content><author><name>Your Sidebar Name</name><email>none@example.org</email></author><category term="技术，编程" /><category term="CMD" /><category term="Powershell" /><summary type="html"><![CDATA[CMD（命令提示符）是 Windows 操作系统中的基本命令行界面，允许用户执行文件管理和系统操作，而 PowerShell 则是一个更为强大的跨平台命令行和脚本语言，支持对象导向处理和复杂的系统自动化，广泛用于系统管理任务]]></summary></entry><entry><title type="html">Git 使用教程</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/19/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" rel="alternate" type="text/html" title="Git 使用教程" /><published>2024-10-19T00:00:00+08:00</published><updated>2024-10-19T00:00:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/19/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/19/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"><![CDATA[<h1 id="简介"><strong>简介</strong></h1>
<p>本文主要内容：<br />
1.介绍Git的概念<br />
2.详细演示Git环境的配置 <br />
3.列出Git的常用命令<br />
4.在一定程度上演示如何在VS Code上使用Git管理GitHub上的仓库<br />
Git官网：<a href="https://git-scm.com/">https://git-scm.com/</a><br />
GitHub官网：<a href="https://github.com/">https://github.com/</a><br />
VS Code官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>

<hr />

<h1 id="一git的概述"><strong>一.Git的概述</strong></h1>
<hr />
<p>Git 是一个<strong>分布式版本控制</strong>系统，用于管理项目中的代码变化，特别适合多人协作开发。它的主要功能包括：</p>

<ol>
  <li>
    <p><strong>版本控制</strong>：Git 可以记录代码的每一次变动，使你可以查看、比较并恢复到之前的任意版本。</p>
  </li>
  <li>
    <p><strong>分支和合并</strong>：Git 允许创建分支以开发不同的功能或修复问题。分支上的改动可以独立进行，最后再将它们合并到主分支。</p>
  </li>
  <li>
    <p><strong>分布式</strong>：与传统的版本控制系统不同，Git 是分布式的。每个开发者都有完整的项目历史，可以离线进行代码管理和提交。</p>
  </li>
  <li>
    <p><strong>协作开发</strong>：Git 很适合团队合作，支持多人并行开发。当开发者提交代码后，可以通过 pull request 合并到主项目中，确保代码的连续性和质量。</p>
  </li>
</ol>

<h2 id="1git的核心概念">1.Git的核心概念</h2>
<ul>
  <li><strong>Repository (仓库)</strong>：存储项目的文件和其历史记录的地方。可以是本地仓库或远程仓库（如 GitHub 上的仓库）。</li>
  <li><strong>Commit (提交)</strong>：一次代码变动的快照，包括改动的具体内容和提交说明。</li>
  <li><strong>Branch (分支)</strong>：并行开发的通道。每个分支都是代码历史的独立线条，可以独立于其他分支工作。</li>
  <li><strong>Merge (合并)</strong>：将一个分支上的改动合并到另一个分支。</li>
  <li><strong>Pull (拉取)</strong>：从远程仓库获取最新的更改并合并到本地分支。</li>
  <li><strong>Push (推送)</strong>：将本地仓库的更改上传到远程仓库。</li>
</ul>

<h2 id="2git的常用命令">2.Git的常用命令</h2>
<ul>
  <li>git init：初始化一个新的 Git 仓库。</li>
  <li>git clone：克隆远程仓库到本地。</li>
  <li>git status：查看当前工作区的状态（有哪些改动）。</li>
  <li>git add：将改动添加到暂存区。</li>
  <li>git commit -m “消息”：提交暂存区的改动，并添加描述信息。</li>
  <li>git push：将本地提交推送到远程仓库。</li>
  <li>git pull：从远程仓库拉取更新并合并到本地分支。</li>
  <li>git branch：查看所有分支，或创建、删除分支。</li>
  <li>git checkout：切换到另一个分支。<br />
通过 Git，开发者能够更好地管理代码版本，尤其是在复杂项目中，它可以极大地提高效率并减少冲突。</li>
</ul>

<hr />

<h1 id="二配置git环境"><strong>二.配置Git环境</strong></h1>
<hr />
<h2 id="1下载git">1.下载Git</h2>
<p>网址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a>
<img src="/images/git-images/git.1.png" alt="" />
<img src="/images/git-images/git.2.png" alt="" /></p>

<hr />

<h2 id="2安装git">2.安装Git</h2>
<p>安装过程有<strong>许多</strong>步骤，<strong>一般来说</strong>全部默认即可，一路<strong>next</strong>直到<strong>install</strong>结束<br />
但是可以选择一下使用哪个<strong>编辑器</strong><br />
下面的图是对安装过程各个步骤的解释<br />
1.可自选<strong>路径</strong>
<img src="/images/git-images/git.3.png" alt="" />
2.图中标注了选项的<strong>含义</strong>
<img src="/images/git-images/git.4.png" alt="" />
3.这个页面是询问是否希望在Windows的开始菜单，创建一个名为“Git”的文件夹，存放Git的快捷方式
<img src="/images/git-images/git.5.png" alt="" /></p>

<h3 id="21选择编辑器">2.1.选择编辑器</h3>
<p><strong>4.这里需要选择一个默认编辑器<br />
注意：不是给你下载选的编辑器，只是告诉Git需要文本编辑时默认打开哪个<br />
不论你选择vim还是VS Code作为默认编辑器，都需要自己下载<br />
一般来说Git会内置一个vim编辑器，不过功能很少<br />
我已经下载了VS Code编辑器，之后的演示基本都在VS Code上进行<br />
VS Code编辑器使用Git主要用VS Code打开文件夹，进入资源管理器操作，当然也可终端使用命令</strong><br />
<del>至于Vim编辑器，我没用过并不怎么清楚</del></p>

<h3 id="22vim编辑器和vs-code编辑器对比">2.2.Vim编辑器和VS Code编辑器对比</h3>
<h4 id="1-vim-编辑器">1. Vim 编辑器：</h4>
<ul>
  <li>
    <p><strong>特点</strong>：</p>

    <ul>
      <li><strong>轻量级</strong>：Vim 是一个非常轻量级的文本编辑器，速度快且占用资源少。</li>
      <li><strong>命令行界面</strong>：运行在终端中，非常适合那些喜欢使用键盘操作的人。</li>
      <li><strong>键盘驱动</strong>：Vim 的操作主要依赖于快捷键，不使用鼠标。这使得它在熟练使用后非常高效，但初学者需要一定的学习成本。</li>
      <li><strong>跨平台</strong>：可以在任何系统上使用，包括 Windows、Linux、macOS。</li>
    </ul>
  </li>
  <li>
    <p><strong>适用人群</strong>：</p>

    <ul>
      <li>熟悉命令行操作，喜欢使用键盘而不依赖鼠标的用户。</li>
      <li>需要快速轻量的编辑器来编辑简单的文件（如 Git 提交消息）。</li>
    </ul>
  </li>
  <li>
    <p><strong>适合场景</strong>：</p>

    <ul>
      <li>如果你在终端环境下工作较多，并且已经习惯或愿意学习 Vim 的快捷键，Vim 是一个非常高效的工具。</li>
      <li>你只需要一个简洁、快速的编辑器来修改 Git 的提交信息或进行简单的代码编辑。</li>
    </ul>
  </li>
</ul>

<h4 id="2vs-code编辑器">2.VS Code编辑器：</h4>
<ul>
  <li>
    <p><strong>特点</strong>：</p>

    <ul>
      <li><strong>图形界面</strong>：VS Code 是一个现代化的图形化编辑器，提供了丰富的界面和强大的功能。</li>
      <li><strong>插件丰富</strong>：VS Code 有大量的插件可供安装，支持多种编程语言、Git 集成、调试工具等。</li>
      <li><strong>直观易用</strong>：对于初学者和熟悉图形界面操作的用户，VS Code 更加直观，使用起来更方便。</li>
      <li><strong>集成 Git</strong>：VS Code 有内置的 Git 支持，提供了友好的界面来处理 Git 操作（如提交、查看历史、冲突解决等）。</li>
    </ul>
  </li>
  <li>
    <p><strong>适用人群</strong>：</p>

    <ul>
      <li>喜欢使用功能丰富的 IDE 或 GUI 编辑器的用户。</li>
      <li>需要更强大的代码编辑、调试和扩展功能。</li>
      <li>喜欢鼠标操作或者还不太熟悉命令行操作的用户。</li>
    </ul>
  </li>
  <li>
    <p><strong>适合场景</strong>：</p>

    <ul>
      <li>你更注重编程效率，喜欢通过扩展插件和图形化界面处理 Git。</li>
      <li>你需要更多的工具支持，如代码自动补全、调试、扩展库等功能。</li>
    </ul>
  </li>
</ul>

<h4 id="3编辑器总结"><strong>3.编辑器总结</strong></h4>
<ul>
  <li>如果你<strong>熟悉命令行</strong>，需要一个轻量级、高效的编辑器，<strong>Vim</strong> 是不错的选择。</li>
  <li>如果你更喜欢<strong>图形化界面</strong>，希望使用一个功能丰富、易于扩展的编辑器，<strong>VS Code</strong> 可能更适合你，尤其是如果你在 Git 操作中经常需要进行代码修改或调试。</li>
</ul>

<p>这是默认的Vim编辑器
<img src="/images/git-images/git.6.png" alt="" />
<strong>我选择使用VS Code编辑器，根据你的需求选择</strong>
<img src="/images/git-images/git.7.png" alt="" />
5.
<img src="/images/git-images/git.8.png" alt="" />
6.
<img src="/images/git-images/git.9.png" alt="" /></p>

<h3 id="23ssh介绍">2.3.SSH介绍</h3>
<p>SSH（<strong>Secure Shell</strong>）是一种用于通过不安全的网络安全登录到远程计算机的协议。它主要用于在两个系统之间建立加密的连接，以便安全地执行命令行、传输文件和进行系统管理等操作。SSH 通过加密技术，保证了传输的数据不被窃听或篡改，通常用于服务器管理和远程开发工作。</p>

<h4 id="ssh-的主要功能">SSH 的主要功能：</h4>
<ul>
  <li><strong>远程登录</strong>：可以在本地计算机上通过终端控制远程服务器。</li>
  <li><strong>文件传输</strong>：通过 scp 或 sftp 等方式在本地和远程机器之间安全地传输文件。</li>
  <li><strong>端口转发</strong>：通过 SSH 隧道实现的端口转发功能，可以把本地端口重定向到远程机器上的端口，用于保护其他通信协议的安全。</li>
</ul>

<h4 id="openssh-是什么">OpenSSH 是什么？</h4>
<p><strong>OpenSSH</strong> 是 SSH 协议的一个开源实现，广泛应用于各类操作系统中（特别是类 Unix 系统，如 Linux 和 macOS）。它不仅支持 SSH 协议本身，还包括一些相关的工具，例如：</p>

<ul>
  <li>ssh：用于远程登录。</li>
  <li>scp 和 sftp：用于安全地传输文件。</li>
  <li>ssh-agent 和 ssh-add：用于管理 SSH 密钥和自动登录。</li>
  <li>sshd：SSH 服务器程序，允许远程登录到本地系统。</li>
</ul>

<p>OpenSSH 是目前最常用的 SSH 实现之一，由于其开源和安全性，它在服务器管理和远程开发中被广泛使用。</p>

<p>在你的 Git 安装过程中，选择使用 <strong>OpenSSH</strong> 意味着 Git 将使用 SSH 协议来执行安全的远程操作，比如在 Git 仓库中通过 SSH 进行拉取或推送操作。</p>

<p>图中有两个选择：</p>
<ol>
  <li>
    <p><strong>Use bundled OpenSSH</strong>（使用 Git 附带的 OpenSSH）：这意味着 Git 会使用 Git 自带的 ssh.exe，也就是你不需要单独安装 SSH 程序，直接使用 Git 包含的版本。</p>
  </li>
  <li>
    <p><strong>Use external OpenSSH</strong>（使用外部的 OpenSSH）：这选项意味着你已经在系统中安装了 OpenSSH，Git 将使用系统中已有的 ssh.exe，而不是安装 Git 自己的版本。这个选择适用于你已经有外部的 OpenSSH 安装并且想用系统默认的 SSH 配置。
一般选择<strong>默认</strong>即可</p>
  </li>
</ol>

<p>7.<img src="/images/git-images/git.10.png" alt="" />8.<img src="/images/git-images/git.11.png" alt="" />
9.<img src="/images/git-images/git.12.png" alt="" />10.<img src="/images/git-images/git.14.png" alt="" />
11.<img src="/images/git-images/git.15.png" alt="" />12.<img src="/images/git-images/git.16.png" alt="" />
13.
<img src="/images/git-images/git.13.png" alt="" />
14.
<img src="/images/git-images/git.18.png" alt="" />
15..<strong>安装完成</strong><img src="/images/git-images/git.19.png" alt="" /></p>

<hr />

<h2 id="3设置用户签名">3.设置用户签名</h2>
<p><strong>Git首次安装必须设置用户签名，否则无法提交代码</strong><br />
鼠标<strong>右键</strong>点击桌面，打开<strong>Open Git Bash Here</strong><br />
（<strong>没看到就是在更多选项</strong>）
<img src="/images/git-images/git.20.png" alt="" />
可以用命令查看版本：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git --version
</code></pre></div></div>
<p>如果觉得字体小，可以<strong>Ctrl+鼠标滚轮</strong>放大</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config --global user.name 
git config --global user.email 
</code></pre></div></div>
<p>(用户名和邮箱任意设置即可，不会去查验邮箱是否真实)
<img src="/images/git-images/git.21.png" alt="" />
上述操作后，C盘的用户的用户下会生成一个.gitconfig文件，里面有你设置的用户名和邮箱
<img src="/images/git-images/git.22.png" alt="" /></p>

<hr />

<h1 id="三编辑器常用命令"><strong>三.编辑器常用命令</strong></h1>

<hr />

<h2 id="vim-编辑器常用命令">Vim 编辑器常用命令</h2>
<h3 id="1-模式切换">1. 模式切换</h3>

<ul>
  <li>i：进入插入模式（开始编辑文本）。</li>
  <li>Esc：退出插入模式，回到普通模式。</li>
  <li>:q：退出 Vim。</li>
  <li>:w：保存文件。</li>
  <li>:wq：保存并退出。</li>
  <li>:q!：强制退出（不保存修改）。</li>
  <li>:x：保存并退出（与 :wq 类似）。</li>
</ul>

<h3 id="2-文件操作">2. 文件操作</h3>

<ul>
  <li>vim filename：打开文件，若文件不存在则新建文件。</li>
  <li>:e filename：打开其他文件。</li>
  <li>:w filename：另存为指定文件名。</li>
</ul>

<h3 id="3-移动光标">3. 移动光标</h3>

<ul>
  <li>h：向左移动一个字符。</li>
  <li>j：向下移动一行。</li>
  <li>k：向上移动一行。</li>
  <li>l：向右移动一个字符。</li>
  <li>gg：移动到文件开头。</li>
  <li>G：移动到文件末尾。</li>
  <li>w：移动到下一个单词的开头。</li>
  <li>b：移动到上一个单词的开头。</li>
</ul>

<h3 id="4-文本编辑">4. 文本编辑</h3>

<ul>
  <li>x：删除光标下的字符。</li>
  <li>dd：删除当前行。</li>
  <li>yy：复制当前行。</li>
  <li>p：粘贴。</li>
  <li>u：撤销上一步操作。</li>
  <li>Ctrl + r：重做上一步操作。</li>
</ul>

<h3 id="5-查找和替换">5. 查找和替换</h3>

<ul>
  <li>/keyword：查找 keyword。</li>
  <li>n：跳到下一个匹配项。</li>
  <li>N：跳到上一个匹配项。</li>
  <li>:%s/old/new/g：全局替换 old 为 new。</li>
  <li>:n,m s/old/new/g：从第 n 行到第 m 行替换 old 为 new。</li>
</ul>

<hr />

<h2 id="vs-code-编辑器常用命令">VS Code 编辑器常用命令</h2>

<h3 id="1-基础命令">1. 基础命令</h3>

<ul>
  <li>Ctrl + P / Cmd + P：快速打开文件（输入文件名）。</li>
  <li>Ctrl + N / Cmd + N：新建文件。</li>
  <li>Ctrl + S / Cmd + S：保存文件。</li>
  <li>Ctrl + Shift + S / Cmd + Shift + S：另存为。</li>
  <li>Ctrl + W / Cmd + W：关闭当前文件。</li>
  <li>Ctrl + Shift + P / Cmd + Shift + P：打开命令面板。</li>
</ul>

<h3 id="2-导航">2. 导航</h3>

<ul>
  <li>Ctrl + Tab / Cmd + Tab：切换打开的文件。</li>
  <li>Ctrl + G / Cmd + G：跳转到指定行号。</li>
  <li>Ctrl + Shift + O / Cmd + Shift + O：按符号（函数/类名）跳转。</li>
  <li>Ctrl + T / Cmd + T：搜索并跳转到符号。</li>
</ul>

<h3 id="3-编辑">3. 编辑</h3>

<ul>
  <li>Ctrl + Z / Cmd + Z：撤销。</li>
  <li>Ctrl + Shift + Z / Cmd + Shift + Z：重做。</li>
  <li>Ctrl + X / Cmd + X：剪切。</li>
  <li>Ctrl + C / Cmd + C：复制。</li>
  <li>Ctrl + V / Cmd + V：粘贴。</li>
  <li>Ctrl + / / Cmd + /：注释/取消注释当前行。</li>
  <li>Alt + Up / Option + Up：上移当前行。</li>
  <li>Alt + Down / Option + Down：下移当前行。</li>
</ul>

<h3 id="4-多光标编辑">4. 多光标编辑</h3>

<ul>
  <li>Alt + Click / Option + Click：添加光标。</li>
  <li>Ctrl + Alt + Down / Cmd + Option + Down：向下添加光标。</li>
  <li>Ctrl + Alt + Up / Cmd + Option + Up：向上添加光标。</li>
</ul>

<h3 id="5-代码格式化和调试">5. 代码格式化和调试</h3>

<ul>
  <li>Shift + Alt + F / Shift + Option + F：格式化代码。</li>
  <li>F5：启动/继续调试。</li>
  <li>F9：设置/取消断点。</li>
  <li>F10：逐过程调试。</li>
  <li>F11：逐语句调试。</li>
</ul>

<h3 id="6-搜索和替换">6. 搜索和替换</h3>

<ul>
  <li>Ctrl + F / Cmd + F：查找。</li>
  <li>Ctrl + H / Cmd + H：替换。</li>
  <li>Ctrl + Shift + F / Cmd + Shift + F：全局搜索。</li>
</ul>

<h2 id="总结">总结</h2>

<ul>
  <li><strong>Vim</strong> 的命令主要围绕键盘快捷键，操作高效但学习曲线较陡。</li>
  <li><strong>VS Code</strong> 则更偏向图形化操作，并提供命令面板，既支持鼠标操作也支持丰富的键盘快捷键，更加适合现代开发者的多任务操作。</li>
</ul>

<hr />

<h1 id="四git常用命令"><strong>四.Git常用命令</strong></h1>

<hr />

<h2 id="1-基本-git-操作">1. 基本 Git 操作</h2>

<h3 id="11-初始化仓库">1.1. 初始化仓库</h3>

<ul>
  <li>git init：初始化一个新的 Git 仓库。</li>
</ul>

<h3 id="12-克隆仓库">1.2. 克隆仓库</h3>

<ul>
  <li>git clone [url]：从远程仓库克隆项目。</li>
</ul>

<h3 id="13-查看状态">1.3. 查看状态</h3>

<ul>
  <li>git status：查看当前文件状态，包括未跟踪的文件、修改文件、暂存文件等。</li>
</ul>

<h3 id="14-添加文件到暂存区">1.4. 添加文件到暂存区</h3>

<ul>
  <li>git add [filename]：将单个文件添加到暂存区。</li>
  <li>git add .：将当前目录下所有更改添加到暂存区。</li>
</ul>

<h3 id="15-提交更改">1.5. 提交更改</h3>

<ul>
  <li>git commit -m “[message]”：提交暂存区中的更改，并附加提交信息。</li>
  <li>git commit -a -m “[message]”：将已跟踪文件的更改自动暂存并提交（不包括新文件）。</li>
</ul>

<h3 id="16-查看提交历史">1.6. 查看提交历史</h3>

<ul>
  <li>git log：查看提交历史。</li>
  <li>git log –oneline：以简短的形式查看提交历史。</li>
</ul>

<h3 id="17-查看差异">1.7. 查看差异</h3>

<ul>
  <li>git diff：查看工作区和暂存区的文件差异。</li>
  <li>git diff –staged：查看已暂存文件的差异。</li>
</ul>

<hr />

<h2 id="2-分支操作">2. 分支操作</h2>

<h3 id="21-查看分支">2.1. 查看分支</h3>

<ul>
  <li>git branch：查看本地分支列表。</li>
</ul>

<h3 id="22-创建新分支">2.2. 创建新分支</h3>

<ul>
  <li>git branch [branch-name]：创建一个新的分支。</li>
</ul>

<h3 id="23-切换分支">2.3. 切换分支</h3>

<ul>
  <li>git checkout [branch-name]：切换到指定分支。</li>
  <li>git switch [branch-name]：切换分支的更现代命令。</li>
</ul>

<h3 id="24-创建并切换分支">2.4. 创建并切换分支</h3>

<ul>
  <li>git checkout -b [branch-name]：创建并切换到新分支。</li>
  <li>git switch -c [branch-name]：新版本的等效命令。</li>
</ul>

<h3 id="25-合并分支">2.5. 合并分支</h3>

<ul>
  <li>git merge [branch-name]：将指定分支合并到当前分支。</li>
</ul>

<h3 id="26-删除分支">2.6. 删除分支</h3>

<ul>
  <li>git branch -d [branch-name]：删除分支（若该分支的更改已被合并）。</li>
  <li>git branch -D [branch-name]：强制删除分支（即使未合并）。</li>
</ul>

<hr />

<h2 id="3-远程操作">3. 远程操作</h2>

<h3 id="31-查看远程仓库">3.1. 查看远程仓库</h3>

<ul>
  <li>git remote -v：查看远程仓库地址。</li>
</ul>

<h3 id="32-添加远程仓库">3.2. 添加远程仓库</h3>

<ul>
  <li>git remote add [name] [url]：添加远程仓库。</li>
</ul>

<h3 id="33-推送到远程仓库">3.3. 推送到远程仓库</h3>

<ul>
  <li>git push [remote] [branch]：将本地分支推送到远程仓库。</li>
  <li>git push -u [remote] [branch]：设置默认推送的上游分支，并推送。</li>
</ul>

<h3 id="34-拉取远程仓库的更改">3.4. 拉取远程仓库的更改</h3>

<ul>
  <li>git pull：从远程仓库拉取并合并更改。</li>
</ul>

<h3 id="35-从远程仓库获取更新">3.5. 从远程仓库获取更新</h3>

<ul>
  <li>git fetch：从远程仓库获取更改，但不自动合并。</li>
</ul>

<hr />

<h2 id="4-撤销更改">4. 撤销更改</h2>

<h3 id="41-取消文件暂存">4.1. 取消文件暂存</h3>

<ul>
  <li>git reset HEAD [filename]：将文件从暂存区移除，但保留工作区的更改。</li>
</ul>

<h3 id="42-撤销文件修改">4.2. 撤销文件修改</h3>

<ul>
  <li>git checkout – [filename]：撤销工作区的修改，恢复到上一次提交的状态。</li>
</ul>

<h3 id="43-重置到特定提交">4.3. 重置到特定提交</h3>

<ul>
  <li>git reset –hard [commit]：重置当前分支到指定的提交，并丢弃之后的更改。</li>
</ul>

<hr />

<h2 id="5-标签操作">5. 标签操作</h2>

<h3 id="51-创建标签">5.1. 创建标签</h3>

<ul>
  <li>git tag [tag-name]：创建一个轻量标签。</li>
  <li>git tag -a [tag-name] -m “[message]”：创建带注释的标签。</li>
</ul>

<h3 id="52-查看标签">5.2. 查看标签</h3>

<ul>
  <li>git tag：列出所有标签。</li>
</ul>

<h3 id="53-推送标签到远程仓库">5.3. 推送标签到远程仓库</h3>

<ul>
  <li>git push origin [tag-name]：推送单个标签。</li>
  <li>git push origin –tags：推送所有标签。</li>
</ul>

<hr />

<h2 id="6-其他有用命令">6. 其他有用命令</h2>

<h3 id="61-清理未跟踪的文件">6.1. 清理未跟踪的文件</h3>

<ul>
  <li>git clean -f：删除未跟踪的文件。</li>
</ul>

<h3 id="62-查看全局配置">6.2. 查看全局配置</h3>

<ul>
  <li>git config –list：查看所有 Git 配置信息。</li>
</ul>

<h3 id="63-设置全局用户名和邮箱">6.3. 设置全局用户名和邮箱</h3>

<ul>
  <li>git config –global user.name “[name]”：设置用户名。</li>
  <li>git config –global user.email “[email]”：设置邮箱。</li>
</ul>

<hr />

<h1 id="五git-bash使用示范">五.Git Bash使用示范</h1>

<hr />

<h2 id="1初始化本地库">1.初始化本地库</h2>
<h3 id="11创建文件打开git-bash">1.1.创建文件，打开Git Bash</h3>
<p><img src="/images/git-images/git.23.png" alt="" /></p>
<h3 id="12使用命令git-init">1.2.使用命令git init</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div>
<p><img src="/images/git-images/git.24.png" alt="" /></p>

<hr />

<h2 id="2查看本地库状态">2.查看本地库状态</h2>
<p>使用命令：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git status
</code></pre></div></div>
<p><img src="/images/git-images/git.25.png" alt="" /></p>

<hr />

<h2 id="3创建项目">3.创建项目</h2>
<h3 id="31使用vim创建文件">3.1.使用vim创建文件</h3>
<p><img src="/images/git-images/git.26.png" alt="" />
<img src="/images/git-images/git.27.png" alt="" />
<img src="/images/git-images/git.28.png" alt="" />
<strong>我还是更喜欢在VS Code中使用Git<br />
后续操作都在VS Code中进行<br />
在VS Code中的终端使用命令与在这里的Git Bash一样<br />
而且VS Code中有对于Git命令的图形化操作</strong></p>

<hr />

<h1 id="六vs-code中使用git"><strong>六.VS Code中使用Git</strong></h1>

<hr />

<h2 id="1安装插件">1.安装插件</h2>
<h3 id="1markdownlint-插件">1.markdownlint 插件</h3>
<p><img src="/images/git-images/git.29.png" alt="" /></p>
<h4 id="功能介绍">功能介绍</h4>

<ul>
  <li><strong>自动检测格式问题</strong>：Markdownlint 可以自动检查 Markdown 文件中的格式问题，确保文档符合标准规范。它会提供即时反馈，帮助你在编辑时快速识别和修复潜在的错误。</li>
  <li><strong>自定义规则</strong>：你可以根据项目需求配置自定义的检查规则，以适应不同的文档风格和要求。</li>
  <li><strong>集成到工作流中</strong>：Markdownlint 与 VS Code 紧密集成，提供实时反馈，让你在撰写文档时无缝管理格式，提升文档质量。</li>
</ul>

<h3 id="2git-graph-插件">2.Git Graph 插件</h3>
<p><img src="/images/git-images/git.30.png" alt="" /></p>
<h4 id="功能介绍-1">功能介绍</h4>

<ul>
  <li><strong>可视化 Git 历史</strong>：Git Graph 提供直观的图形界面，展示 Git 仓库的提交历史、分支、合并情况，帮助你快速理解代码的演变和分支结构。</li>
  <li><strong>便捷操作</strong>：通过图形化界面，你可以方便地创建和切换分支、提交更改、查看提交差异、解决冲突等，无需输入命令行。</li>
  <li><strong>增强的代码审查体验</strong>：通过可视化展示，Git Graph 使得团队成员可以更轻松地进行代码审查和协作，提高团队开发效率。</li>
</ul>

<hr />

<h2 id="2使用vs-code创建项目">2.使用VS Code创建项目</h2>
<p><strong>注意：需要先创建一个文件用作Git仓库</strong><br />
<strong>VS Code上图形化界面使用Git在源代码管理</strong></p>

<p><strong>快捷键：Ctrl+Shift+G</strong></p>

<p><img src="/images/git-images/git.63.png" alt="" />
<strong>初始化仓库后源代码管理旁边三个点里面有对应的Git 命令相同的操作</strong>
<img src="/images/git-images/git.65.png" alt="" /></p>
<h3 id="21使用vs-code打开文件夹">2.1.使用VS Code打开文件夹</h3>
<p><img src="/images/git-images/git.66.png" alt="" /></p>
<h3 id="21打开终端">2.1.打开终端</h3>
<p>快捷键：（反引号一般在键盘左上角，特殊原因这里无法打出）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Crtl+反引号
</code></pre></div></div>
<p>使用命令初始化仓库：（去源代码管理点击初始化仓库也行）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div>
<p><img src="/images/git-images/git.31.png" alt="" /></p>
<h3 id="22新建文件">2.2.新建文件</h3>
<p><img src="/images/git-images/git.32.png" alt="" /></p>

<h3 id="23提交到暂存区并添加到本地库">2.3.提交到暂存区并添加到本地库</h3>
<h4 id="方法一使用终端操作">方法一(使用终端操作)</h4>
<h4 id="1提交到暂存区">1.提交到暂存区</h4>
<p>在<strong>终端</strong>输入命令</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add hello.txt # 添加单个文件 
git add .         # 添加当前目录下所有文件
</code></pre></div></div>
<h4 id="2添加到本地库">2.添加到本地库</h4>
<p>在<strong>终端</strong>输入命令</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit -m "first commit" hello.txt
</code></pre></div></div>
<p><strong>注意：这里的first commit是指这个提交的代码的称呼</strong>
<img src="/images/git-images/git.33.png" alt="" /></p>
<h4 id="方法二使用源代码管理">方法二(使用源代码管理)</h4>
<p><strong>快捷键:Ctrl Shitf G</strong><br />
也可在左侧栏点击打开</p>
<h4 id="1提交到暂存区-1">1.提交到暂存区</h4>
<p><img src="/images/git-images/git.34.png" alt="" /></p>
<h4 id="2添加到本地库-1">2.添加到本地库</h4>
<p><strong>注意：提交上面的框框里要输入提交的代码的称呼，不然提交不成功</strong>
<img src="/images/git-images/git.35.png" alt="" />
<strong>这些提交可以理解为一个版本，并且会生成一个版本号（哈希值）<br />
你可以使用命令任意更改当前项目是哪一个版本</strong></p>

<h3 id="24修改文件">2.4.修改文件</h3>
<p><strong>直接修改对应的文件就行了，修改完再暂存提交</strong>
<img src="/images/git-images/git.36.png" alt="" /><img src="/images/git-images/git.37.png" alt="" /></p>

<h3 id="25切换到不同的提交">2.5.切换到不同的提交</h3>
<p>你每提交一次，都会生成一个哈希值，也可以理解为一个版本对应一个版本号</p>
<h4 id="1查看哈希值">1.查看哈希值</h4>
<p>使用命令：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reflog #追踪本地HEAD引用的所有变动记录
git log    #查看本地项目的提交历史
</code></pre></div></div>
<p>两个命令任选一个，这里推荐第一个，它默认只显示哈希值的前7位<br />
使用这种缩写的哈希值已经够了，第二个命令显示完全的哈希值</p>
<h4 id="2补充介绍分页器">2.补充介绍分页器</h4>
<p>当你在命令行运行 <strong>git log</strong>或<strong>git reflog</strong> 时，Git 会进入一种<strong>分页器（pager）</strong>的显示模式，通常是 <strong>less 分页器</strong>。这种模式允许你逐页查看长输出内容，如 Git 提交记录 (log)。由于提交记录可能会非常长，分页器可以方便地滚动和查看历史记录。</p>

<p>具体特性：
分页显示：git log 的输出通过分页器按页显示，默认一次显示一个屏幕大小的内容，而不是全部输出到终端。</p>

<p>导航：在 less 分页器中，你可以使用以下键进行导航：</p>

<ul>
  <li><strong>向上滚动</strong>：按 k 或方向键上。</li>
  <li><strong>向下滚动</strong>：按 j 或方向键下。</li>
  <li><strong>翻页</strong>：按 空格键 向下翻页，按 b 向上翻页。</li>
  <li><strong>跳到末尾</strong>：按 G。</li>
  <li><strong>跳到开头</strong>：按 g。</li>
  <li><strong>退出分页器</strong>：你按下 q 后，才能退出 less 分页器，回到普通的命令行界面。这是 less 的退出命令。</li>
</ul>

<p>为什么使用分页器？
当输出的信息非常多时，直接输出到命令行会导致信息快速滚动，无法看清或逐一阅读。而 less 允许你控制滚动，按页查看长输出。</p>

<p>常见提示：
如果不想进入分页器，可以在 git log 命令后加上 –oneline 参数，这样每条提交记录只显示一行，通常不会超过终端的可视区域。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log --oneline
</code></pre></div></div>
<p>你也可以通过 GIT_PAGER 环境变量或者使用 git log –no-pager 禁用分页器：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git --no-pager log
</code></pre></div></div>
<p>这种分页器模式非常常见，除了 git log，其他长输出的命令（如 man 命令）也会进入 less 或类似的分页模式。</p>
<h4 id="3命令-git-reset-哈希值">3.命令： <strong>git reset 哈希值</strong></h4>
<ul>
  <li><strong>作用</strong>：git reset <hash> 用于将当前分支的 HEAD（指向当前分支最新提交的指针）重置为指定的提交。</hash></li>
  <li><strong>状态变化</strong>：这会改变分支的历史记录（对于非共享分支），并且根据所用的选项（如 –soft、–mixed 或 –hard），会影响索引和工作目录的状态：
    <ul>
      <li><strong>–soft</strong>：仅重置 HEAD，索引和工作目录保持不变。</li>
      <li><strong>–mixed</strong>（默认）：重置 HEAD 和索引，工作目录保持不变。</li>
      <li><strong>–hard</strong>：重置 HEAD、索引和工作目录，将所有更改丢弃。</li>
    </ul>
  </li>
</ul>

<p><img src="/images/git-images/git.38.png" alt="" />
<img src="/images/git-images/git.39.png" alt="" /></p>
<h3 id="26使用分支">2.6.使用分支</h3>
<p>可以选择在<strong>终端</strong>使用<strong>命令</strong>创建分支<br />
也可以使用<strong>源代码管理</strong>里的图形界面
使用的相关命令可见上文 
<img src="/images/git-images/git.40.png" alt="" />
<img src="/images/git-images/git.64.png" alt="" /></p>
<h3 id="27合并分支">2.7.合并分支</h3>
<h4 id="271在新建的分支里的文件做出修改并提交">2.7.1.在新建的分支里的文件做出修改并提交</h4>
<p><strong>注意：合并时要到你想合并到的那个分支下，而不是在你修改内容的分支下
如图上面搜索栏，点master合并并没有效果</strong>
<img src="/images/git-images/git.41.png" alt="" /></p>
<h4 id="271返回需要合并到的分支进行合并">2.7.1.返回需要合并到的分支进行合并</h4>
<p>可以使用命令</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout 分支名
</code></pre></div></div>
<p><img src="/images/git-images/git.42.png" alt="" />
选择你需要的合并的分支就能完成合并了
<img src="/images/git-images/git.43.png" alt="" /></p>

<hr />

<h1 id="七使用代码托管平台github">七.使用代码托管平台（GitHub）</h1>

<hr />

<p>GitHub官网：<a href="https://github.com/">https://github.com/</a></p>
<h2 id="1创建远程仓库">1.创建远程仓库</h2>
<p><img src="/images/git-images/git.44.png" alt="" />
<img src="/images/git-images/git.45.png" alt="" /></p>
<h2 id="2添加文件到远程存储库">2.添加文件到远程存储库</h2>
<p><strong>注意：在VS Code中的源代码管理中的图形界面拉取或推送需要先添加远程存储库<br />
这需要你登陆你的GitHub账号，点击添加远程存储库，会自动提示你登录<br />
当然克隆不用登陆，接下来我会演示图形界面推送，和终端中用命令拉取</strong>
<img src="/images/git-images/git.46.png" alt="" />
<strong>在上图拉取、推送里选择推送，然后选择你的仓库，就能推送成功<br />
在你对项目进行修改后，暂存提交，然后推送，就能更新你的GitHub仓库了<br />
如果你是在源代码管理里提交，会自动弹出一个同步的按钮，就是把你的修改更新到GitHub仓库<br />
如果你选择终端使用命令也可以完成这些操作</strong>
<img src="/images/git-images/git.47.png" alt="" />
<img src="/images/git-images/git.48.png" alt="" /></p>

<hr />

<h2 id="3从远程存储库库克隆文件到本地">3.从远程存储库库克隆文件到本地</h2>
<p><strong>注意：克隆文件不需要登陆</strong>
<strong>先创建一个存储项目的文件，再到仓库中复制Https地址</strong>
<img src="/images/git-images/git.49.png" alt="" />
<strong>使用命令克隆</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone 地址
</code></pre></div></div>
<p><img src="/images/git-images/git.50.png" alt="" /><img src="/images/git-images/git.51.png" alt="" /></p>

<hr />

<h2 id="4团队内协作">4.团队内协作</h2>
<h3 id="41邀请协作的人">4.1.邀请协作的人</h3>
<p>点击add people后，输入你需要邀请的人的<strong>用户名</strong>，就会生成一个<strong>邀请函(网址)</strong>
<img src="/images/git-images/git.52.png" alt="" />
将这个<strong>邀请函</strong>复制，<strong>发给你需要邀请的人</strong><br />
<strong>当然被邀请的人GitHub绑定的邮箱会收到一份邀请函，也可确认</strong>
<img src="/images/git-images/git.53.png" alt="" />
然后被邀请的人把你给的邀请函输入到浏览器中，就有一个<strong>需要确认的是否加入这个项目</strong></p>

<p><img src="/images/git-images/git.54.png" alt="" />
被邀请人同意后，就能直接修改这个仓库，push不再需要权限
<img src="/images/git-images/git.55.png" alt="" /></p>

<hr />

<h2 id="5跨团队协作">5.跨团队协作</h2>
<h3 id="51fork项目">5.1.fork项目</h3>
<p>就是把别人的仓库复制一份到自己账号下
<img src="/images/git-images/git.56.png" alt="" /></p>
<h3 id="52做出修改">5.2.做出修改</h3>
<h3 id="53发出pull请求">5.3.发出pull请求</h3>
<p>就是让别人合并你修改的部分
<img src="/images/git-images/git.57.png" alt="" />
<img src="/images/git-images/git.58.png" alt="" />
<img src="/images/git-images/git.59.png" alt="" /></p>
<h3 id="54仓库管理者同意pull请求">5.4.仓库管理者同意pull请求</h3>
<p>仓库管理者会看到一个pull request
<img src="/images/git-images/git.60.png" alt="" />
点击Merge pull request就能成功合并
<img src="/images/git-images/git.61.png" alt="" />
合并成功后内容做出修改，并且贡献者中会多出你的用户名
<img src="/images/git-images/git.62.png" alt="" /></p>

<hr />

<h1 id="八完结">八.完结</h1>

<hr />

<p><strong>使用VS Code管理Git项目是非常方便的，喜欢使用命令的话<br />
用VS Code提供的终端也是一样的，本文演示的地方可能一部分是用命令<br />
一部分是图形界面操作，可能看起来较为混乱，目的是想将两者都介绍一下<br />
其实专注于一者就能完成所有Git的操作，当然也可两者结合使用</strong></p>]]></content><author><name>Your Sidebar Name</name><email>none@example.org</email></author><category term="技术，编程" /><category term="Git" /><summary type="html"><![CDATA[Git 是一个分布式版本控制系统，能够高效地跟踪文件变化，特别是在源代码管理中，支持灵活的分支管理和快速的合并操作，极大地提升了团队协作效率]]></summary></entry><entry><title type="html">Jekyll 使用教程</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/17/Jekyll%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" rel="alternate" type="text/html" title="Jekyll 使用教程" /><published>2024-10-17T00:00:00+08:00</published><updated>2024-10-17T00:00:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/17/Jekyll%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/17/Jekyll%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"><![CDATA[<h1 id="简介"><strong>简介</strong></h1>
<p>本文主要内容：<br />
1.介绍Jekyll的概念<br />
2.详细演示如何使用Jekyll来搭建静态网站<br />
3.演示如何通过Github Pages部署<br />
4.演示如何获得现成的静态网站 <br />
作者实现的静态网站：<a href="https://verumkey.github.io">verumkey.github.io</a><br />
项目仓库：<a href="https://github.com/Verumkey/verumkey.github.io">https://github.com/Verumkey/verumkey.github.io</a><br />
Jekyll官方文档：<a href="https://jekyllrb.com/docs/">https://jekyllrb.com/docs/</a></p>

<hr />

<h1 id="一jekyll概述"><strong>一.Jekyll概述</strong></h1>

<hr />

<p>Jekyll 是一个静态网站生成器，专为博客和文档类网站设计，广泛用于 GitHub Pages。它的主要特点是将 Markdown、Liquid 模板和静态文件（如 CSS、JavaScript、图片等）转化为完整的 HTML 静态页面。因为生成的是静态页面，Jekyll 网站速度快、安全性高，且不需要数据库支持。</p>

<h2 id="jekyll-的工作原理">Jekyll 的工作原理：</h2>

<ol>
  <li><strong>Markdown 文件</strong>：你撰写的内容通常以 Markdown 格式保存，它是一种简单的标记语言，易于编写和阅读。</li>
  <li><strong>模板（Layout）和组件（Includes）</strong>：Jekyll 使用 Liquid 模板引擎（由 Shopify 开发），允许你创建可复用的 HTML 模板和组件来组织页面结构，比如头部、脚部等。</li>
  <li><strong>静态文件</strong>：除了内容和模板，Jekyll 还会处理所有静态资源，比如 CSS、JS 和图片。</li>
  <li><strong>生成 HTML</strong>：运行 Jekyll 时，它会读取这些内容并结合模板生成静态 HTML 文件，最终输出一个可直接部署的网站。</li>
</ol>

<h2 id="jekyll-的特点">Jekyll 的特点：</h2>

<ul>
  <li><strong>易于部署</strong>：你可以将 Jekyll 站点托管在 GitHub Pages 上，GitHub 会自动帮你运行 Jekyll，并生成你的网站。</li>
  <li><strong>支持 Markdown</strong>：方便编写内容，尤其是对于写作博客或技术文档。</li>
  <li><strong>无数据库需求</strong>：Jekyll 不需要数据库支持，所有内容都以文件形式存储，速度更快，适合小型或中型网站。</li>
  <li><strong>插件支持</strong>：Jekyll 允许用户通过插件扩展功能，比如添加搜索、自动标签生成等。</li>
</ul>

<h2 id="基本使用步骤">基本使用步骤：</h2>

<ol>
  <li><strong>安装 Jekyll</strong>：通过 Ruby 安装。命令是 gem install jekyll bundler。</li>
  <li><strong>创建新站点</strong>：运行命令 jekyll new my-site 创建一个新项目。</li>
  <li><strong>启动开发服务器</strong>：进入站点文件夹后，运行 jekyll serve 启动本地服务器，Jekyll 会自动编译文件并提供本地预览。</li>
  <li><strong>配置 _config.yml</strong>：通过配置文件定制站点，比如设置站点标题、描述、URL、主题等/</li>
  <li><strong>添加内容</strong>：在 _posts 文件夹中添加新的 Markdown 文件，即可发布新的博客文章或页面。</li>
</ol>

<hr />

<h1 id="二在windows上配置jekyll"><strong>二.在Windows上配置Jekyll</strong></h1>

<hr />

<h2 id="1安装ruby和devkit">1.安装Ruby和DevKit</h2>
<p>网址：<a href="https://rubyinstaller.org/downloads/">https://rubyinstaller.org/downloads/</a>
<img src="/images/Jekyll-images/jekyll.1.png" alt="" /></p>

<hr />

<h2 id="2安装bundler和jekyll">2.安装Bundler和Jekyll</h2>
<p>在命令行或终端输入：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install bundler jekyll
</code></pre></div></div>
<p><img src="/images/Jekyll-images/jekyll.2.png" alt="" /></p>

<hr />

<h1 id="三创建jekyll网站项目"><strong>三.创建Jekyll网站项目</strong></h1>

<hr />

<h2 id="1创建一个存放项目的文件">1.创建一个存放项目的文件</h2>
<p><img src="/images/Jekyll-images/jekyll.3.png" alt="" /></p>

<hr />

<h2 id="2创建一个jekyll网站项目">2.创建一个Jekyll网站项目</h2>
<h3 id="21使用cd命令进入你上面创建的文件的目录下">2.1.使用cd命令进入你上面创建的文件的目录下</h3>
<p><strong>注意：如果你使用的是cmd,要先切换盘符</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D：
cd "D:\Work\My-Website"
</code></pre></div></div>
<h3 id="22输入命令jekyll-new-文件名">2.2.输入命令：jekyll new 文件名</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll new my-website
</code></pre></div></div>
<h3 id="23进入创建的文件安装项目依赖">2.3.进入创建的文件安装项目依赖</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd my-website
bundle install
</code></pre></div></div>
<h3 id="24运行本地服务器以预览网站">2.4.运行本地服务器以预览网站</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle exec jekyll serve
</code></pre></div></div>
<h3 id="25图片演示">2.5.图片演示</h3>
<p><img src="/images/Jekyll-images/jekyll.4.png" alt="" />
<img src="/images/Jekyll-images/jekyll.5.png" alt="" />
<strong>这就是一个静态网站</strong>
<img src="/images/Jekyll-images/jekyll.6.png" alt="" /></p>
<h3 id="25编辑脚本快速打开">2.5.编辑脚本快速打开</h3>
<p>每次浏览Jekyll网站时，都需要<strong>重新运行</strong>budle exec jekyll serve命令，以此启动一个本地的<strong>开发服务器</strong>，使你能够在浏览器中访问你的<strong>网站</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D:
cd "D:\Work\My-Website\my-website"
bundle exec jekyll serve
</code></pre></div></div>
<p><img src="/images/Jekyll-images/jekyll.7.png" alt="" /></p>

<hr />

<h1 id="四在github上配置静态网站"><strong>四.在GitHub上配置静态网站</strong></h1>

<hr />

<h2 id="1创建仓库">1.创建仓库</h2>
<p><img src="/images/Jekyll-images/jekyll.8.png" alt="" />
<strong>GitHub 对静态网页托管的特殊规则决定了你的个人或组织站点的仓库名必须为</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用户名.github.io
</code></pre></div></div>
<p><img src="/images/Jekyll-images/jekyll.9.png" alt="" /></p>
<h3 id="规定由来">规定由来</h3>
<p>GitHub 对静态网页托管的特殊规则决定了你的个人或组织站点的仓库名必须为 用户名.github.io。这是因为 GitHub Pages 在为个人或组织提供顶级域名托管时，需要使用固定的命名约定。具体原因如下：</p>

<h4 id="1-唯一识别的顶级域名">1. <strong>唯一识别的顶级域名</strong>：</h4>

<p>个人或组织级的 GitHub Pages 网站会使用特定的顶级域名，形式为 https://用户名.github.io。GitHub 通过仓库名匹配该域名来提供唯一的托管地址。</p>

<ul>
  <li>例如，如果你的 GitHub 用户名是 exampleuser，那么 GitHub Pages 会自动把 exampleuser.github.io 解析为你 exampleuser.github.io 仓库中的内容。这个仓库名直接与该域名绑定，便于 GitHub 自动识别和生成网站。</li>
</ul>

<h4 id="2-自动部署机制">2. <strong>自动部署机制</strong>：</h4>

<p>GitHub Pages 自动识别带有 .github.io 后缀的仓库名，并将其视为用户的顶级个人或组织站点。当你提交代码到这个仓库时，GitHub Pages 的服务会立即自动触发站点的构建和部署过程。</p>

<p>如果你的仓库名是其他的，比如 my-website，虽然它也可以用来生成 GitHub Pages 网站，但它只能通过二级域名访问，例如 https://用户名.github.io/my-website/，而不是直接的 用户名.github.io。</p>

<h4 id="3-区别于项目页面">3. <strong>区别于项目页面</strong>：</h4>

<p>GitHub Pages 支持两种类型的站点：</p>

<ul>
  <li><strong>用户/组织页面</strong>：这种站点与 GitHub 用户名直接相关，域名是 用户名.github.io，并且仓库名必须为 用户名.github.io。</li>
  <li><strong>项目页面</strong>：你可以为 GitHub 中的任何项目创建页面，域名格式为 https://用户名.github.io/项目名。项目页面的仓库名没有强制要求。</li>
</ul>

<p>通过强制 用户名.github.io 这样的仓库命名规则，GitHub Pages 可以清楚区分个人/组织站点与项目站点，并将它们映射到不同的 URL 上。</p>

<p>因此，要求个人或组织网站的仓库名必须是 用户名.github.io，是为了确保每个用户或组织都有一个唯一且固定的顶级域名来展示其内容，并简化自动部署和解析流程。</p>

<hr />

<h2 id="2配置jekyll">2.配置Jekyll</h2>
<h3 id="21启用github-action">2.1.启用GitHub Action</h3>
<p><img src="/images/Jekyll-images/jekyll.10.png" alt="" /></p>
<h3 id="22github-action介绍">2.2.GitHub Action介绍</h3>

<p>GitHub Actions 是 GitHub 提供的一项持续集成（CI）和持续交付（CD）服务，允许你在 GitHub 仓库中自动执行各种任务和工作流。它让你能够编写、共享和执行自动化流程，以便在代码提交时执行测试、构建、部署等操作。</p>

<h4 id="核心功能">核心功能：</h4>

<ol>
  <li>
    <p><strong>自动化工作流</strong>：GitHub Actions 允许你定义一系列自动化任务（称为 “工作流”），这些工作流可以在特定事件（如代码推送、Pull Request、Issue 创建等）发生时触发。</p>
  </li>
  <li>
    <p><strong>持续集成和持续交付</strong>：它可以用来自动化测试、构建和发布代码。例如，每当你推送代码到 GitHub 时，GitHub Actions 可以自动运行单元测试、构建项目，甚至将应用部署到服务器上。</p>
  </li>
  <li>
    <p><strong>灵活性与可扩展性</strong>：GitHub Actions 允许你根据自己的需求，灵活地定义自定义工作流。工作流是通过 YAML 文件定义的，存储在仓库的 .github/workflows/ 目录中。你可以使用 GitHub 自带的动作（Actions）或创建自定义的动作。</p>
  </li>
</ol>

<h4 id="github-actions-的基本概念">GitHub Actions 的基本概念：</h4>

<ol>
  <li>
    <p><strong>工作流（Workflow）</strong>：</p>

    <ul>
      <li>工作流是由一系列自动化任务组成的。它们是 GitHub Actions 的核心，用来定义你想自动化的过程。工作流文件使用 YAML 语法编写，放置在 .github/workflows/ 目录下。</li>
      <li>每个工作流可以根据事件（如代码提交、Pull Request 等）被触发。</li>
    </ul>
  </li>
  <li>
    <p><strong>事件（Event）</strong>：</p>

    <ul>
      <li>事件是触发工作流的特定动作，比如代码的 push、pull_request，创建 Issue，或者手动触发。</li>
      <li>例如，当你推送代码时，可以触发一个测试工作流，确保新代码不会破坏现有功能。</li>
    </ul>
  </li>
  <li>
    <p><strong>任务（Job）</strong>：</p>

    <ul>
      <li>工作流由一个或多个任务组成。每个任务可以在不同的虚拟机环境（例如 Ubuntu、macOS 或 Windows）上运行，并且任务可以并行或按顺序执行。</li>
    </ul>
  </li>
  <li>
    <p><strong>步骤（Step）</strong>：</p>

    <ul>
      <li>每个任务由多个步骤组成。步骤是在运行环境中执行的单个命令或操作。可以使用现有的 Actions 或者在步骤中编写自定义的 Shell 脚本。</li>
    </ul>
  </li>
  <li>
    <p><strong>动作（Action）</strong>：</p>

    <ul>
      <li>动作是 GitHub Actions 中的可复用组件，你可以在步骤中调用它们。GitHub 提供了很多官方的 Actions（如 actions/checkout 用于检出代码），并且社区中也有许多开源的 Actions 可以使用。</li>
      <li>你也可以编写自己的动作，来实现自定义需求。</li>
    </ul>
  </li>
</ol>

<h4 id="github-actions-的用途">GitHub Actions 的用途：</h4>

<ol>
  <li><strong>自动化测试</strong>：每当代码变更时自动运行测试，确保代码的质量。</li>
  <li><strong>持续集成</strong>：合并代码时自动构建和测试项目，避免引入错误。</li>
  <li><strong>自动部署</strong>：在代码推送到某个分支时，自动将项目部署到服务器或云端。</li>
  <li><strong>代码审查</strong>：自动检查代码格式、代码覆盖率等问题，帮助维护代码质量。</li>
  <li><strong>发布管理</strong>：自动生成版本、打包应用，甚至发布到包管理平台（如 npm、Docker 等）。</li>
</ol>

<p>使用 GitHub Actions 对于 Jekyll 项目的帮助主要体现在自动化、灵活性和自定义能力方面。以下是一些具体的优点和场景，说明 GitHub Actions 如何提升你的 Jekyll 项目体验：</p>

<h4 id="1-自动化构建和部署">1. <strong>自动化构建和部署</strong>：</h4>

<ul>
  <li><strong>自动化构建</strong>：通过 GitHub Actions，你可以设置在每次提交代码时自动构建 Jekyll 网站。这样可以确保每次更新后网站的最新版本都会被生成并可用。</li>
  <li><strong>定期部署</strong>：可以配置定期触发的工作流，自动生成和部署 Jekyll 网站，无需手动操作。</li>
</ul>

<h4 id="2-自定义构建过程">2. <strong>自定义构建过程</strong>：</h4>

<ul>
  <li><strong>使用特定版本的 Ruby 和 Jekyll</strong>：可以在工作流中指定使用的 Ruby 和 Jekyll 版本，确保在构建过程中的一致性，避免因环境差异导致的问题。</li>
  <li><strong>预处理和后处理步骤</strong>：在构建前后执行特定的命令，比如优化图片、清理文件、运行自定义脚本等，以确保生成的站点符合你的需求。</li>
</ul>

<h4 id="3-集成其他工具">3. <strong>集成其他工具</strong>：</h4>

<ul>
  <li><strong>测试和验证</strong>：可以在构建过程中添加自动化测试，确保 Jekyll 生成的内容符合特定标准，比如 Markdown 语法、链接有效性等。</li>
  <li><strong>部署到其他平台</strong>：除了 GitHub Pages，你还可以通过 GitHub Actions 将生成的 Jekyll 网站部署到其他平台（如 Netlify、AWS S3、Vercel 等），增强灵活性。</li>
</ul>

<h4 id="4-使用自定义插件">4. <strong>使用自定义插件</strong>：</h4>

<ul>
  <li><strong>支持更多 Jekyll 插件</strong>：GitHub Pages 默认只支持一部分 Jekyll 插件。如果你使用了自定义或不在默认列表中的插件，GitHub Actions 允许你在自己的工作流中设置环境，支持这些插件的使用。</li>
</ul>

<h4 id="5-持续集成和持续交付cicd">5. <strong>持续集成和持续交付（CI/CD）</strong>：</h4>

<ul>
  <li><strong>实现 CI/CD 流程</strong>：通过 GitHub Actions，可以实现完整的 CI/CD 流程，在代码更新时自动进行构建、测试和部署。这使得团队协作时更容易保证代码的质量。</li>
</ul>

<h4 id="6-简化复杂的部署需求">6. <strong>简化复杂的部署需求</strong>：</h4>

<ul>
  <li><strong>配置和管理更复杂的部署需求</strong>：如果你的项目需要处理多个分支、子模块或复杂的文件结构，GitHub Actions 可以提供更强大的控制能力，帮助你管理这些需求。</li>
</ul>

<h3 id="23安装jekyll依赖">2.3.安装Jekyll依赖</h3>
<p><img src="/images/Jekyll-images/jekyll.11.png" alt="" /></p>
<h3 id="24jekyll依赖作用">2.4.Jekyll依赖作用</h3>
<h3 id="1-自动构建-jekyll-网站">1. <strong>自动构建 Jekyll 网站</strong>：</h3>

<ul>
  <li>选择这个选项后，GitHub Actions 会自动帮你构建 Jekyll 网站，而不需要你手动运行构建命令。你只需要提交内容更新（比如新的 Markdown 文件），GitHub Actions 就会自动生成静态网页。</li>
</ul>

<h3 id="2-预安装-github-pages-依赖">2. <strong>预安装 GitHub Pages 依赖</strong>：</h3>

<ul>
  <li>这个选项会确保 GitHub Pages 构建过程中所需的 Jekyll 依赖（例如 github-pages Gem 和其他插件）已经预先安装好。这样你就不需要自己去担心依赖的安装和配置问题。</li>
</ul>

<h3 id="3-简化部署流程">3. <strong>简化部署流程</strong>：</h3>

<ul>
  <li>通过使用 GitHub Actions，整个构建和发布的流程变得自动化且透明。每次你向仓库提交代码或文章时，GitHub Actions 会自动运行，安装依赖、生成 HTML 文件，并将其部署到你的 GitHub Pages 网站。</li>
</ul>

<h3 id="4-确保版本一致性">4. <strong>确保版本一致性</strong>：</h3>

<ul>
  <li>当你选择这个选项时，GitHub Pages 使用的 Jekyll 及其插件的版本会和你在本地或其他地方使用的保持一致。这避免了因为版本差异带来的潜在问题，保证你的 Jekyll 网站能够正常生成。</li>
</ul>

<h4 id="总结"><strong>总结</strong>：</h4>

<ul>
  <li>选择这个选项意味着每次你更新仓库内容时，GitHub Actions 会自动构建你的 Jekyll 网站，并确保所需的依赖已经预先安装好，从而简化了整个网站的生成和部署过程。如果你不选择这个，依然可以用手动配置的方式，但使用 GitHub Actions 自动化这一过程会更加方便。</li>
</ul>

<p><strong>直接提交即可</strong>
<img src="/images/Jekyll-images/jekyll.12.png" alt="" /></p>
<h3 id="25查看网站">2.5.查看网站</h3>
<p><strong>直接在浏览器中输入你的仓库名即可</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用户名.github.io
</code></pre></div></div>
<p><img src="/images/Jekyll-images/jekyll.13.png" alt="" />
当然现在什么都没有
<img src="/images/Jekyll-images/jekyll.14.png" alt="" /></p>

<hr />

<h2 id="3将jekyll项目push到仓库">3.将Jekyll项目push到仓库</h2>
<h3 id="31打开上传">3.1.打开上传</h3>
<p><img src="/images/Jekyll-images/jekyll.15.png" alt="" /></p>
<h3 id="32复制粘贴">3.2.复制粘贴</h3>
<p>打开你创建的Jekyll项目，<strong>将所有文件全选拖动复制进去</strong>
<img src="/images/Jekyll-images/jekyll.16.png" alt="" /></p>
<h3 id="33提交">3.3.提交</h3>
<p><img src="/images/Jekyll-images/jekyll.17.png" alt="" /></p>
<h3 id="35查看网站">3.5.查看网站</h3>
<p>等待Action自动部署完成，然后点击进去
<img src="/images/Jekyll-images/jekyll.18.png" alt="" />
成功部署后，点击链接，就是你的静态网站网址
<img src="/images/Jekyll-images/jekyll.19.png" alt="" />
<strong>静态网站成功搭建</strong>
<img src="/images/Jekyll-images/jekyll.20.png" alt="" /></p>

<hr />

<h1 id="五修改jekyll项目"><strong>五.修改Jekyll项目</strong></h1>

<hr />

<p><strong>介绍：这里演示使用VS Code管理我们的项目</strong></p>
<h2 id="1将远程仓库克隆到本地">1.将远程仓库克隆到本地</h2>
<p>打开用来保存项目的文件夹，然后克隆远程仓库
其实不用初始化，直接克隆就行了
<img src="/images/Jekyll-images/jekyll.21.png" alt="" /></p>

<hr />

<h2 id="2进入克隆的目录下修改文件">2.进入克隆的目录下修改文件</h2>
<p>示例：我对index.markdown做出了更改
<img src="/images/Jekyll-images/jekyll.22.png" alt="" /></p>

<hr />

<h2 id="3本地运行">3.本地运行</h2>
<p>本地修改一些文件运行后会根据规则生成一些文件，而在GitHub仓库里修改不会显示
<img src="/images/Jekyll-images/jekyll.23.png" alt="" />
<img src="/images/Jekyll-images/jekyll.24.png" alt="" /></p>

<hr />

<h2 id="4push到远程仓库">4.push到远程仓库</h2>
<h3 id="41提交更改">4.1.提交更改</h3>
<p><strong>注意：要打开克隆的这个目录，原来的目录</strong>
<img src="/images/Jekyll-images/jekyll.25.png" alt="" /></p>
<h3 id="42推送">4.2.推送</h3>
<p><img src="/images/Jekyll-images/jekyll.26.png" alt="" />
可以在仓库中看到正在push
<img src="/images/Jekyll-images/jekyll.27.png" alt="" /></p>
<h3 id="43查看网站">4.3.查看网站</h3>
<p><strong>可以看出，我们本地打开后是一个样，原封不动push上去竟然还有些差别<br />
这是为什么？<del>我也不知道</del> <br />
我们添加一些文件代替默认的配置，就不会出现这种情况了</strong>
<img src="/images/Jekyll-images/jekyll.28.png" alt="" /></p>

<hr />

<h1 id="六jekyll-项目文件结构及作用"><strong>六.Jekyll 项目文件结构及作用</strong></h1>

<hr />

<h2 id="1主要文件">1.主要文件</h2>

<ol>
  <li>
    <p><strong>_config.yml</strong></p>

    <ul>
      <li>这是 Jekyll 项目的配置文件，定义站点的基本信息和行为，例如站点标题、作者、URL、插件、主题等。</li>
      <li>常见配置项：
        <ul>
          <li>title: 网站的名称</li>
          <li>author: 作者名称</li>
          <li>baseurl: 网站的基本 URL（如果不在根目录下托管）</li>
          <li>permalink: 定义文章 URL 的格式</li>
          <li>theme: 使用的 Jekyll 主题</li>
          <li>markdown: 指定 Markdown 解析器（通常是 kramdown）</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>index.html</strong></p>

    <ul>
      <li>这是网站的主页文件，通常是一个静态 HTML 文件或包含 Jekyll 模板标记的文件。</li>
      <li>它会根据 _config.yml 中的配置渲染成主页。</li>
    </ul>
  </li>
  <li>
    <p><strong>_posts/</strong></p>

    <ul>
      <li>存放所有博客文章的目录，所有文章都以 .md 或 .html 格式编写。</li>
      <li>文章文件命名格式：YYYY-MM-DD-title.md（年-月-日-文章标题），这个命名方式用于生成文章的 URL 和时间归档。</li>
      <li>每篇文章都需要设置 <strong>Front Matter</strong>（前置信息），用于指定元数据。</li>
    </ul>
  </li>
  <li>
    <p><strong>_layouts/</strong></p>

    <ul>
      <li>存放网站布局文件的目录，Jekyll 用这些布局文件来包裹内容页面。</li>
      <li>常见的布局文件：
        <ul>
          <li>default.html: 网站的默认布局</li>
          <li>post.html: 单篇文章的布局</li>
          <li>page.html: 普通页面的布局</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>_includes/</strong></p>

    <ul>
      <li>
        <p>存放可重用的部分或片段的目录，这些片段可以在其他模板文件中通过(有些问题，无法打出)引用</p>
      </li>
      <li>
        <p>常见的包括导航栏、页脚、头部、或其他重复的 HTML 片段。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>_sass/</strong></p>

    <ul>
      <li>存放 SASS（CSS 预处理器）文件的目录，用于自定义样式。</li>
      <li>这些文件通常通过主样式文件导入，并编译成单个 CSS 文件。</li>
    </ul>
  </li>
  <li>
    <p><strong>_site/</strong></p>

    <ul>
      <li>Jekyll 将项目编译生成的静态网站文件都会存储在这个目录中，生成的 HTML 文件可以直接部署到服务器上。</li>
      <li>注意：该文件夹在生成时自动创建，不需要手动修改。</li>
    </ul>
  </li>
  <li>
    <p><strong>assets/</strong></p>

    <ul>
      <li>存放项目的静态资源文件，比如图片、CSS、JavaScript 等。</li>
      <li>通常开发者会把自定义的样式或脚本放在这个目录中。</li>
    </ul>
  </li>
  <li>
    <p><strong>Gemfile</strong></p>

    <ul>
      <li>用于 Ruby 环境的依赖管理，包含 Jekyll 和其他插件的安装信息。</li>
      <li>bundle install 命令会依据该文件安装必要的依赖。</li>
    </ul>
  </li>
  <li>
    <p><strong>pages/</strong>（可选）</p>

    <ul>
      <li>通常用于存放自定义的页面，比如关于页面、联系页面等。</li>
      <li>这些页面的布局可以与博客文章不同。</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="2发文章的规则">2.发文章的规则</h2>

<ol>
  <li>
    <p><strong>文章文件命名</strong>：</p>

    <ul>
      <li>格式为 YYYY-MM-DD-title.md 或 YYYY-MM-DD-title.html，其中 YYYY-MM-DD 是发布日期，title 是文章的简短描述，通常以短横线 - 分隔单词。</li>
      <li>例如：2024-10-19-my-first-post.md。</li>
    </ul>
  </li>
  <li>
    <p><strong>Front Matter（前置信息）</strong>：</p>

    <ul>
      <li>
        <p>文章必须在文件的顶部包含 Front Matter，这是用 YAML 格式定义的元数据，用三条短横线包裹。</p>
      </li>
      <li>
        <p>常用字段：</p>
        <ul>
          <li>layout: 指定使用哪个布局文件（通常是 post）</li>
          <li>title: 文章标题</li>
          <li>date: 文章发布日期</li>
          <li>categories: 文章分类，可以用于按分类归档</li>
          <li>tags: 文章标签，用于更细的分类或标签云展示</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>使用 Markdown 或 HTML 编写</strong>：</p>

    <ul>
      <li>文章主体可以使用 Markdown（通常是 .md 文件）编写，Jekyll 会自动将其转换为 HTML。</li>
      <li>也可以直接使用 .html 文件，编写自定义的 HTML 内容。</li>
    </ul>
  </li>
  <li>
    <p><strong>URL 生成规则</strong>：</p>

    <ul>
      <li>根据文件名的日期和 _config.yml 中的 permalink 配置，Jekyll 会自动生成每篇文章的 URL。</li>
      <li>默认的 URL 规则通常是：/year/month/day/title/。</li>
    </ul>
  </li>
  <li>
    <p><strong>Drafts（草稿）</strong>：</p>

    <ul>
      <li>如果文章存放在 _drafts/ 目录下，并没有指定发布日期，Jekyll 默认不会发布这些草稿文章。</li>
      <li>如果要预览草稿，可以使用 jekyll serve –drafts 命令运行。</li>
    </ul>
  </li>
  <li>
    <p><strong>发布文章时的注意事项</strong>：</p>

    <ul>
      <li>确保 Front Matter 的日期是当前或过去的日期，否则 Jekyll 不会将其作为已发布的文章显示。</li>
      <li>若设置了 future: true 配置项，Jekyll 可以显示未来的文章（即发布日期在未来）。</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="3总结">3,总结</h2>

<p>Jekyll 的文件结构和规则简单而清晰，每个目录和文件都各司其职。通过合理使用 Front Matter 和布局文件，你可以灵活地创建和管理博客文章，同时根据需要自定义网站的外观和功能。</p>

<hr />

<h1 id="七markdown基本语法"><strong>七.Markdown基本语法</strong></h1>

<hr />

<p>在Jekyll中，提交在_post中特定格式的markdown文件会自动转换问html文件<br />
所以需要熟悉它的用法，用来写文章<br />
Markdown 是一种轻量级的标记语言，常用于格式化文本。它的语法简单易懂，适合用于写作和排  版。以下是 Markdown 常用语法的总结：</p>

<h2 id="1-标题">1. 标题</h2>

<p>使用 # 来表示标题。# 的数量决定了标题的级别（1-6级）。</p>

<p><strong># 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题</strong></p>

<h2 id="2-段落和换行">2. 段落和换行</h2>

<p>段落通过一个或多个空行分隔。要在段落中插入换行，可以在行尾添加两个空格，然后按 Enter。</p>

<h2 id="3-强调">3. 强调</h2>

<ul>
  <li><strong>加粗</strong>：使用 ** 或 __ 包围文本。</li>
  <li><em>斜体</em>：使用 * 或 _ 包围文本。</li>
  <li><del>删除线</del>：使用 ~~ 包围文本。</li>
</ul>

<p><strong>加粗文本</strong>   <em>斜体文本</em>   <del>删除线文本</del></p>

<h2 id="4-列表">4. 列表</h2>

<ul>
  <li><strong>无序列表</strong>：使用 *、+ 或 - 开始每个列表项。</li>
  <li><strong>有序列表</strong>：使用数字和点号（如 1.、2.）表示。</li>
</ul>

<p>无序列表：</p>
<ul>
  <li>项目一 * 项目二   * 子项目一   * 子项目二</li>
  <li>有序列表： 1. 第一项 2. 第二项    1. 子项一    2. 子项二</li>
</ul>

<h2 id="5-链接">5. 链接</h2>

<p>使用 <a href="URL">链接文本</a> 创建链接。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[OpenAI](https://www.openai.com)
</code></pre></div></div>
<p><a href="https://www.openai.com">OpenAI</a></p>
<h2 id="6-图片">6. 图片</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![示例图片](https://example.com/image.jpg)
</code></pre></div></div>
<h2 id="7-引用">7. 引用</h2>

<p>使用 &gt; 来创建引用。</p>

<blockquote>
  <p>这是一段引用文本。</p>
</blockquote>

<h2 id="8-代码">8. 代码</h2>

<ul>
  <li><strong>行内代码</strong>：使用反引号    包围代码。</li>
  <li><strong>代码块</strong>：使用三个反引号 包围多行代码，可以指定语言。</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>这是一个代码块。
</code></pre></div></div>
<h2 id="9-水平线">9. 水平线</h2>

<p>使用三个或更多的 *、- 或 _ 创建水平线。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
</code></pre></div></div>
<hr />
<h2 id="10-表格">10. 表格</h2>

<p>使用 | 分隔列，并使用 - 创建表头。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| 列1 | 列2 | 列3 | 
|-----|-----|-----| 
| 数据1 | 数据2 | 数据3 | 
| 数据4 | 数据5 | 数据6 |
</code></pre></div></div>
<h2 id="11-任务列表">11. 任务列表</h2>
<p>使用 - [ ] 创建任务列表项。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- [ ] 待办事项1 
- [x] 已完成事项
</code></pre></div></div>

<hr />

<h1 id="八fork别人的静态网站仓库">八.fork别人的静态网站仓库</h1>

<hr />

<p>上文都是介绍怎么自己做静态网站，可能要花费不少时间精力<br />
我们可以fork别人的项目，做出更改</p>
<h2 id="1找到一个合适的静态网站仓库并fork">1.找到一个合适的静态网站仓库并fork</h2>
<p>仓库名是用户名+.github.io的都是<br />
这里我以自己的仓库为例：<a href="https://github.com/Verumkey/verumkey.github.io">https://github.com/Verumkey/verumkey.github.io</a>
<img src="/images/Jekyll-images/jekyll.29.png" alt="" />
仓库名必须是：<strong>用户名.github.io</strong>
<img src="/images/Jekyll-images/jekyll.30.png" alt="" /></p>
<h2 id="2启用github-action">2.启用GitHub Action</h2>
<p><img src="/images/Jekyll-images/jekyll.31.png" alt="" /></p>
<h2 id="3安装jekyll站点">3.安装Jekyll站点</h2>
<p><img src="/images/Jekyll-images/jekyll.32.png" alt="" />
直接提交
<img src="/images/Jekyll-images/jekyll.33.png" alt="" /></p>
<h2 id="4做出修改并保存">4.做出修改并保存</h2>
<h2 id="5查看网站">5.查看网站</h2>
<p>我这里仅改了下标题
<img src="/images/Jekyll-images/jekyll.34.png" alt="" /></p>
<h2 id="6自定义域名">6.自定义域名</h2>
<p>1.在你的域名的域名商那里添加<strong>五条DNS记录</strong><br />
<strong>1个CNAME记录</strong>，<strong>主机记录为www</strong>，<strong>记录值为你的仓库名</strong><br />
(我这里就是verumkey.github.io)<br />
<strong>4个A记录</strong>，<strong>主机记录选@</strong><br />
<strong>记录值填写GitHub的ip地址<br />
一.185.199.109.153<br />
二.185.199.111.153<br />
三.185.199.110.153<br />
四.	185.199.108.153<br />
解析请求来源和TTL默认即可</strong>
<img src="/images/Jekyll-images/jekyll.36.png" alt="" />
<img src="/images/Jekyll-images/jekyll.35.png" alt="" /></p>

<p>2.然后去你的<strong>仓库的Settings</strong>的<strong>Pages</strong>里找到<strong>Custon Domain</strong><br />
3.设置你刚才添加了DNS记录的域名的<strong>主域名</strong><br />
4.等待验证成功
<img src="/images/Jekyll-images/jekyll.37.png" alt="" /></p>

<hr />

<h1 id="九完结"><strong>九.完结</strong></h1>

<hr />

<p><strong>就我目前的理解：<br />
0.演示中只生成了最基础的Jekyll文件，像丰富网站内容的话，还有一些文件需要添加<br />
1.index.markdown是默认的页面，当你添加了一个index.html作为主页后，记得删除  index.markdown，否则还会显示原来的，因为它的优先级较高<br />
2.可以添加一个_layouts文件和_includes文件，再进行一些配置来添加页眉页脚<br />
3.chatgpt是个好工具，我对Jekyll的了解很大一部分缘于它<br />
4.关于具体怎么修改Jekyll项目，我也不是很清楚,<del>所以我做的静态网站那么简陋</del><br />
可以去看看官方文档，或找找其它教学<br />
5.以后有经验了，我再回来</strong></p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />更新怎么丰富网站内容</li>
</ul>]]></content><author><name>Your Sidebar Name</name><email>none@example.org</email></author><category term="技术，编程" /><category term="Jekyll" /><summary type="html"><![CDATA[Jekyll 是一个静态网站生成器，尤其适合创建个人博客和项目网站，支持 Markdown 格式编写内容，可以方便地部署到 GitHub Pages，提供自定义化的布局和样式选项]]></summary></entry><entry><title type="html">VS Code 使用教程</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/17/VS-Code%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" rel="alternate" type="text/html" title="VS Code 使用教程" /><published>2024-10-17T00:00:00+08:00</published><updated>2024-10-17T00:00:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/17/VS%20Code%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/17/VS-Code%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"><![CDATA[<h1 id="简介"><strong>简介</strong></h1>
<p>本文主要内容： <br />
1.介绍VS Code的概念  <br />
2.详细演示VS Code对一些编程语言的环境配置：</p>
<ul>
  <li>C/C++</li>
  <li>Python</li>
  <li>HTML+CSS+JS</li>
</ul>

<p>3.介绍一些方便的快捷操作<br />
VS Code官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a><br />
(官网的文档中有对该软件使用的全面介绍)</p>

<hr />

<h1 id="一vs-code的概述"><strong>一.VS Code的概述</strong></h1>

<hr />

<p>Visual Studio Code (VS Code) 是由微软开发的一个免费、开源、跨平台的源代码编辑器，支持Windows、macOS 和 Linux 系统。它以轻量级、速度快、功能强大著称，特别适合现代编程工作流。VS Code 的主要特点包括：</p>

<ol>
  <li>
    <p><strong>多语言支持</strong><br />
VS Code 支持多种编程语言，包括但不限于：JavaScript、Python、C++、Java、Go、HTML/CSS、TypeScript 等。借助扩展，几乎可以支持任何编程语言。</p>
  </li>
  <li>
    <p><strong>丰富的扩展功能</strong><br />
VS Code 有一个庞大的扩展市场，用户可以安装各种插件来增强编辑器的功能，例如调试工具、代码片段、代码格式化、版本控制支持等。这些插件使得 VS Code 可以适应各种开发需求。你可以使用这些扩展来定制和优化你的开发环境。</p>
  </li>
  <li>
    <p><strong>集成的终端</strong><br />
VS Code 提供了一个集成终端，允许你直接在编辑器中运行命令行程序，无需切换窗口。这非常适合开发者进行实时编译、运行、调试程序。</p>
  </li>
  <li>
    <p><strong>调试功能</strong><br />
VS Code 提供了强大的调试工具，可以轻松设置断点、监控变量、调试前端和后端应用程序。你可以通过配置文件来调试Node.js、Python、C++等多种语言的项目。</p>
  </li>
  <li>
    <p><strong>Git 和版本控制</strong><br />
VS Code 内置了 Git 支持，可以让你在图形化界面中执行大部分 Git 操作，比如提交、合并分支、查看历史记录等。这对版本管理非常方便，适合与 GitHub 等平台结合使用。</p>
  </li>
  <li>
    <p><strong>智能代码补全</strong><br />
VS Code 采用了 IntelliSense 技术，能够智能地补全代码，提供语法建议、函数提示、自动导入库等功能，极大提高了编码效率。</p>
  </li>
  <li>
    <p><strong>多平台支持</strong><br />
VS Code 可以在 Windows、macOS 和 Linux 上运行，开发者可以在任何操作系统上享受一致的开发体验。此外，它还支持远程开发，通过 SSH 或 Docker 直接在远程服务器上编写、调试代码。</p>
  </li>
  <li>
    <p><strong>轻量且高度可定制</strong><br />
VS Code 虽然功能强大，但仍然保持了轻量的特性。用户可以根据需求定制界面、快捷键、主题等，来创造个性化的开发环境。</p>
  </li>
  <li>
    <p><strong>社区支持和文档</strong><br />
VS Code 拥有一个活跃的开发者社区，用户可以通过论坛、文档、教程、示例代码等方式获取支持和帮助。</p>
  </li>
</ol>

<p><strong>总结</strong><br />
VS Code 是一个功能强大且高度可定制的编辑器，适用于从前端开发、后端开发到数据科学等各种编程领域。它凭借简洁的界面和强大的扩展性成为了现代开发者的首选工具之一。</p>

<hr />

<h1 id="二下载"><strong>二.下载</strong></h1>

<hr />

<h2 id="1下载vs-code">1.下载VS Code</h2>
<p>网址：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a>
<img src="/images/vscode-images/vscode.1.png" alt="" /></p>

<hr />

<h1 id="三配置中文环境"><strong>三.配置中文环境</strong></h1>

<hr />

<h2 id="1打开扩展">1.打开扩展</h2>
<p><img src="/images/vscode-images/vscode.2.png" alt="" /></p>

<h2 id="2安装中文包">2.安装中文包</h2>

<h3 id="21在搜索栏中搜索chinese">2.1.在搜索栏中搜索Chinese</h3>
<h3 id="22选择简体中文安装">2.2.选择简体中文安装</h3>
<h3 id="23重启">2.3.重启</h3>
<p><img src="/images/vscode-images/vscode.3.png" alt="" /></p>

<hr />

<h1 id="四根据所需语言配置环境cc"><strong>四.根据所需语言配置环境（C/C++）</strong></h1>

<hr />

<p><strong>不需要此语言请跳过</strong></p>
<h2 id="1安装插件">1.安装插件</h2>
<h3 id="11cc-插件">1.1.C/C++ 插件</h3>

<ul>
  <li><strong>用途</strong>：这是由微软官方提供的插件，主要用于在 VSCode 上开发和调试 C/C++ 代码。它提供了丰富的功能来增强 C/C++ 开发的体验。</li>
  <li><strong>功能</strong>：
    <ul>
      <li>代码自动补全：帮助你快速编写代码，并提示函数、变量和类型。</li>
      <li>语法高亮：为 C/C++ 代码提供清晰的语法高亮显示。</li>
      <li>调试支持：通过 VSCode 内置的调试功能，可以使用 GDB、LLDB 或 Visual Studio 调试器来调试 C/C++ 程序。</li>
      <li>IntelliSense：通过提供自动补全、悬停信息和参数提示等功能，提高代码编写的效率。</li>
      <li>多平台支持：该插件支持在 Windows、Linux 和 macOS 平台上工作。</li>
    </ul>
  </li>
</ul>

<p><img src="/images/vscode-images/vscode.4.png" alt="" /></p>

<hr />

<h3 id="12cc-compile-run-插件">1.2.C/C++ Compile Run 插件</h3>

<ul>
  <li><strong>用途</strong>：该插件简化了在 VSCode 上编译和运行 C/C++ 程序的过程，特别适合需要快速测试代码的开发者。</li>
  <li><strong>功能</strong>：
    <ul>
      <li>一键编译和运行：你只需按一个快捷键（通常是 F6），就可以编译并立即运行代码，而不必手动编写终端命令。</li>
      <li>灵活的配置：你可以通过配置文件自定义编译和运行命令。</li>
      <li>适合小型项目：这个插件更适合快速测试小型 C/C++ 项目，因为它不提供完整的调试功能。</li>
    </ul>
  </li>
</ul>

<p><img src="/images/vscode-images/vscode.5.png" alt="" /></p>

<hr />

<h3 id="13better-c-syntax-插件">1.3.Better C++ Syntax 插件</h3>

<ul>
  <li><strong>用途</strong>：这个插件专注于改进 C++ 代码的语法高亮显示和格式化，提供比默认的 C++ 高亮显示更丰富的特性。</li>
  <li><strong>功能</strong>：
    <ul>
      <li>改进的语法高亮：为 C++ 提供更精确的语法高亮，特别是模板和更复杂的语言特性。</li>
      <li>支持现代 C++：该插件支持 C++11、C++14、C++17 等现代 C++ 标准，确保新的语言特性也能得到良好的高亮。</li>
      <li>自定义语法高亮：你可以根据自己的需求自定义 C++ 的高亮规则。</li>
    </ul>
  </li>
</ul>

<p><img src="/images/vscode-images/vscode.6.png" alt="" /></p>

<hr />

<h2 id="2配置开发者工具集mingw获得ucrt">2.配置开发者工具集MinGW，获得UCRT</h2>

<p>注意：UCRT是为C和C++设计的标准运行时库，通过MSYS2安装ucrt64工具链时，实际上安装了一个基于UCRT的GCC工具链(这个工具链中包括编译器(gcc,c++),链接器，库文件等)</p>
<h3 id="21下载msys2">2.1.下载MSYS2</h3>
<p>网址：<a href="https://code.visualstudio.com/docs/cpp/config-mingw">https://code.visualstudio.com/docs/cpp/config-mingw</a><br />
注：该网站是英文的，可以使用浏览器自带翻译，翻译成中文，后续配置内容在网站下也有讲解
<img src="/images/vscode-images/vscode.7.png" alt="" /></p>
<h3 id="22安装后复制网站中的命令输入">2.2.安装后复制网站中的命令输入</h3>
<p><strong>pacman -S –needed base-devel mingw-w64-ucrt-x86_64-toolchain</strong><br />
注意：安装时碰到Enter a selection (default=all):，回车就行，网站上说的也有
<img src="/images/vscode-images/vscode.8.png" alt="" /></p>
<h3 id="23复制ucrt64文件中的bin文件地址">2.3.复制ucrt64文件中的bin文件地址</h3>
<p>在电脑文件中找到ucrt64文件下的bin文件(就在安装MSYS2的文件中)，并复制bin文件的文件地址
<img src="/images/vscode-images/vscode.9.png" alt="" /></p>
<h3 id="24添加到windows环境变量的path路径中">2.4.添加到Windows环境变量的Path路径中</h3>
<p>.将ucrt64的bin文件地址到 Windows环境变量的Path路径中</p>
<h4 id="241打开系统环境变量界面">2.4.1.打开系统环境变量界面</h4>
<p>在搜索栏中搜索系统环境变量并打开
<img src="/images/vscode-images/vscode.10.png" alt="" /></p>
<h4 id="242-进入path变量编辑界面">2.4.2. 进入Path变量编辑界面</h4>
<p>点击环境变量，在用户/系统变量中，选择Path变量，然后选择编辑</p>
<h4 id="243-新建并放入复制的地址">2.4.3. 新建并放入复制的地址</h4>
<p>点击新建，将复制的文件地址复制进去，最后点击确定退出</p>
<h4 id="244图片演示">2.4.4.图片演示</h4>
<p><img src="/images/vscode-images/vscode.11.png" alt="" />
<img src="/images/vscode-images/vscode.12.png" alt="" />
<img src="/images/vscode-images/vscode.13.png" alt="" /></p>

<hr />

<h2 id="3编写cc程序">3.编写C/C++程序</h2>

<h3 id="31创建一个文件">3.1.创建一个文件</h3>
<p><img src="/images/vscode-images/vscode.15.png" alt="" /></p>
<h3 id="32通过vscode打开你上面创建的文件">3.2.通过VScode打开你上面创建的文件</h3>
<p><img src="/images/vscode-images/vscode.16.png" alt="" /></p>
<h3 id="33创建文本文件后缀需为c或cpp再在弹出的语言选择中选择c">3.3.创建文本文件，后缀需为.c或.cpp,再在弹出的语言选择中选择c++</h3>
<p><img src="/images/vscode-images/vscode.17.png" alt="" /></p>
<h3 id="34编写代码并运行可以在终端看到输出结果">3.4.编写代码并运行，可以在终端看到输出结果</h3>
<p><img src="/images/vscode-images/vscode.18.png" alt="" /></p>
<h3 id="35设置在控制台中输出结果">3.5.设置在控制台中输出结果</h3>
<h4 id="351打开cc-compile-run的设置">3.5.1.打开C/C++ Compile Run的设置</h4>
<p><img src="/images/vscode-images/vscode.19.png" alt="" /></p>
<h4 id="352下滑勾选选项run-in-external-terminal">3.5.2.下滑勾选选项Run-in-external-terminal</h4>
<p><img src="/images/vscode-images/vscode.20.png" alt="" /></p>
<h4 id="353配置环境完成">3.5.3.配置环境完成</h4>
<p><img src="/images/vscode-images/vscode.21.png" alt="" /></p>

<hr />

<h1 id="五根据所需语言配置环境python"><strong>五.根据所需语言配置环境（Python）</strong></h1>

<hr />

<p><strong>不需要此语言请跳过</strong></p>
<h2 id="1下载python解释器">1下载Python解释器</h2>
<p>网址：<a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a>
<img src="/images/vscode-images/vscode.22.png" alt="" />
<img src="/images/vscode-images/vscode.23.png" alt="" />(下面两个选项要勾上，第一个就是运行Python程序时会调用它，第二个是把它添加到系统路径，让系统可以直接调用它)</p>
<h2 id="2安装插件">2.安装插件</h2>
<h3 id="21python-插件">2.1.python 插件</h3>
<p><img src="/images/vscode-images/vscode.24.png" alt="" /></p>
<h3 id="22python的主要功能">2.2.python的主要功能</h3>
<ul>
  <li><strong>代码智能提示</strong>：提供 Python 代码的自动补全、函数参数提示、变量/函数定义跳转等功能。</li>
  <li><strong>调试支持</strong>：集成调试器，可以直接在 VS Code 中进行 Python 代码的调试，设置断点、变量监视和调用堆栈查看等。</li>
  <li><strong>代码检查</strong>：支持代码静态分析工具，如 Pylint 和 Flake8，帮助你发现代码中的潜在错误和格式问题。</li>
  <li><strong>虚拟环境和 Conda 支持</strong>：可以轻松选择和管理不同的 Python 解释器、虚拟环境或 Conda 环境。</li>
  <li><strong>Jupyter 支持</strong>：可以在 VS Code 中直接运行 Jupyter Notebooks，进行交互式的 Python 开发，特别适合数据科学工作流。</li>
  <li><strong>测试集成</strong>：支持常用的测试框架（如 unittest、pytest），便于运行和调试测试用例。
这个插件是 Python 开发者在 VS Code 中工作的基础工具，帮助进行代码编写、调试、测试和管理开发环境。</li>
</ul>

<hr />

<h3 id="23python-extension-pack-插件">2.3.Python Extension Pack 插件</h3>
<p><img src="/images/vscode-images/vscode.26.png" alt="" /></p>

<h3 id="24python-extension-pack-的主要功能">2.4.Python Extension Pack 的主要功能：</h3>
<p><strong>Python Extension Pack</strong> 是为 Visual Studio Code 的 Python 开发者设计的一组插件包，包含了多个非常有用的扩展，主要包括：</p>
<ol>
  <li><strong>Python</strong> - 提供核心功能，如代码检查（linting）、调试（包括多线程和远程调试）、智能感知（IntelliSense）、代码格式化、重构、单元测试，以及用于数据科学任务的 Jupyter Notebook 支持。</li>
  <li><strong>Jinja</strong> - 提供 Jinja 模板语言的语法高亮和代码片段。</li>
  <li><strong>Django</strong> - 为 Django Web 开发添加了特定的语法和代码片段。</li>
  <li><strong>Visual Studio IntelliCode</strong> - 基于机器学习的 AI 辅助工具，帮助提供智能代码补全和建议。</li>
  <li><strong>Python Environment Manager</strong> - 帮助你在 VS Code 中查看和管理 Python 环境及其依赖包。</li>
  <li><strong>Python Docstring Generator</strong> - 辅助自动生成 Python 函数和类的文档注释。</li>
  <li><strong>Python Indent</strong> - 自动纠正 Python 代码的缩进。</li>
  <li><strong>Jupyter</strong> - 提供对 Jupyter Notebook 的支持，适用于数据科学、机器学习和科学计算等任务。</li>
</ol>

<hr />

<h2 id="3编写python程序">3.编写Python程序</h2>

<h3 id="31创建一个文件-1">3.1创建一个文件</h3>
<p><img src="/images/vscode-images/vscode.15.png" alt="" /></p>
<h3 id="32通过vscode打开你上面创建的文件-1">3.2.通过VScode打开你上面创建的文件</h3>
<p><img src="/images/vscode-images/vscode.16.png" alt="" /></p>
<h3 id="33创建文本文件后缀需为py再在弹出的语言选择中选择python">3.3.创建文本文件，后缀需为.py,再在弹出的语言选择中选择python</h3>
<p><img src="/images/vscode-images/vscode.17.png" alt="" /></p>
<h3 id="34编写代码并运行可以在终端看到输出结果-1">3.4.编写代码并运行，可以在终端看到输出结果</h3>
<p><img src="/images/vscode-images/vscode.25.png" alt="" /></p>

<hr />

<h1 id="六根据所需语言配置环境htmlcssjs"><strong>六.根据所需语言配置环境（HTML+CSS+JS）</strong></h1>

<hr />

<p><strong>不需要此语言请跳过</strong></p>
<h2 id="1安装插件-1">1.安装插件</h2>
<h3 id="12html-css-support-插件">1.2.HTML CSS Support 插件</h3>
<p><img src="/images/vscode-images/vscode.27.png" alt="" /></p>
<h3 id="13html-css-support的主要功能">1.3.HTML CSS Support的主要功能</h3>

<ul>
  <li>为 HTML 文件中的元素提供 CSS 类名的自动补全。你在 HTML 文件中编辑时，输入 <code class="language-plaintext highlighter-rouge">class</code> 属性时，插件会自动从项目中的 CSS 文件中获取可用的类名并建议补全。</li>
  <li>支持从链接的 CSS 文件中提取类名，还包括嵌入在 HTML 中的 <code class="language-plaintext highlighter-rouge">&lt;style&gt;</code> 标签内的样式。</li>
  <li>这有助于提高开发效率，避免拼写错误，并且能更轻松地管理和使用样式表中的 CSS 类。
这个插件非常适合在 HTML 和 CSS 开发中频繁切换的开发者。</li>
</ul>

<hr />

<h3 id="14live-server-插件">1.4.Live Server 插件</h3>
<p><img src="/images/vscode-images/vscode.28.png" alt="" /></p>

<h3 id="15live-server的主要功能">1.5.Live Server的主要功能</h3>
<ul>
  <li>启动一个本地开发服务器，让你可以实时预览 HTML、CSS 和 JavaScript 文件的更改。</li>
  <li>每次保存文件时，浏览器会自动刷新页面，立即反映所做的更改（即所谓的 “热重载” 功能）。</li>
  <li>支持自定义端口、根目录等配置，适合多种开发场景。</li>
  <li>提高了开发效率，无需手动刷新浏览器，特别适合前端开发。
对于那些进行网页设计和前端开发的用户来说，这个插件非常实用。</li>
</ul>

<hr />

<h3 id="16auto-rename-tag-插件">1.6.Auto Rename Tag 插件</h3>
<p><img src="/images/vscode-images/vscode.29.png" alt="" /></p>
<h3 id="17auto-rename-tag的主要功能">1.7.Auto Rename Tag的主要功能</h3>
<ul>
  <li>自动同步重命名 HTML/XML 标签。当你修改或重命名一个标签时，插件会自动更新相应的闭合标签。</li>
  <li>支持所有 HTML、XML 和相关语言中的标签。</li>
  <li>减少了手动修改闭合标签的麻烦，提高了开发效率，尤其是对嵌套标签较多的代码片段非常有用。
这个插件对写 HTML 和 XML 时特别有帮助，能有效避免遗漏或错误的闭合标签。</li>
</ul>

<hr />

<h2 id="2编写html程序">2.编写HTML程序</h2>
<h3 id="21创建一个文件">2.1.创建一个文件</h3>
<h3 id="22通过vscode打开你上面创建的文件">2.2.通过VScode打开你上面创建的文件</h3>
<h3 id="23创建文本文件后缀需为html">2.3.创建文本文件，后缀需为.html</h3>
<h3 id="24编写代码鼠标右键再点击open-with-live-server">2.4.编写代码，鼠标右键再点击Open with Live Server</h3>
<p><img src="/images/vscode-images/vscode.30.png" alt="" /></p>

<p><img src="/images/vscode-images/vscode.31.png" alt="" /></p>

<hr />

<h1 id="七快捷操作"><strong>七.快捷操作</strong></h1>

<hr />

<h2 id="1使用编辑器操场">1.使用编辑器操场</h2>
<p>编辑器操场会提供许多快捷键的使用
<img src="/images/vscode-images/vscode.32.png" alt="" /></p>
<h2 id="2multi-cursor-editing多光标编辑">2.Multi-Cursor Editing（多光标编辑）</h2>
<p>注意：DownArrow就是键盘上的向下箭头，其它同理</p>
<h3 id="21box-selection">2.1.Box selection</h3>
<p>（选择矩形块）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Shift+Alt再拖动鼠标
</code></pre></div></div>
<p>实现选择一个矩形块
<img src="/images/vscode-images/vscode.33.png" alt="" /></p>
<h3 id="22add-a-cursor">2.2.Add a Cursor</h3>
<p>（添加光标）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Crtl+Alt+UpArrow/DownArrow(上/下箭头)
</code></pre></div></div>
<p>将向上/向下额外添加一个光标</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Alt再点击鼠标
</code></pre></div></div>
<p>可以在点击位置额外添加一个光标</p>
<h3 id="23creat-curosrs-on-all-occurences-of-a-string">2.3.Creat curosrs on all occurences of a string</h3>
<p>（选择光标所在字符串，并在字符串的所有出现处创建光标）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Crtl+Shift+L
</code></pre></div></div>
<p>选中光标所在单词的所有单词，并创建一个光标到单词尾<br />
注意：截图不显示光标，实际上每个backgroud的末尾都有一个光标，可以对这个单词进行批量操作
<img src="/images/vscode-images/vscode.34.png" alt="" /></p>
<h2 id="3line-actions行操作">3.Line Actions（行操作）</h2>
<h3 id="31copy-a-line-and-insert-it-above-or-below-the-current-postion">3.1.Copy a line and insert it above or below the current postion</h3>
<p>（复制一行到上/下一行）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Shift+Alt+UpArrow/DownArrow(上/下箭头)
</code></pre></div></div>
<p>会将光标所在行向上/下复制一行</p>
<h3 id="32move-an-entire-line-or-selection-of-lines-up-or-downloads">3.2.Move an entire line or selection of lines up or downloads</h3>
<p>（将所在行与上/下行将换位置）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Alt+UpArrow/DownArrow
</code></pre></div></div>
<h3 id="33delete-the-entire-line">3.3.Delete the entire Line</h3>
<p>（删除选中或所在行）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ctrl+Shift+K
</code></pre></div></div>
<h2 id="4rename-refactoring">4.Rename Refactoring</h2>
<p>（重命名一个类或函数名的所有字符串）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F2
</code></pre></div></div>
<p>先选中需要重命名的函数或类的名称，再点击<strong>F2</strong>进行重命名，注意：这对不是类或函数名的字符串不起作用</p>
<h2 id="5formatting">5.Formatting</h2>
<p>（格式化代码）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Shift+Alt+F
</code></pre></div></div>
<p>将你的代码格式化，注意：这里的格式化不是删除的意思，而是让你的代码更规范，像是是排布很乱的代码整理的意思</p>
<h2 id="6code-folding">6.Code Folding</h2>
<p>（代码折叠）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ctrl+Shift+[/]
</code></pre></div></div>
<p>将代码折叠/解除折叠，就像这个笔记软件，一个大点下面的小点都可以折叠起来</p>
<h2 id="7撤销">7.撤销</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ctrl+Z
</code></pre></div></div>
<p>可以撤销到你的上一步，错删时很好用</p>

<hr />

<h1 id="八命令搜索栏与其它"><strong>八.命令搜索栏与其它</strong></h1>

<hr />

<h2 id="1使用命令">1.使用命令</h2>
<p>帮助里编辑器操场的上一个显示所有命令，就可以进入可输入命令搜索栏，也可以直接使用快捷键<br />
也可直接在搜索栏里输入一个&gt;进入命令搜索栏</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ctrl+Shift+P
</code></pre></div></div>
<h2 id="2更改语言">2.更改语言</h2>
<p>先<strong>Ctrl+Shift+P</strong>进入命令搜索栏，再在搜索栏中搜索语言，点击配置显示语言就能实现中英文切换
<img src="/images/vscode-images/vscode.35.png" alt="" /></p>
<h2 id="3更改字体">3.更改字体</h2>
<p><img src="/images/vscode-images/vscode.36.png" alt="" /></p>
<h2 id="4快捷键参考">4.快捷键参考</h2>
<p><img src="/images/vscode-images/vscode.37.png" alt="" /></p>

<hr />

<h1 id="九完结"><strong>九.完结</strong></h1>

<hr />

<p><strong>根据上述操作，就能正常使用VS Code<br />
VS Code还能方便的管理Git项目，详情请见介绍Git的文章</strong></p>]]></content><author><name>Your Sidebar Name</name><email>none@example.org</email></author><category term="技术，编程" /><category term="VS Code" /><summary type="html"><![CDATA[VSCode 是由 Microsoft 开发的一款开源代码编辑器，支持多种编程语言，具备智能代码补全、调试工具、插件扩展和 Git 集成等强大功能，适用于不同开发者的需求]]></summary></entry></feed>