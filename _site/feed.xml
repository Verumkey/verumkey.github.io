<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-10-22T11:34:30+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">水镜的博客</title><subtitle>A blog dedicated to tutorials and insights on technology, coding, and more.</subtitle><author><name>secrecy</name><email>verumkeys@gmail.com</email></author><entry><title type="html">CMD与Powershell 使用教程</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/22/CMD%E4%B8%8EPowershell%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" rel="alternate" type="text/html" title="CMD与Powershell 使用教程" /><published>2024-10-22T11:30:00+08:00</published><updated>2024-10-22T11:30:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/22/CMD%E4%B8%8EPowershell%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/22/CMD%E4%B8%8EPowershell%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"><![CDATA[<h1 id="简介"><strong>简介</strong></h1>

<h2 id="1cmd">1.CMD</h2>

<p>CMD（命令提示符）是<strong>Windows 操作系统</strong>中的一个<strong>命令行界面</strong>，用于执行各种命令行任务。它的作用主要集中在基本的<strong>系统操作、文件管理、网络配置和诊断任务</strong>等，尽管功能比 PowerShell 简单，但在日常使用中仍然非常实用。</p>

<h3 id="1-文件和目录管理">1. 文件和目录管理</h3>

<p>CMD 最基本的功能是操作文件和文件夹。用户可以通过命令创建、删除、复制和移动文件及文件夹，也可以查看当前目录中的文件列表或更改当前工作目录。文件管理操作在维护和组织系统文件时非常常用。</p>

<h3 id="2-系统诊断和维护">2. 系统诊断和维护</h3>

<p>CMD 提供了许多系统维护相关的命令，用于检查系统健康状态、修复系统文件错误和获取有关计算机硬件和操作系统的信息。这些命令可以帮助用户排查系统问题，如文件损坏、磁盘错误等，确保计算机稳定运行。</p>

<h3 id="3-网络操作与诊断">3. 网络操作与诊断</h3>

<p>通过 CMD，可以执行多种网络操作和测试。用户可以查看计算机的网络配置、测试与其他计算机或服务器的连接、追踪网络路径以及查看当前网络连接的状态。这些网络命令在解决网络连接问题或配置网络设置时非常有用。</p>

<h3 id="4-批处理与自动化">4. 批处理与自动化</h3>

<p>CMD 支持批处理脚本，这使得用户可以自动执行一系列任务。批处理文件可以包含多个命令，按照顺序执行，从而自动化一些重复性的工作任务。批处理文件在系统管理和运维中经常使用，特别是需要定期执行的任务，如备份或清理。</p>

<h3 id="5-进程和服务管理">5. 进程和服务管理</h3>

<p>CMD 提供了管理系统进程和服务的功能。用户可以查看当前正在运行的进程，终止不需要的进程，启动或停止系统服务。管理进程和服务对于监控和维护计算机的正常运行至关重要，特别是在处理性能问题或特定服务故障时。</p>

<h3 id="6-用户和权限管理">6. 用户和权限管理</h3>

<p>CMD 允许用户管理系统账户和权限设置。这包括创建新用户、删除现有用户、更改用户密码以及将用户添加到系统组。这些功能在多用户系统或需要配置权限的环境中非常重要，特别是管理员在管理本地用户时。</p>

<h3 id="7-磁盘和分区管理">7. 磁盘和分区管理</h3>

<p>CMD 具有一些磁盘管理命令，可以帮助用户查看和管理磁盘上的分区、格式化驱动器或检查磁盘的健康状况。这些命令可以在处理存储设备问题或重新组织磁盘空间时发挥作用。</p>

<h3 id="8-计划任务管理">8. 计划任务管理</h3>

<p>用户可以通过 CMD 配置计划任务，自动执行某些命令或脚本。这对定期执行的任务（如备份、更新、清理等）非常有帮助，且可以精确控制任务执行的时间和频率。</p>

<h3 id="9-高级系统设置">9. 高级系统设置</h3>

<p>CMD 提供了某些高级系统设置的访问权限，包括管理启动配置、更新组策略等。系统管理员通常使用这些命令来修改系统行为或执行深度管理任务。</p>

<h3 id="10-调试与故障排查">10. 调试与故障排查</h3>

<p>CMD 还提供了许多用于调试和故障排查的工具。例如，用户可以使用它检查系统的详细状态信息、查看日志，或测试与特定服务器的连接。它是排查问题、修复故障、提高计算机稳定性的重要工具。</p>

<p>CMD 是一个功能丰富的工具，虽然它的界面基于文本，但它可以执行各种任务，尤其适用于系统管理、文件操作、批量任务自动化以及故障排查等场景。在现代 Windows 系统中，虽然 PowerShell 更加功能强大，但 CMD 依然是一个简单易用的工具，适合执行许多日常的系统操作。</p>

<h3 id="cmd-的局限性">CMD 的局限性：</h3>

<p>CMD 虽然功能实用，但与现代工具（如 PowerShell）相比，功能较为基础，缺少编程和高级管理功能。而 PowerShell 不仅能够执行 CMD 的所有功能，还提供了更强大的脚本能力和系统管理功能。</p>

<p>总结：CMD 是一个简单但功能可靠的工具，适合执行文件操作、网络诊断、批处理任务等基本管理任务，但它在现代自动化需求中已经逐渐被 PowerShell 等功能更强的工具所取代。</p>

<p>Windows批处理是使用CMD运行的一系列命令，通常以.bat或.cmd扩展名的文件保存</p>

<h2 id="2powershell">2.Powershell</h2>

<p>PowerShell 是一种基于命令行的任务自动化和配置管理框架，由 Microsoft 开发，专为系统管理员和高级用户设计。它具有以下几个主要功能和作用：</p>

<h3 id="1-命令行接口-cli">1. 命令行接口 (CLI)</h3>

<p>PowerShell 允许你使用命令（称为 <strong>cmdlets</strong>）执行各种任务，如文件操作、网络配置、服务管理等。它比传统的 CMD 提供了更强大的功能和更复杂的脚本处理能力。</p>

<h3 id="2-脚本编写和自动化">2. 脚本编写和自动化</h3>

<p>PowerShell 支持编写脚本文件（通常扩展名为 <code class="language-plaintext highlighter-rouge">.ps1</code>），通过这些脚本，你可以自动化复杂的系统管理任务，比如批量创建用户、部署应用、备份数据等。系统管理员可以使用它自动化日常任务，提高工作效率。</p>

<h3 id="3-对象导向">3. 对象导向</h3>

<p>与传统命令行不同，PowerShell 的输出是对象，而不是纯文本。这意味着可以轻松处理、过滤和操作这些数据，进行更精细的管理。例如，你可以获取系统中的进程，然后筛选或终止特定的进程。</p>

<h3 id="4-跨平台支持">4. 跨平台支持</h3>

<p>虽然 PowerShell 最初是为 Windows 开发的，但现在它已经开源并跨平台支持，可以在 Linux 和 macOS 上运行。这使得它适合管理混合环境的企业或开发者。</p>

<h3 id="5-系统管理和配置">5. 系统管理和配置</h3>

<p>PowerShell 提供了对 Windows 操作系统和应用程序的深入控制，用户可以通过它管理注册表、服务、进程、事件日志、网络配置、文件系统等。管理员也可以使用 PowerShell 执行远程管理。</p>

<h3 id="6-模块扩展和社区支持">6. 模块扩展和社区支持</h3>

<p>PowerShell 支持模块化扩展，你可以安装第三方模块以获得更多功能，像 Azure PowerShell 模块用于管理 Azure 资源。PowerShell 库还提供了大量社区和官方开发的脚本和模块，进一步增强了它的功能。</p>

<h3 id="常见用法">常见用法：</h3>

<ul>
  <li><strong>启动 PowerShell</strong>：按 <code class="language-plaintext highlighter-rouge">Win+X</code>，选择 “Windows PowerShell” 或 “Windows PowerShell (管理员)”。</li>
  <li><strong>执行命令</strong>：你可以在 PowerShell 中输入类似 <code class="language-plaintext highlighter-rouge">Get-Process</code> 来获取当前运行的进程，或用 <code class="language-plaintext highlighter-rouge">Get-Help</code> 查询命令的帮助文档。</li>
</ul>

<p>如果你是开发人员或系统管理员，PowerShell 是非常强大且灵活的工具，适合用于自动化任务和复杂的系统管理。</p>

<h2 id="3区别">3.区别</h2>

<p>PowerShell 和 CMD（命令提示符）是 Windows 操作系统中两种命令行接口，但它们在功能、设计和用途上有显著的区别。（不过都使用命令cls清屏）以下是一些主要差异：</p>

<h3 id="1-命令集和功能">1. 命令集和功能</h3>

<ul>
  <li><strong>CMD</strong>：CMD 是 Windows 操作系统的传统命令行界面，它使用一组相对简单的命令（如 <code class="language-plaintext highlighter-rouge">dir</code>, <code class="language-plaintext highlighter-rouge">copy</code>, <code class="language-plaintext highlighter-rouge">del</code>）来执行文件管理和一些基本的系统任务。CMD 的命令集较为有限，适合执行简单的任务。</li>
  <li><strong>PowerShell</strong>：PowerShell 是一个功能强大的任务自动化工具，提供了更为丰富和复杂的命令集（称为 <strong>cmdlets</strong>）。它可以管理文件系统、注册表、进程、服务、事件日志等，远超 CMD 的功能。</li>
</ul>

<h3 id="2-基于文本-vs-基于对象">2. 基于文本 vs 基于对象</h3>

<ul>
  <li><strong>CMD</strong>：CMD 的输出都是纯文本。当你运行一个命令时，它会以文本格式输出结果。这意味着进一步处理或解析数据时，需要手动使用字符串操作。</li>
  <li><strong>PowerShell</strong>：PowerShell 的输出是 <strong>对象</strong>，而不是文本。每个 cmdlet 都输出.NET 对象，可以直接对这些对象进行操作，而不需要将输出转换为文本再解析。这使得数据处理更加简洁和高效。</li>
</ul>

<h3 id="3-脚本能力">3. 脚本能力</h3>

<ul>
  <li><strong>CMD</strong>：CMD 支持简单的批处理脚本（以 <code class="language-plaintext highlighter-rouge">.bat</code> 或 <code class="language-plaintext highlighter-rouge">.cmd</code> 为后缀），这些脚本文件可以自动执行一系列命令。然而，CMD 的脚本功能较为基础，缺少现代编程语言中的结构和灵活性。</li>
  <li><strong>PowerShell</strong>：PowerShell 提供了强大的脚本编写能力，支持复杂的编程结构，如循环、条件语句、函数和错误处理。PowerShell 脚本文件以 <code class="language-plaintext highlighter-rouge">.ps1</code> 作为扩展名，能够编写和自动化非常复杂的任务。</li>
</ul>

<h3 id="4-跨平台支持-1">4. 跨平台支持</h3>

<ul>
  <li><strong>CMD</strong>：CMD 是 Windows 专用的命令行界面，只能在 Windows 系统中使用。</li>
  <li><strong>PowerShell</strong>：PowerShell（从 PowerShell Core 开始）是跨平台的，支持 Windows、Linux 和 macOS。这使得它在管理混合系统环境时非常有用。</li>
</ul>

<h3 id="5-模块化和扩展性">5. 模块化和扩展性</h3>

<ul>
  <li><strong>CMD</strong>：CMD 的功能较为固定，没有模块化系统，无法轻松扩展其命令集。</li>
  <li><strong>PowerShell</strong>：PowerShell 具有模块化体系结构，允许用户加载模块以扩展其功能。用户可以安装官方或社区提供的模块，来支持更多任务，如管理云资源、网络设备等。</li>
</ul>

<h3 id="6-管理员权限">6. 管理员权限</h3>

<ul>
  <li><strong>CMD</strong>：虽然 CMD 可以通过“以管理员身份运行”提升权限，但其系统管理功能相对有限。</li>
  <li><strong>PowerShell</strong>：PowerShell 提供了更深入的系统管理功能，特别是在管理员权限下，可以执行高级任务，如管理注册表、Windows服务、事件日志、进程等。</li>
</ul>

<h3 id="7-命令语法">7. 命令语法</h3>

<ul>
  <li><strong>CMD</strong>：CMD 的命令语法比较简单。例如，列出目录中的文件使用 <code class="language-plaintext highlighter-rouge">dir</code>。</li>
  <li><strong>PowerShell</strong>：PowerShell 的命令语法更像编程语言，通常遵循 <code class="language-plaintext highlighter-rouge">动词-名词</code> 格式。例如，列出目录中的文件使用 <code class="language-plaintext highlighter-rouge">Get-ChildItem</code>。这种命令格式使命令更加直观和一致。</li>
</ul>

<h3 id="8-集成-net">8. 集成 .NET</h3>

<ul>
  <li><strong>CMD</strong>：CMD 与 .NET 无关，无法直接利用 .NET 框架的功能。</li>
  <li><strong>PowerShell</strong>：PowerShell 完全基于 .NET 框架，允许你直接使用 .NET 类和方法，这为编写复杂脚本和自动化任务提供了强大支持。</li>
</ul>

<h3 id="9-远程管理">9. 远程管理</h3>

<ul>
  <li><strong>CMD</strong>：CMD 不具备本地化远程管理功能。</li>
  <li><strong>PowerShell</strong>：PowerShell 具有强大的远程管理能力，支持通过 PowerShell Remoting 连接到远程计算机，执行远程任务，非常适合管理员对大规模服务器或计算机网络进行管理。</li>
</ul>

<h3 id="什么时候使用-cmd-和-powershell">什么时候使用 CMD 和 PowerShell？</h3>

<ul>
  <li><strong>CMD</strong>：如果你只是需要执行一些简单的命令，如导航目录、管理文件等，CMD 足够好用，启动速度也较快。</li>
  <li><strong>PowerShell</strong>：如果你需要自动化复杂的任务，进行系统管理、跨平台开发，或者需要更强大的编程能力，那么 PowerShell 是更好的选择。</li>
</ul>

<p>总结：</p>

<ul>
  <li>CMD 适合执行简单的、快速的任务。</li>
  <li>PowerShell 更现代化、功能更强大，适合需要复杂任务自动化和系统管理的场景。</li>
</ul>

<p>你可以根据任务的复杂度选择最合适的工具！</p>
<h2 id="4winr">4.win+R</h2>
<p>Win+R用于打开 “运行”对话框<br />
在这个<strong>对话框</strong>中，你可以输入<strong>程序名、文件名、文档名或互联网地址</strong>，<strong>快速启动</strong>相应的<strong>应用程序</strong>或打开<strong>文件</strong><br />
你可以输入<strong>cmd打开命令提示符</strong>，也可输入<strong>powershell打开终端</strong>
<img src="/images/CMD_Powershell-images/cmd_powershell.1.png" alt="" /></p>
<h1 id="一cmd使用示例"><strong>一.CMD使用示例</strong></h1>
<p>以我目前使用CMD的经验，主要有三个方面的用法<br />
关于这些命令和bat中的语法，可以先去看看二和三<br />
下面演示都只用了最基本的命令与语法<br />
更高级的目前我还没用到</p>
<h2 id="1查询信息">1.查询信息</h2>
<p>1.可以用ipconfig查询ip地址
<img src="/images/CMD_Powershell-images/cmd_powershell.2.png" alt="" />
2.可以使用ping命令查看是否连接有网络，包括是否是科学环境
<img src="/images/CMD_Powershell-images/cmd_powershell.3.png" alt="" /></p>
<h2 id="2使用bat脚本">2.使用bat脚本</h2>
<p>再次介绍：BAT文件是批处理文件的一种，包含一系列可以在CMD中自动执行的命令，常用于自动化任务<br />
需求：1.我每次想浏览Jekyll网站时，都需要运行一个命令，以此启动一个本地的开发服务器<br />
通过运行这个bat文件，就能自动运行其中的命令
<img src="/images/CMD_Powershell-images/cmd_powershell.4.png" alt="" />
2.可以写一个py文件的启动器
<img src="/images/CMD_Powershell-images/cmd_powershell.5.png" alt="" /></p>
<h2 id="3进行文件间的操作">3.进行文件间的操作</h2>
<p>1.图中演示了我将ipconfig的输出重定向到了ip.txt
<img src="/images/CMD_Powershell-images/cmd_powershell.6.png" alt="" /></p>
<h2 id="4核心概念">4.核心概念</h2>
<p>1.重定向运算</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; (是左边出内容追加到右边)
&gt;  (是左边输出内容覆盖到右边)
&lt;  (是右边出内容追加到左边)
&lt;&lt; (记忆：箭头哪边，内容向哪边走)
</code></pre></div></div>
<p>2.管道运算</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A | B (A的输出作为B的输入)
</code></pre></div></div>
<p>3.命令帮助信息查看</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>命令 /?
</code></pre></div></div>
<p>使用此命令后会显示命令的用法，和参数的介绍
<img src="/images/CMD_Powershell-images/cmd_powershell.7.png" alt="" />
4.更多的操作我目前并没怎么没有用到，如果有机会用到再更新</p>

<h1 id="二cmd命令大全"><strong>二.CMD命令大全</strong></h1>

<p>CMD（命令提示符）有许多命令，用于文件管理、系统诊断、网络操作等。在这里，将根据日常使用的<strong>重要性和频率</strong>对 CMD 命令进行排序和介绍。</p>

<h3 id="1-文件和目录管理命令">1. 文件和目录管理命令</h3>

<p>这些是最常用的命令，用于操作文件和文件夹。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">dir</code></strong>：列出当前目录的文件和子目录。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dir
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">cd</code></strong>：改变当前目录，进入指定路径。</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd C:\Users\YourUserName\Documents
</code></pre></div></div>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">copy</code></strong>：复制文件到指定位置。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>copy source.txt C:\Destination
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">move</code></strong>：移动文件或重命名文件。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>move source.txt C:\Destination
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">del</code></strong>：删除一个或多个文件。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>del file.txt
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">mkdir</code></strong>：创建新目录。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir NewFolder
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">rmdir</code></strong>：删除目录。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rmdir /S /Q C:\Path\To\Folder  # /S 删除子目录和文件, /Q 安静模式
</code></pre></div>    </div>
    <h3 id="2-系统诊断和修复命令">2. 系统诊断和修复命令</h3>
  </li>
</ul>

<p>这些命令用于检查和修复系统，排查问题。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">sfc /scannow</code></strong>：扫描并修复系统文件的完整性。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sfc /scannow
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">chkdsk</code></strong>：检查磁盘并修复文件系统错误。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chkdsk C: /f
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">tasklist</code></strong>：显示当前运行的所有进程。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tasklist
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">taskkill</code></strong>：终止指定进程。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>taskkill /IM notepad.exe /F
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">systeminfo</code></strong>：显示系统的详细配置信息。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systeminfo
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">ipconfig</code></strong>：显示网络接口的配置信息，如 IP 地址、子网掩码等。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ipconfig
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">ping</code></strong>：测试与远程服务器的网络连接。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping google.com
</code></pre></div>    </div>
    <h3 id="3-网络命令">3. 网络命令</h3>
  </li>
</ul>

<p>这些命令用于诊断网络连接和配置网络设置。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">netstat</code></strong>：显示当前的网络连接、端口和协议。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netstat -an
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">tracert</code></strong>：显示到目标主机的路由路径。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tracert google.com
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">nslookup</code></strong>：查询域名对应的 IP 地址或检查 DNS 解析问题。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nslookup google.com
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">net use</code></strong>：映射或断开网络驱动器。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net use Z: \\server\sharedfolder
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">netsh</code></strong>：管理网络配置（如 IP 设置、防火墙规则）。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netsh int ip set address "Local Area Connection" static 192.168.1.100 255.255.255.0 192.168.1.1
</code></pre></div>    </div>
    <h3 id="4-批处理命令">4. 批处理命令</h3>
  </li>
</ul>

<p>这些命令经常在批处理脚本（.bat 文件）中使用，以自动化重复任务。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">echo</code></strong>：显示消息或启用/禁用命令回显。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo Hello, World!
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">set</code></strong>：设置或显示环境变量。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set PATH
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">pause</code></strong>：在批处理文件中暂停命令执行，等待用户按键。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pause
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">if</code></strong>：条件语句，判断是否执行某些命令。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if exist file.txt echo File exists
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">for</code></strong>：循环处理文件或命令。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for %%f in (*.txt) do echo %%f
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">goto</code></strong>：跳转到脚本中的某个标签，通常和 <code class="language-plaintext highlighter-rouge">if</code> 配合使用。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>goto :start
</code></pre></div>    </div>
    <h3 id="5-用户和权限管理">5. 用户和权限管理</h3>
  </li>
</ul>

<p>这些命令用于管理用户账户和权限。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">net user</code></strong>：管理用户账户（创建、删除、修改用户）。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net user username password /add
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">net localgroup</code></strong>：管理本地用户组。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net localgroup administrators username /add
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">runas</code></strong>：以其他用户身份执行命令。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>runas /user:Administrator cmd
</code></pre></div>    </div>
    <h3 id="6-磁盘管理命令">6. 磁盘管理命令</h3>
  </li>
</ul>

<p>这些命令用于管理硬盘驱动器和分区。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">diskpart</code></strong>：管理磁盘分区（创建、删除、调整大小）。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diskpart
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">format</code></strong>：格式化磁盘或分区。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>format D:
</code></pre></div>    </div>
    <h3 id="7-进程和服务管理">7. 进程和服务管理</h3>
  </li>
</ul>

<p>这些命令用于查看、终止进程或管理系统服务。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">sc</code></strong>：管理系统服务（启动、停止、查询服务状态）。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sc query wuauserv
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">shutdown</code></strong>：关闭或重启计算机。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>shutdown /s /t 0  # 立即关机 shutdown /r /t 0  # 立即重启
</code></pre></div>    </div>
    <h3 id="8-时间与计划任务管理">8. 时间与计划任务管理</h3>
  </li>
</ul>

<p>这些命令用于与系统时间、计划任务有关的操作。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">time</code></strong>：显示或设置系统时间。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>time
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">schtasks</code></strong>：管理计划任务，自动执行任务。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>schtasks /create /sc daily /tn "Backup" /tr "backup.bat" /st 23:00
</code></pre></div>    </div>
    <h3 id="9-高级管理命令">9. 高级管理命令</h3>
  </li>
</ul>

<p>这些命令用于执行更高级的管理操作，通常由系统管理员使用。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">bcdedit</code></strong>：管理启动配置数据（修改启动选项）。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bcdedit /set {bootmgr} timeout 30
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">gpupdate</code></strong>：更新组策略设置。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpupdate /force
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">wmic</code></strong>：Windows Management Instrumentation Command，用于查询和管理操作系统相关信息。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wmic process get name
</code></pre></div>    </div>
    <h3 id="总结">总结：</h3>
  </li>
</ul>

<ol>
  <li><strong>文件和目录管理</strong>：如 <code class="language-plaintext highlighter-rouge">dir</code>、<code class="language-plaintext highlighter-rouge">cd</code>、<code class="language-plaintext highlighter-rouge">copy</code>、<code class="language-plaintext highlighter-rouge">del</code> 等，是最基础的操作。</li>
  <li><strong>系统诊断和修复</strong>：如 <code class="language-plaintext highlighter-rouge">sfc</code>、<code class="language-plaintext highlighter-rouge">chkdsk</code>、<code class="language-plaintext highlighter-rouge">ipconfig</code> 等，用于维护和修复系统。</li>
  <li><strong>网络操作</strong>：如 <code class="language-plaintext highlighter-rouge">ping</code>、<code class="language-plaintext highlighter-rouge">netstat</code>、<code class="language-plaintext highlighter-rouge">tracert</code>，对于网络调试和故障排查非常有用。</li>
  <li><strong>批处理和自动化</strong>：如 <code class="language-plaintext highlighter-rouge">echo</code>、<code class="language-plaintext highlighter-rouge">for</code>、<code class="language-plaintext highlighter-rouge">if</code>，用于编写自动化脚本。</li>
  <li><strong>用户和权限管理</strong>：如 <code class="language-plaintext highlighter-rouge">net user</code>、<code class="language-plaintext highlighter-rouge">runas</code>，用于管理账户和权限。
    <h1 id="三bat文件语法"><strong>三.bat文件语法</strong></h1>
    <p>批处理文件（BAT 文件）的语法基于 Windows 的命令行工具 CMD。BAT 文件用于自动执行一系列命令，通常以 <code class="language-plaintext highlighter-rouge">.bat</code> 或 <code class="language-plaintext highlighter-rouge">.cmd</code> 为扩展名。编写 BAT 文件时，使用的是 CMD 中的命令及其特定的控制结构来控制脚本的流程。</p>
  </li>
</ol>

<h3 id="1-基本语法结构">1. 基本语法结构</h3>

<p>BAT 文件的每一行通常包含一个命令，并且按照自上而下的顺序执行。常用的命令包括文件操作、系统管理、进程控制等。</p>

<ul>
  <li><strong>注释：</strong> 使用 <code class="language-plaintext highlighter-rouge">REM</code> 或 <code class="language-plaintext highlighter-rouge">::</code> 来注释代码，注释行不会执行。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>REM This is a comment :: This is also a comment
</code></pre></div>    </div>
  </li>
  <li><strong>显示消息：</strong> 使用 <code class="language-plaintext highlighter-rouge">echo</code> 打印消息或控制命令回显。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo Hello, World!
</code></pre></div>    </div>
  </li>
  <li><strong>变量：</strong> 使用 <code class="language-plaintext highlighter-rouge">set</code> 定义和访问变量。变量名用 <code class="language-plaintext highlighter-rouge">%</code> 包围来引用。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set myVar=123 echo %myVar%
</code></pre></div>    </div>
  </li>
  <li><strong>禁用回显：</strong> 在脚本开头使用 <code class="language-plaintext highlighter-rouge">@echo off</code> 来关闭命令回显，使得脚本只输出你想要的内容，而不是每个命令的执行行。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@echo off
</code></pre></div>    </div>
    <h3 id="2-流程控制语法">2. 流程控制语法</h3>
  </li>
</ul>

<p>BAT 文件支持基本的流程控制语法，如条件语句、循环等。</p>

<h4 id="条件语句-if">条件语句 (if)</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">if</code> 用于执行条件判断。可以根据文件是否存在、字符串比较或者数值比较来决定代码的执行。
    <ul>
      <li>存在判断：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if exist file.txt echo File exists
</code></pre></div>        </div>
      </li>
      <li>字符串比较：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if "%myVar%"=="123" echo Variable is 123
</code></pre></div>        </div>
      </li>
      <li>数值比较：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if %myVar% GEQ 100 echo Value is greater than or equal to 100
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h4 id="循环语句-for">循环语句 (for)</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">for</code> 循环用于遍历文件、目录或变量集合。
    <ul>
      <li>遍历文件：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for %%f in (*.txt) do echo %%f
</code></pre></div>        </div>
      </li>
      <li>遍历数字范围：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for /L %%i in (1, 1, 10) do echo %%i
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="3-输入输出">3. 输入输出</h3>

<ul>
  <li><strong>用户输入：</strong> 使用 <code class="language-plaintext highlighter-rouge">set /p</code> 提示用户输入，并将输入存储到变量中。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set /p userInput=Enter your name:  echo Hello, %userInput%
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>重定向输出：</strong> 使用 <code class="language-plaintext highlighter-rouge">&gt;</code>、<code class="language-plaintext highlighter-rouge">&gt;&gt;</code> 将命令的输出重定向到文件。</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">&gt;</code> 将输出重定向到文件并覆盖该文件的内容。
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo This is a test &gt; output.txt
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">&gt;&gt;</code> 将输出附加到文件末尾。
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo Another line &gt;&gt; output.txt
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="4-子程序与跳转">4. 子程序与跳转</h3>

<ul>
  <li><strong>标签 (<code class="language-plaintext highlighter-rouge">:</code>)</strong> 和 <strong>跳转 (<code class="language-plaintext highlighter-rouge">goto</code>)</strong>：可以通过标签创建脚本的不同部分，并使用 <code class="language-plaintext highlighter-rouge">goto</code> 跳转到某个标签。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>goto :start  :start echo This is the start
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">call</code> 语句：</strong> 用于调用另一个批处理文件或调用当前脚本的子例程。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>call otherScript.bat
</code></pre></div>    </div>
    <h3 id="5-错误处理">5. 错误处理</h3>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">errorlevel</code></strong>：每个命令执行后会设置一个返回码，称为 <code class="language-plaintext highlighter-rouge">errorlevel</code>。可以通过检查 <code class="language-plaintext highlighter-rouge">errorlevel</code> 来执行错误处理。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if %errorlevel% neq 0 echo An error occurred
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="6-批处理文件常见参数">6. 批处理文件常见参数</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">%1</code> 到 <code class="language-plaintext highlighter-rouge">%9</code></strong>：批处理文件可以接收命令行参数，使用 <code class="language-plaintext highlighter-rouge">%1</code> 访问第一个参数，<code class="language-plaintext highlighter-rouge">%2</code> 访问第二个参数，依次类推。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo First parameter is %1
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">shift</code></strong>：用于左移参数，<code class="language-plaintext highlighter-rouge">%2</code> 变为 <code class="language-plaintext highlighter-rouge">%1</code>，<code class="language-plaintext highlighter-rouge">%3</code> 变为 <code class="language-plaintext highlighter-rouge">%2</code>。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>shift
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="7-批处理文件常用命令">7. 批处理文件常用命令</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">pause</code></strong>：暂停脚本执行，等待用户按任意键继续。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pause
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">exit</code></strong>：终止批处理文件的执行，并可选择返回错误码。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exit /b 0
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="8-高级功能">8. 高级功能</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">setlocal</code> 和 <code class="language-plaintext highlighter-rouge">endlocal</code></strong>：用于限制变量的作用范围，使得在 <code class="language-plaintext highlighter-rouge">setlocal</code> 和 <code class="language-plaintext highlighter-rouge">endlocal</code> 之间定义的变量在该范围外无效。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setlocal set myVar=123 endlocal
</code></pre></div>    </div>
  </li>
  <li><strong>环境变量操作</strong>：批处理文件可以访问系统环境变量，如 <code class="language-plaintext highlighter-rouge">PATH</code>、<code class="language-plaintext highlighter-rouge">TEMP</code> 等，并进行修改或使用。</li>
</ul>

<h3 id="9-批处理文件的应用场景">9. 批处理文件的应用场景</h3>

<ul>
  <li><strong>自动化任务</strong>：定期执行备份、清理日志文件或其他维护任务。</li>
  <li><strong>批量操作</strong>：批处理文件可以批量处理大量文件，如重命名、复制或移动。</li>
  <li><strong>系统配置和设置</strong>：设置系统变量、安装软件或配置网络等。</li>
</ul>

<h3 id="总结-1">总结：</h3>

<p>BAT 文件语法虽然简单，但在系统自动化和维护中非常有用。它结合了条件语句、循环、变量操作等功能，可以编写复杂的脚本来处理各种任务。如果需要实现更复杂的功能或与外部工具交互，批处理脚本也可以作为基础，通过调用其他程序实现更强大的自动化解决方案。</p>
<h1 id="四powershell命令大全"><strong>四.Powershell命令大全</strong></h1>
<p>PowerShell 是一个功能强大的命令行界面和脚本语言，支持多种命令（cmdlets），这些命令用于系统管理、文件操作、网络管理等。以下是按重要性排序的一些常用 PowerShell 命令及其简要说明：</p>

<h3 id="1-基本命令">1. 基本命令</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-Command</code></strong>：获取可用的所有命令及其详细信息。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-Help</code></strong>：显示有关 PowerShell 命令和语法的帮助信息。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-Process</code></strong>：获取当前正在运行的进程列表。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-Service</code></strong>：获取当前计算机上所有服务的状态。</li>
</ul>

<h3 id="2-文件和目录管理">2. 文件和目录管理</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-ChildItem</code></strong>：列出目录中的文件和子目录（相当于 CMD 中的 <code class="language-plaintext highlighter-rouge">dir</code>）。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Set-Location</code></strong>：改变当前工作目录（相当于 CMD 中的 <code class="language-plaintext highlighter-rouge">cd</code>）。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Copy-Item</code></strong>：复制文件或目录。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Move-Item</code></strong>：移动文件或目录。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Remove-Item</code></strong>：删除文件或目录。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">New-Item</code></strong>：创建新文件或目录。</li>
</ul>

<h3 id="3-系统管理">3. 系统管理</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-EventLog</code></strong>：获取系统事件日志。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Clear-Host</code></strong>：清除 PowerShell 窗口中的所有内容。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-ExecutionPolicy</code></strong>：查看当前的脚本执行策略。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Set-ExecutionPolicy</code></strong>：设置 PowerShell 脚本的执行策略。</li>
</ul>

<h3 id="4-网络管理">4. 网络管理</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Test-Connection</code></strong>：测试与远程主机的网络连接（相当于 <code class="language-plaintext highlighter-rouge">ping</code> 命令）。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-NetAdapter</code></strong>：获取网络适配器的详细信息。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-NetIPAddress</code></strong>：获取 IP 地址配置。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">New-NetFirewallRule</code></strong>：创建新的防火墙规则。</li>
</ul>

<h3 id="5-用户和权限管理-1">5. 用户和权限管理</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-LocalUser</code></strong>：列出本地用户账户。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">New-LocalUser</code></strong>：创建新的本地用户账户。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Remove-LocalUser</code></strong>：删除本地用户账户。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Add-LocalGroupMember</code></strong>：将用户添加到本地组中。</li>
</ul>

<h3 id="6-服务和进程管理">6. 服务和进程管理</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Start-Service</code></strong>：启动指定服务。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Stop-Service</code></strong>：停止指定服务。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Restart-Service</code></strong>：重启指定服务。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Stop-Process</code></strong>：终止指定进程。</li>
</ul>

<h3 id="7-脚本和自动化">7. 脚本和自动化</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Invoke-Command</code></strong>：在本地或远程计算机上执行命令或脚本块。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Start-Job</code></strong>：启动后台作业。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-Job</code></strong>：获取后台作业的信息。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Receive-Job</code></strong>：接收后台作业的输出。</li>
</ul>

<h3 id="8-对象和管道处理">8. 对象和管道处理</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Select-Object</code></strong>：选择对象的特定属性。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Where-Object</code></strong>：过滤对象集合，返回满足条件的对象。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Sort-Object</code></strong>：对对象集合进行排序。</li>
</ul>

<h3 id="9-注册表操作">9. 注册表操作</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-Item</code></strong>：获取指定路径的注册表项。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Set-Item</code></strong>：设置注册表项的值。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Remove-Item</code></strong>：删除注册表项或值。</li>
</ul>

<h3 id="10-获取系统信息">10. 获取系统信息</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-ComputerInfo</code></strong>：获取计算机的系统信息。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-WmiObject</code></strong>：访问 Windows 管理工具（WMI）以获取系统的详细信息。</li>
</ul>

<h3 id="11-环境变量">11. 环境变量</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Get-ChildItem Env:</code></strong>：列出所有环境变量。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Set-Item Env:VariableName</code></strong>：设置或修改环境变量。</li>
</ul>

<h3 id="12-其他常用命令">12. 其他常用命令</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Write-Host</code></strong>：向控制台输出信息。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Read-Host</code></strong>：从用户获取输入。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Exit</code></strong>：退出 PowerShell 会话。</li>
</ul>

<h3 id="总结-2">总结</h3>

<p>以上列举的是一些重要且常用的 PowerShell 命令，按照其在日常使用中的重要性进行排序。这些命令可以帮助用户完成许多任务，从基础的文件管理到复杂的系统管理和自动化操作。PowerShell 的强大之处在于它的命令组合能力和对象处理能力，用户可以通过管道将一个命令的输出直接传递给另一个命令，从而实现更复杂的操作。</p>
<h1 id="五ysl文件语法"><strong>五.ysl文件语法</strong></h1>
<p>PSL 文件通常是指 PowerShell 脚本文件，其扩展名为 <code class="language-plaintext highlighter-rouge">.ps1</code>。PowerShell 脚本使用 PowerShell 语言编写，支持丰富的语法和功能。以下是对 PowerShell 脚本（PSL 文件）语法的详细介绍：</p>

<h3 id="1-基本结构">1. <strong>基本结构</strong></h3>

<ul>
  <li><strong>脚本注释</strong>：
    <ul>
      <li>单行注释使用 <code class="language-plaintext highlighter-rouge">#</code> 符号：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># This is a comment`
</code></pre></div>        </div>
      </li>
      <li>多行注释使用 <code class="language-plaintext highlighter-rouge">&lt;#</code> 和 <code class="language-plaintext highlighter-rouge">#&gt;</code>：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;# This is a multi-line comment It can span multiple lines #&gt;
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="2-变量">2. 变量</h3>

<ul>
  <li><strong>定义变量</strong>：使用 <code class="language-plaintext highlighter-rouge">$</code> 符号定义变量，等号（<code class="language-plaintext highlighter-rouge">=</code>）用于赋值。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$myVariable = "Hello, World!"
</code></pre></div>    </div>
  </li>
  <li><strong>使用变量</strong>：在字符串中使用变量时，可用双引号引用。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Write-Host "The message is: $myVariable"
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="3-数据类型">3. 数据类型</h3>

<ul>
  <li>PowerShell 支持多种数据类型，包括字符串、整数、数组、哈希表等。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$stringVar = "This is a string" $intVar = 42 $arrayVar = @(1, 2, 3, 4) $hashTable = @{"key1" = "value1"; "key2" = "value2"}
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="4-流程控制">4. 流程控制</h3>

<ul>
  <li><strong>条件语句</strong>：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if ($condition) {     # Do something } elseif ($otherCondition) {     # Do something else } else {     # Do another thing }
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>循环语句</strong>：</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">for</code> 循环：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for ($i = 0; $i -lt 10; $i++) {     Write-Host $i }
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">foreach</code> 循环：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>foreach ($item in $arrayVar) {     Write-Host $item }
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">while</code> 循环：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$counter = 0 while ($counter -lt 5) {     Write-Host $counter     $counter++ }
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="5-函数">5. 函数</h3>

<ul>
  <li><strong>定义函数</strong>：使用 <code class="language-plaintext highlighter-rouge">function</code> 关键字定义一个函数。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function MyFunction {     param ($param1, $param2)     Write-Host "Parameter 1 is $param1"     Write-Host "Parameter 2 is $param2" }  MyFunction "Value1" "Value2"
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="6-错误处理">6. 错误处理</h3>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">try</code>、<code class="language-plaintext highlighter-rouge">catch</code> 和 <code class="language-plaintext highlighter-rouge">finally</code></strong>：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try {     # Code that might throw an exception } catch {     Write-Host "An error occurred: $_" } finally {     # Code that runs regardless of success or failure }
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="7-模块和导入">7. 模块和导入</h3>

<ul>
  <li><strong>导入模块</strong>：使用 <code class="language-plaintext highlighter-rouge">Import-Module</code> 导入 PowerShell 模块。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Import-Module ModuleName
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="8-输入和输出">8. 输入和输出</h3>

<ul>
  <li><strong>输出到控制台</strong>：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Write-Host "This is output to the console"
</code></pre></div>    </div>
  </li>
  <li><strong>获取用户输入</strong>：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$userInput = Read-Host "Enter your name" Write-Host "Hello, $userInput!"
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="9-管道">9. 管道</h3>

<ul>
  <li>PowerShell 支持管道（<code class="language-plaintext highlighter-rouge">|</code>）将一个命令的输出直接传递给另一个命令。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Get-Process | Where-Object { $_.CPU -gt 100 }
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="10-文件操作">10. 文件操作</h3>

<ul>
  <li><strong>读取文件</strong>：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$content = Get-Content "C:\path\to\file.txt"
</code></pre></div>    </div>
  </li>
  <li><strong>写入文件</strong>：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Hello, World!" | Out-File "C:\path\to\output.txt"
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="11-对象和属性">11. 对象和属性</h3>

<ul>
  <li>PowerShell 的强大之处在于对对象的处理，可以访问对象的属性和方法。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$process = Get-Process | Where-Object { $_.Name -eq "powershell" } Write-Host "Process ID: $($process.Id)"
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="12-自动化和计划任务">12. 自动化和计划任务</h3>

<ul>
  <li><strong>创建计划任务</strong>：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "C:\path\to\script.ps1" $trigger = New-ScheduledTaskTrigger -At 7am -Daily Register-ScheduledTask -Action $action -Trigger $trigger -TaskName "MyTask"
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="13-模块的创建与使用">13. 模块的创建与使用</h3>

<ul>
  <li><strong>创建模块</strong>：将相关的函数和命令放入一个 <code class="language-plaintext highlighter-rouge">.psm1</code> 文件中。</li>
  <li><strong>使用模块</strong>：导入模块并调用模块中的函数。</li>
</ul>

<h3 id="14-管道和流">14. 管道和流</h3>

<ul>
  <li>管道允许多个命令连接在一起，可以有效处理数据流。</li>
  <li><strong>示例</strong>：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Get-Service | Where-Object { $_.Status -eq 'Running' }
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="15-自动完成和参数">15. 自动完成和参数</h3>

<ul>
  <li>PowerShell 支持命令的自动完成功能，并可以使用参数简化命令的输入。</li>
</ul>

<h3 id="总结-3">总结</h3>

<p>PowerShell 脚本（PSL 文件）语法强大且灵活，支持多种编程结构，使其能够用于系统管理、自动化任务、文件处理等多种场景。通过合理使用这些语法结构，用户可以编写高效、可维护的脚本来完成复杂的操作。</p>

<h1 id="六powershell使用示例"><strong>六.Powershell使用示例</strong></h1>

<h2 id="1配置环境">1.配置环境</h2>

<h3 id="11执行策略介绍">1.1.执行策略介绍</h3>

<p>执行策略（Execution Policy）是 PowerShell 中的一个安全功能，用于控制脚本和配置文件的运行权限。它通过限制脚本的执行来保护系统不受潜在恶意代码的影响。主要的执行策略有：</p>

<ol>
  <li><strong>Restricted</strong>：默认策略，不允许任何脚本运行。</li>
  <li><strong>AllSigned</strong>：只允许运行由受信任的发布者签名的脚本。</li>
  <li><strong>RemoteSigned</strong>：本地脚本可以运行，远程脚本必须签名。</li>
  <li><strong>Unrestricted</strong>：允许所有脚本运行，但在执行远程脚本时会有警告。</li>
  <li><strong>Bypass</strong>：不进行任何检查，允许所有脚本运行。</li>
  <li><strong>Undefined</strong>：没有设置策略，PowerShell 会回到默认策略。</li>
</ol>

<p>可以通过 PowerShell 中的 <code class="language-plaintext highlighter-rouge">Get-ExecutionPolicy</code> 命令查看当前策略，通过 <code class="language-plaintext highlighter-rouge">Set-ExecutionPolicy</code> 命令更改策略。修改执行策略时需要考虑安全性和系统的需求。</p>

<h3 id="12运行命令检查执行策略">1.2.运行命令检查执行策略</h3>

<p>我这已经提前更改过了，初始是限制的</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Get-ExecutionPolicy -List
</code></pre></div></div>
<p><img src="/images/CMD_Powershell-images/cmd_powershell.8.png" alt="" /></p>

<h3 id="13更改currentuser-的策略为remotesigned">1.3更改CurrentUser 的策略为RemoteSigned</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
</code></pre></div></div>

<h2 id="2批量重命名文件名">2.批量重命名文件名</h2>

<h3 id="21需求">2.1.需求</h3>

<p>我需要对一个目录下的所有png图片按照时间顺序进行指定格式的重命名</p>

<h3 id="22编写代码">2.2.编写代码</h3>

<p>文件后缀是ps1,不要写成psl了，数字1与字母l很像
<img src="/images/CMD_Powershell-images/cmd_powershell.9.png" alt="" /></p>

<h3 id="23在终端中运行">2.3.在终端中运行</h3>

<p>需处理的文件
<img src="/images/CMD_Powershell-images/cmd_powershell.10.png" alt="" />
运行命令
<img src="/images/CMD_Powershell-images/cmd_powershell.11.png" alt="" />
完成处理
<img src="/images/CMD_Powershell-images/cmd_powershell.12.png" alt="" /></p>

<h3 id="24python实现相同操作">2.4.python实现相同操作</h3>

<p><img src="/images/CMD_Powershell-images/cmd_powershell.13.png" alt="" />
<img src="/images/CMD_Powershell-images/cmd_powershell.14.png" alt="" /></p>

<h2 id="3注意事项">3.注意事项</h2>

<h3 id="1文件名命名最好不要用中文和空格">1.文件名命名最好不要用中文和空格</h3>

<p>在<strong>文件路径</strong>中使用<strong>中文字符和空格</strong>可能导致路径<strong>解析错误</strong>，特别是在某些编程语言和工具中。这可能导致文件<strong>无法找到或命令无法执行</strong>，增加了开发和调试的复杂性。因此，使用英文字符和下划线等替代方式更为稳妥</p>

<h1 id="七完结"><strong>七.完结</strong></h1>

<p><strong>关于CMD与Powershell，我目前并没有使用到过多的功能，相比于ps1脚本，更多人应该更喜欢py脚本，本文也仅简要介绍ps1与bat脚本，更多的功能请自行探索</strong></p>]]></content><author><name>secrecy</name><email>verumkeys@gmail.com</email></author><category term="技术，编程" /><category term="CMD" /><category term="Powershell" /><category term="博客" /><summary type="html"><![CDATA[本篇文章演示如何从0开始使用CMD与Powershell]]></summary></entry><entry><title type="html">Git 使用教程</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/19/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" rel="alternate" type="text/html" title="Git 使用教程" /><published>2024-10-19T16:02:00+08:00</published><updated>2024-10-19T16:02:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/19/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/19/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"><![CDATA[<h1 id="一git概述"><strong>一.Git概述</strong></h1>
<p>Git 是一个分布式版本控制系统，用于管理项目中的代码变化，特别适合多人协作开发。它的主要功能包括：</p>

<ol>
  <li>
    <p><strong>版本控制</strong>：Git 可以记录代码的每一次变动，使你可以查看、比较并恢复到之前的任意版本。</p>
  </li>
  <li>
    <p><strong>分支和合并</strong>：Git 允许创建分支以开发不同的功能或修复问题。分支上的改动可以独立进行，最后再将它们合并到主分支。</p>
  </li>
  <li>
    <p><strong>分布式</strong>：与传统的版本控制系统不同，Git 是分布式的。每个开发者都有完整的项目历史，可以离线进行代码管理和提交。</p>
  </li>
  <li>
    <p><strong>协作开发</strong>：Git 很适合团队合作，支持多人并行开发。当开发者提交代码后，可以通过 pull request 合并到主项目中，确保代码的连续性和质量。</p>
  </li>
</ol>

<h3 id="git-的一些核心概念">Git 的一些核心概念：</h3>
<ul>
  <li><strong>Repository (仓库)</strong>：存储项目的文件和其历史记录的地方。可以是本地仓库或远程仓库（如 GitHub 上的仓库）。</li>
  <li><strong>Commit (提交)</strong>：一次代码变动的快照，包括改动的具体内容和提交说明。</li>
  <li><strong>Branch (分支)</strong>：并行开发的通道。每个分支都是代码历史的独立线条，可以独立于其他分支工作。</li>
  <li><strong>Merge (合并)</strong>：将一个分支上的改动合并到另一个分支。</li>
  <li><strong>Pull (拉取)</strong>：从远程仓库获取最新的更改并合并到本地分支。</li>
  <li><strong>Push (推送)</strong>：将本地仓库的更改上传到远程仓库。</li>
</ul>

<h3 id="常用命令">常用命令：</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">git init</code>：初始化一个新的 Git 仓库。</li>
  <li><code class="language-plaintext highlighter-rouge">git clone</code>：克隆远程仓库到本地。</li>
  <li><code class="language-plaintext highlighter-rouge">git status</code>：查看当前工作区的状态（有哪些改动）。</li>
  <li><code class="language-plaintext highlighter-rouge">git add</code>：将改动添加到暂存区。</li>
  <li><code class="language-plaintext highlighter-rouge">git commit -m "消息"</code>：提交暂存区的改动，并添加描述信息。</li>
  <li><code class="language-plaintext highlighter-rouge">git push</code>：将本地提交推送到远程仓库。</li>
  <li><code class="language-plaintext highlighter-rouge">git pull</code>：从远程仓库拉取更新并合并到本地分支。</li>
  <li><code class="language-plaintext highlighter-rouge">git branch</code>：查看所有分支，或创建、删除分支。</li>
  <li><code class="language-plaintext highlighter-rouge">git checkout</code>：切换到另一个分支。
通过 Git，开发者能够更好地管理代码版本，尤其是在复杂项目中，它可以极大地提高效率并减少冲突。</li>
</ul>

<h1 id="二配置git环境"><strong>二.配置Git环境</strong></h1>
<h2 id="1下载git">1.下载Git</h2>
<p>网址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a>
<img src="/images/git-images/git.1.png" alt="" />
<img src="/images/git-images/git.2.png" alt="" /></p>
<h2 id="2安装git">2.安装Git</h2>
<p>安装过程有<strong>许多</strong>步骤，<strong>一般来说</strong>全部默认即可，一路<strong>next</strong>直到<strong>install</strong>结束<br />
不一般的是我配置的是<strong>VS Code编译器</strong>，不是默认的<strong>Vim编译器</strong>，在下面可以看看两者比较<br />
下面的图是对安装过程各个步骤的解释<br />
1.可自选<strong>路径</strong>
<img src="/images/git-images/git.3.png" alt="" />
2.图中标注了选项的<strong>含义</strong>
<img src="/images/git-images/git.4.png" alt="" />
3.这个页面是询问是否希望在Windows的开始菜单，创建一个名为“Git”的文件夹，存放Git的快捷方式
<img src="/images/git-images/git.5.png" alt="" /></p>
<h3 id="21vim编辑器和vs-code编辑器对比">2.1.Vim编辑器和VS Code编辑器对比</h3>
<h4 id="1-vim-编辑器">1. Vim 编辑器：</h4>
<ul>
  <li>
    <p><strong>特点</strong>：</p>

    <ul>
      <li><strong>轻量级</strong>：Vim 是一个非常轻量级的文本编辑器，速度快且占用资源少。</li>
      <li><strong>命令行界面</strong>：运行在终端中，非常适合那些喜欢使用键盘操作的人。</li>
      <li><strong>键盘驱动</strong>：Vim 的操作主要依赖于快捷键，不使用鼠标。这使得它在熟练使用后非常高效，但初学者需要一定的学习成本。</li>
      <li><strong>跨平台</strong>：可以在任何系统上使用，包括 Windows、Linux、macOS。</li>
    </ul>
  </li>
  <li>
    <p><strong>适用人群</strong>：</p>

    <ul>
      <li>熟悉命令行操作，喜欢使用键盘而不依赖鼠标的用户。</li>
      <li>需要快速轻量的编辑器来编辑简单的文件（如 Git 提交消息）。</li>
    </ul>
  </li>
  <li>
    <p><strong>适合场景</strong>：</p>

    <ul>
      <li>如果你在终端环境下工作较多，并且已经习惯或愿意学习 Vim 的快捷键，Vim 是一个非常高效的工具。</li>
      <li>你只需要一个简洁、快速的编辑器来修改 Git 的提交信息或进行简单的代码编辑。</li>
    </ul>
  </li>
</ul>

<h4 id="2vs-code编辑器">2.VS Code编辑器：</h4>
<ul>
  <li>
    <p><strong>特点</strong>：</p>

    <ul>
      <li><strong>图形界面</strong>：VS Code 是一个现代化的图形化编辑器，提供了丰富的界面和强大的功能。</li>
      <li><strong>插件丰富</strong>：VS Code 有大量的插件可供安装，支持多种编程语言、Git 集成、调试工具等。</li>
      <li><strong>直观易用</strong>：对于初学者和熟悉图形界面操作的用户，VS Code 更加直观，使用起来更方便。</li>
      <li><strong>集成 Git</strong>：VS Code 有内置的 Git 支持，提供了友好的界面来处理 Git 操作（如提交、查看历史、冲突解决等）。</li>
    </ul>
  </li>
  <li>
    <p><strong>适用人群</strong>：</p>

    <ul>
      <li>喜欢使用功能丰富的 IDE 或 GUI 编辑器的用户。</li>
      <li>需要更强大的代码编辑、调试和扩展功能。</li>
      <li>喜欢鼠标操作或者还不太熟悉命令行操作的用户。</li>
    </ul>
  </li>
  <li>
    <p><strong>适合场景</strong>：</p>

    <ul>
      <li>你更注重编程效率，喜欢通过扩展插件和图形化界面处理 Git。</li>
      <li>你需要更多的工具支持，如代码自动补全、调试、扩展库等功能。</li>
    </ul>
  </li>
  <li>如果你<strong>熟悉命令行</strong>，需要一个轻量级、高效的编辑器，<strong>Vim</strong> 是不错的选择。</li>
  <li>如果你更喜欢<strong>图形化界面</strong>，希望使用一个功能丰富、易于扩展的编辑器，<strong>VS Code</strong> 可能更适合你，尤其是如果你在 Git 操作中经常需要进行代码修改或调试。</li>
</ul>

<h3 id="22选择编辑器">2.2.选择编辑器</h3>
<p><strong>4.这里需要选择一个默认编辑器，第一张图是默认的Vim编辑器<br />
但不要误解，不是给你下载选的编辑器，只是告诉Git需要文本编辑时默认打开哪个<br />
注意：不论你选择vim还是VS Code作为默认编辑器，都需要自己下载<br />
一般来说Git会内置一个vim编辑器，不过功能很少<br />
我已经下载了VS Code编辑器，之后的演示基本都在VS Code上进行<br />
VS Code编辑器使用Git主要用VS Code打开文件夹，进入资源管理器操作，当然也可终端使用命令</strong><br />
<del>至于Vim编辑器，我没用过并不怎么清楚</del>
<img src="/images/git-images/git.6.png" alt="" />
<strong>我选择使用VS Code编辑器，根据你的需求选择</strong>
<img src="/images/git-images/git.7.png" alt="" />
<img src="/images/git-images/git.8.png" alt="" />
<img src="/images/git-images/git.9.png" alt="" /></p>
<h3 id="23ssh介绍">2.3.SSH介绍</h3>
<p>SSH（<strong>Secure Shell</strong>）是一种用于通过不安全的网络安全登录到远程计算机的协议。它主要用于在两个系统之间建立加密的连接，以便安全地执行命令行、传输文件和进行系统管理等操作。SSH 通过加密技术，保证了传输的数据不被窃听或篡改，通常用于服务器管理和远程开发工作。</p>

<h4 id="ssh-的主要功能">SSH 的主要功能：</h4>
<ul>
  <li><strong>远程登录</strong>：可以在本地计算机上通过终端控制远程服务器。</li>
  <li><strong>文件传输</strong>：通过 <code class="language-plaintext highlighter-rouge">scp</code> 或 <code class="language-plaintext highlighter-rouge">sftp</code> 等方式在本地和远程机器之间安全地传输文件。</li>
  <li><strong>端口转发</strong>：通过 SSH 隧道实现的端口转发功能，可以把本地端口重定向到远程机器上的端口，用于保护其他通信协议的安全。</li>
</ul>

<h4 id="openssh-是什么">OpenSSH 是什么？</h4>
<p><strong>OpenSSH</strong> 是 SSH 协议的一个开源实现，广泛应用于各类操作系统中（特别是类 Unix 系统，如 Linux 和 macOS）。它不仅支持 SSH 协议本身，还包括一些相关的工具，例如：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ssh</code>：用于远程登录。</li>
  <li><code class="language-plaintext highlighter-rouge">scp</code> 和 <code class="language-plaintext highlighter-rouge">sftp</code>：用于安全地传输文件。</li>
  <li><code class="language-plaintext highlighter-rouge">ssh-agent</code> 和 <code class="language-plaintext highlighter-rouge">ssh-add</code>：用于管理 SSH 密钥和自动登录。</li>
  <li><code class="language-plaintext highlighter-rouge">sshd</code>：SSH 服务器程序，允许远程登录到本地系统。</li>
</ul>

<p>OpenSSH 是目前最常用的 SSH 实现之一，由于其开源和安全性，它在服务器管理和远程开发中被广泛使用。</p>

<p>在你的 Git 安装过程中，选择使用 <strong>OpenSSH</strong> 意味着 Git 将使用 SSH 协议来执行安全的远程操作，比如在 Git 仓库中通过 SSH 进行拉取或推送操作。</p>

<p>图中有两个选择：</p>
<ol>
  <li>
    <p><strong>Use bundled OpenSSH</strong>（使用 Git 附带的 OpenSSH）：这意味着 Git 会使用 Git 自带的 <code class="language-plaintext highlighter-rouge">ssh.exe</code>，也就是你不需要单独安装 SSH 程序，直接使用 Git 包含的版本。</p>
  </li>
  <li>
    <p><strong>Use external OpenSSH</strong>（使用外部的 OpenSSH）：这选项意味着你已经在系统中安装了 OpenSSH，Git 将使用系统中已有的 <code class="language-plaintext highlighter-rouge">ssh.exe</code>，而不是安装 Git 自己的版本。这个选择适用于你已经有外部的 OpenSSH 安装并且想用系统默认的 SSH 配置。
一般选择<strong>默认</strong>即可
7.<img src="/images/git-images/git.10.png" alt="" />8.<img src="/images/git-images/git.11.png" alt="" />
9.<img src="/images/git-images/git.12.png" alt="" />10.<img src="/images/git-images/git.14.png" alt="" />
11.<img src="/images/git-images/git.15.png" alt="" />12.<img src="/images/git-images/git.16.png" alt="" />
13.
<img src="/images/git-images/git.13.png" alt="" />
<img src="/images/git-images/git.18.png" alt="" />
15..<strong>安装完成</strong><img src="/images/git-images/git.19.png" alt="" /></p>
    <h2 id="3设置用户签名">3.设置用户签名</h2>
    <p><strong>Git首次安装必须设置用户签名，否则无法提交代码</strong>
鼠标<strong>右键</strong>点击桌面，打开<strong>Open Git Bash Here</strong>（<strong>没看到就是在更多选项</strong>）
<img src="/images/git-images/git.20.png" alt="" />
可以用命令查看版本：</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git --version
</code></pre></div>    </div>
    <p>如果觉得字体小，可以<strong>Ctrl+鼠标滚轮</strong>放大</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config --global user.name 
git config --global user.email 
</code></pre></div>    </div>
    <p>(用户名和邮箱任意设置即可，不会去查验邮箱是否真实)
<img src="/images/git-images/git.21.png" alt="" />
上述操作后，C盘的用户的用户下会生成一个.gitconfig文件，里面有你设置的用户名和邮箱
<img src="/images/git-images/git.22.png" alt="" /></p>
  </li>
</ol>

<h1 id="三编辑器常用命令"><strong>三.编辑器常用命令</strong></h1>
<h2 id="vim-编辑器常用命令">Vim 编辑器常用命令</h2>
<h3 id="1-模式切换">1. 模式切换</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">i</code>：进入插入模式（开始编辑文本）。</li>
  <li><code class="language-plaintext highlighter-rouge">Esc</code>：退出插入模式，回到普通模式。</li>
  <li><code class="language-plaintext highlighter-rouge">:q</code>：退出 Vim。</li>
  <li><code class="language-plaintext highlighter-rouge">:w</code>：保存文件。</li>
  <li><code class="language-plaintext highlighter-rouge">:wq</code>：保存并退出。</li>
  <li><code class="language-plaintext highlighter-rouge">:q!</code>：强制退出（不保存修改）。</li>
  <li><code class="language-plaintext highlighter-rouge">:x</code>：保存并退出（与 <code class="language-plaintext highlighter-rouge">:wq</code> 类似）。</li>
</ul>

<h3 id="2-文件操作">2. 文件操作</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">vim filename</code>：打开文件，若文件不存在则新建文件。</li>
  <li><code class="language-plaintext highlighter-rouge">:e filename</code>：打开其他文件。</li>
  <li><code class="language-plaintext highlighter-rouge">:w filename</code>：另存为指定文件名。</li>
</ul>

<h3 id="3-移动光标">3. 移动光标</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">h</code>：向左移动一个字符。</li>
  <li><code class="language-plaintext highlighter-rouge">j</code>：向下移动一行。</li>
  <li><code class="language-plaintext highlighter-rouge">k</code>：向上移动一行。</li>
  <li><code class="language-plaintext highlighter-rouge">l</code>：向右移动一个字符。</li>
  <li><code class="language-plaintext highlighter-rouge">gg</code>：移动到文件开头。</li>
  <li><code class="language-plaintext highlighter-rouge">G</code>：移动到文件末尾。</li>
  <li><code class="language-plaintext highlighter-rouge">w</code>：移动到下一个单词的开头。</li>
  <li><code class="language-plaintext highlighter-rouge">b</code>：移动到上一个单词的开头。</li>
</ul>

<h3 id="4-文本编辑">4. 文本编辑</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">x</code>：删除光标下的字符。</li>
  <li><code class="language-plaintext highlighter-rouge">dd</code>：删除当前行。</li>
  <li><code class="language-plaintext highlighter-rouge">yy</code>：复制当前行。</li>
  <li><code class="language-plaintext highlighter-rouge">p</code>：粘贴。</li>
  <li><code class="language-plaintext highlighter-rouge">u</code>：撤销上一步操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + r</code>：重做上一步操作。</li>
</ul>

<h3 id="5-查找和替换">5. 查找和替换</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/keyword</code>：查找 <code class="language-plaintext highlighter-rouge">keyword</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">n</code>：跳到下一个匹配项。</li>
  <li><code class="language-plaintext highlighter-rouge">N</code>：跳到上一个匹配项。</li>
  <li><code class="language-plaintext highlighter-rouge">:%s/old/new/g</code>：全局替换 <code class="language-plaintext highlighter-rouge">old</code> 为 <code class="language-plaintext highlighter-rouge">new</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">:n,m s/old/new/g</code>：从第 <code class="language-plaintext highlighter-rouge">n</code> 行到第 <code class="language-plaintext highlighter-rouge">m</code> 行替换 <code class="language-plaintext highlighter-rouge">old</code> 为 <code class="language-plaintext highlighter-rouge">new</code>。</li>
</ul>

<hr />

<h2 id="vs-code-编辑器常用命令">VS Code 编辑器常用命令</h2>

<h3 id="1-基础命令">1. 基础命令</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + P</code> / <code class="language-plaintext highlighter-rouge">Cmd + P</code>：快速打开文件（输入文件名）。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + N</code> / <code class="language-plaintext highlighter-rouge">Cmd + N</code>：新建文件。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + S</code> / <code class="language-plaintext highlighter-rouge">Cmd + S</code>：保存文件。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + Shift + S</code> / <code class="language-plaintext highlighter-rouge">Cmd + Shift + S</code>：另存为。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + W</code> / <code class="language-plaintext highlighter-rouge">Cmd + W</code>：关闭当前文件。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + Shift + P</code> / <code class="language-plaintext highlighter-rouge">Cmd + Shift + P</code>：打开命令面板。</li>
</ul>

<h3 id="2-导航">2. 导航</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + Tab</code> / <code class="language-plaintext highlighter-rouge">Cmd + Tab</code>：切换打开的文件。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + G</code> / <code class="language-plaintext highlighter-rouge">Cmd + G</code>：跳转到指定行号。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + Shift + O</code> / <code class="language-plaintext highlighter-rouge">Cmd + Shift + O</code>：按符号（函数/类名）跳转。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + T</code> / <code class="language-plaintext highlighter-rouge">Cmd + T</code>：搜索并跳转到符号。</li>
</ul>

<h3 id="3-编辑">3. 编辑</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + Z</code> / <code class="language-plaintext highlighter-rouge">Cmd + Z</code>：撤销。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + Shift + Z</code> / <code class="language-plaintext highlighter-rouge">Cmd + Shift + Z</code>：重做。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + X</code> / <code class="language-plaintext highlighter-rouge">Cmd + X</code>：剪切。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + C</code> / <code class="language-plaintext highlighter-rouge">Cmd + C</code>：复制。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + V</code> / <code class="language-plaintext highlighter-rouge">Cmd + V</code>：粘贴。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + /</code> / <code class="language-plaintext highlighter-rouge">Cmd + /</code>：注释/取消注释当前行。</li>
  <li><code class="language-plaintext highlighter-rouge">Alt + Up</code> / <code class="language-plaintext highlighter-rouge">Option + Up</code>：上移当前行。</li>
  <li><code class="language-plaintext highlighter-rouge">Alt + Down</code> / <code class="language-plaintext highlighter-rouge">Option + Down</code>：下移当前行。</li>
</ul>

<h3 id="4-多光标编辑">4. 多光标编辑</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Alt + Click</code> / <code class="language-plaintext highlighter-rouge">Option + Click</code>：添加光标。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + Alt + Down</code> / <code class="language-plaintext highlighter-rouge">Cmd + Option + Down</code>：向下添加光标。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + Alt + Up</code> / <code class="language-plaintext highlighter-rouge">Cmd + Option + Up</code>：向上添加光标。</li>
</ul>

<h3 id="5-代码格式化和调试">5. 代码格式化和调试</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Shift + Alt + F</code> / <code class="language-plaintext highlighter-rouge">Shift + Option + F</code>：格式化代码。</li>
  <li><code class="language-plaintext highlighter-rouge">F5</code>：启动/继续调试。</li>
  <li><code class="language-plaintext highlighter-rouge">F9</code>：设置/取消断点。</li>
  <li><code class="language-plaintext highlighter-rouge">F10</code>：逐过程调试。</li>
  <li><code class="language-plaintext highlighter-rouge">F11</code>：逐语句调试。</li>
</ul>

<h3 id="6-搜索和替换">6. 搜索和替换</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + F</code> / <code class="language-plaintext highlighter-rouge">Cmd + F</code>：查找。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + H</code> / <code class="language-plaintext highlighter-rouge">Cmd + H</code>：替换。</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + Shift + F</code> / <code class="language-plaintext highlighter-rouge">Cmd + Shift + F</code>：全局搜索。</li>
</ul>

<hr />

<h2 id="总结">总结</h2>

<ul>
  <li><strong>Vim</strong> 的命令主要围绕键盘快捷键，操作高效但学习曲线较陡。</li>
  <li><strong>VS Code</strong> 则更偏向图形化操作，并提供命令面板，既支持鼠标操作也支持丰富的键盘快捷键，更加适合现代开发者的多任务操作。</li>
</ul>

<h1 id="四git常用命令"><strong>四.Git常用命令</strong></h1>

<h2 id="1-基本-git-操作">1. 基本 Git 操作</h2>

<h3 id="11-初始化仓库">1.1. 初始化仓库</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git init</code>：初始化一个新的 Git 仓库。
    <h3 id="12-克隆仓库">1.2. 克隆仓库</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git clone [url]</code>：从远程仓库克隆项目。
    <h3 id="13-查看状态">1.3. 查看状态</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git status</code>：查看当前文件状态，包括未跟踪的文件、修改文件、暂存文件等。
    <h3 id="14-添加文件到暂存区">1.4. 添加文件到暂存区</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git add [filename]</code>：将单个文件添加到暂存区。</li>
  <li><code class="language-plaintext highlighter-rouge">git add .</code>：将当前目录下所有更改添加到暂存区。
    <h3 id="15-提交更改">1.5. 提交更改</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git commit -m "[message]"</code>：提交暂存区中的更改，并附加提交信息。</li>
  <li><code class="language-plaintext highlighter-rouge">git commit -a -m "[message]"</code>：将已跟踪文件的更改自动暂存并提交（不包括新文件）。
    <h3 id="16-查看提交历史">1.6. 查看提交历史</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git log</code>：查看提交历史。</li>
  <li><code class="language-plaintext highlighter-rouge">git log --oneline</code>：以简短的形式查看提交历史。
    <h3 id="17-查看差异">1.7. 查看差异</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git diff</code>：查看工作区和暂存区的文件差异。</li>
  <li><code class="language-plaintext highlighter-rouge">git diff --staged</code>：查看已暂存文件的差异。</li>
</ul>

<hr />

<h2 id="2-分支操作">2. 分支操作</h2>

<h3 id="21-查看分支">2.1. 查看分支</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git branch</code>：查看本地分支列表。
    <h3 id="22-创建新分支">2.2. 创建新分支</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git branch [branch-name]</code>：创建一个新的分支。
    <h3 id="23-切换分支">2.3. 切换分支</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git checkout [branch-name]</code>：切换到指定分支。</li>
  <li><code class="language-plaintext highlighter-rouge">git switch [branch-name]</code>：切换分支的更现代命令。
    <h3 id="24-创建并切换分支">2.4. 创建并切换分支</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git checkout -b [branch-name]</code>：创建并切换到新分支。</li>
  <li><code class="language-plaintext highlighter-rouge">git switch -c [branch-name]</code>：新版本的等效命令。
    <h3 id="25-合并分支">2.5. 合并分支</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git merge [branch-name]</code>：将指定分支合并到当前分支。
    <h3 id="26-删除分支">2.6. 删除分支</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git branch -d [branch-name]</code>：删除分支（若该分支的更改已被合并）。</li>
  <li>
    <h2 id="git-branch--d-branch-name强制删除分支即使未合并"><code class="language-plaintext highlighter-rouge">git branch -D [branch-name]</code>：强制删除分支（即使未合并）。</h2>
  </li>
</ul>

<h2 id="3-远程操作">3. 远程操作</h2>

<h3 id="31-查看远程仓库">3.1. 查看远程仓库</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git remote -v</code>：查看远程仓库地址。
    <h3 id="32-添加远程仓库">3.2. 添加远程仓库</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git remote add [name] [url]</code>：添加远程仓库。
    <h3 id="33-推送到远程仓库">3.3. 推送到远程仓库</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git push [remote] [branch]</code>：将本地分支推送到远程仓库。</li>
  <li><code class="language-plaintext highlighter-rouge">git push -u [remote] [branch]</code>：设置默认推送的上游分支，并推送。
    <h3 id="34-拉取远程仓库的更改">3.4. 拉取远程仓库的更改</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git pull</code>：从远程仓库拉取并合并更改。
    <h3 id="35-从远程仓库获取更新">3.5. 从远程仓库获取更新</h3>
  </li>
  <li>
    <h2 id="git-fetch从远程仓库获取更改但不自动合并"><code class="language-plaintext highlighter-rouge">git fetch</code>：从远程仓库获取更改，但不自动合并。</h2>
  </li>
</ul>

<h2 id="4-撤销更改">4. 撤销更改</h2>

<h3 id="41-取消文件暂存">4.1. 取消文件暂存</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git reset HEAD [filename]</code>：将文件从暂存区移除，但保留工作区的更改。
    <h3 id="42-撤销文件修改">4.2. 撤销文件修改</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git checkout -- [filename]</code>：撤销工作区的修改，恢复到上一次提交的状态。
    <h3 id="43-重置到特定提交">4.3. 重置到特定提交</h3>
  </li>
  <li>
    <h2 id="git-reset---hard-commit重置当前分支到指定的提交并丢弃之后的更改"><code class="language-plaintext highlighter-rouge">git reset --hard [commit]</code>：重置当前分支到指定的提交，并丢弃之后的更改。</h2>
  </li>
</ul>

<h2 id="5-标签操作">5. 标签操作</h2>

<h3 id="51-创建标签">5.1. 创建标签</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git tag [tag-name]</code>：创建一个轻量标签。</li>
  <li><code class="language-plaintext highlighter-rouge">git tag -a [tag-name] -m "[message]"</code>：创建带注释的标签。
    <h3 id="52-查看标签">5.2. 查看标签</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git tag</code>：列出所有标签。
    <h3 id="53-推送标签到远程仓库">5.3. 推送标签到远程仓库</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git push origin [tag-name]</code>：推送单个标签。</li>
  <li>
    <h2 id="git-push-origin---tags推送所有标签"><code class="language-plaintext highlighter-rouge">git push origin --tags</code>：推送所有标签。</h2>
  </li>
</ul>

<h2 id="6-其他有用命令">6. 其他有用命令</h2>

<h3 id="61-清理未跟踪的文件">6.1. 清理未跟踪的文件</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git clean -f</code>：删除未跟踪的文件。
    <h3 id="62-查看全局配置">6.2. 查看全局配置</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git config --list</code>：查看所有 Git 配置信息。
    <h3 id="63-设置全局用户名和邮箱">6.3. 设置全局用户名和邮箱</h3>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git config --global user.name "[name]"</code>：设置用户名。</li>
  <li><code class="language-plaintext highlighter-rouge">git config --global user.email "[email]"</code>：设置邮箱。</li>
</ul>

<h1 id="五git-bash使用示范">五.Git Bash使用示范</h1>
<h2 id="1初始化本地库">1.初始化本地库</h2>
<h3 id="11创建文件打开git-bash">1.1.创建文件，打开Git Bash</h3>
<p><img src="/images/git-images/git.23.png" alt="" /></p>
<h3 id="12使用命令git-init">1.2.使用命令git init</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div>
<p><img src="/images/git-images/git.24.png" alt="" /></p>
<h2 id="2查看本地库状态">2.查看本地库状态</h2>
<p>使用命令：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git status
</code></pre></div></div>
<p><img src="/images/git-images/git.25.png" alt="" /></p>
<h2 id="3创建项目">3.创建项目</h2>
<h3 id="31使用vim创建文件">3.1.使用vim创建文件</h3>
<p><img src="/images/git-images/git.26.png" alt="" />
<img src="/images/git-images/git.27.png" alt="" />
<img src="/images/git-images/git.28.png" alt="" />
<strong>其实直接用VS Code打开文件，在终端使用命令与在Git Bash中使用命令没什么区别
后面使用Git的方式我都在VS Code中去介绍，如果你喜欢使用Git Bsh，恕我精力有限，后面不再用到Git Bash了，但会演示在VS Code终端运行相同的命令，其实是一样的</strong></p>

<h1 id="六vs-code中使用git"><strong>六.VS Code中使用Git</strong></h1>
<h2 id="1安装插件">1.安装插件</h2>
<h3 id="1markdownlint-插件">1.markdownlint 插件</h3>
<p><img src="/images/git-images/git.29.png" alt="" /></p>
<h4 id="功能介绍">功能介绍</h4>

<ul>
  <li><strong>自动检测格式问题</strong>：Markdownlint 可以自动检查 Markdown 文件中的格式问题，确保文档符合标准规范。它会提供即时反馈，帮助你在编辑时快速识别和修复潜在的错误。</li>
  <li><strong>自定义规则</strong>：你可以根据项目需求配置自定义的检查规则，以适应不同的文档风格和要求。</li>
  <li><strong>集成到工作流中</strong>：Markdownlint 与 VS Code 紧密集成，提供实时反馈，让你在撰写文档时无缝管理格式，提升文档质量。
    <h3 id="2git-graph-插件">2.Git Graph 插件</h3>
    <p><img src="/images/git-images/git.30.png" alt="" /></p>
    <h4 id="功能介绍-1">功能介绍</h4>
  </li>
  <li><strong>可视化 Git 历史</strong>：Git Graph 提供直观的图形界面，展示 Git 仓库的提交历史、分支、合并情况，帮助你快速理解代码的演变和分支结构。</li>
  <li><strong>便捷操作</strong>：通过图形化界面，你可以方便地创建和切换分支、提交更改、查看提交差异、解决冲突等，无需输入命令行。</li>
  <li><strong>增强的代码审查体验</strong>：通过可视化展示，Git Graph 使得团队成员可以更轻松地进行代码审查和协作，提高团队开发效率。
    <h2 id="2使用vs-code创建项目">2.使用VS Code创建项目</h2>
    <h3 id="21打开终端">2.1.打开终端</h3>
    <p><strong>快捷键：Crtl+反引号
(反引号是在此是特殊符号，我就不打出了)</strong>
使用命令初始化仓库：</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div>    </div>
    <p><img src="/images/git-images/git.31.png" alt="" /></p>
    <h3 id="22新建文件">2.2.新建文件</h3>
    <p><img src="/images/git-images/git.32.png" alt="" /></p>
    <h3 id="23提交到暂存区并添加到本地库">2.3.提交到暂存区并添加到本地库</h3>
    <h4 id="方法一使用终端操作">方法一(使用终端操作)</h4>
    <h5 id="1提交到暂存区">1.提交到暂存区</h5>
    <p>在<strong>终端</strong>输入命令</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add hello.txt # 添加单个文件 
git add .         # 添加当前目录下所有文件
</code></pre></div>    </div>
    <h5 id="1添加到本地库">1.添加到本地库</h5>
    <p>在<strong>终端</strong>输入命令</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit -m "first commit" hello.txt
</code></pre></div>    </div>
    <p><img src="/images/git-images/git.33.png" alt="" /></p>
    <h4 id="方法二使用源代码管理">方法二(使用源代码管理)</h4>
    <p><strong>快捷键:Ctrl Shitf G G</strong>
也可在左侧栏点击打开
<img src="/images/git-images/git.34.png" alt="" />
<img src="/images/git-images/git.35.png" alt="" /></p>
    <h3 id="24修改文件">2.4.修改文件</h3>
    <p><strong>直接修改对应的文件就行了，修改完再暂存提交</strong>
<img src="/images/git-images/git.36.png" alt="" /><img src="/images/git-images/git.37.png" alt="" /></p>
    <h3 id="25切换到不同的提交">2.5.切换到不同的提交</h3>
    <p>你每提交一次，都会生成一个哈希值，也可以理解为一个版本对应一个版本号</p>
    <h4 id="2-git-reset-hash">2. <strong><code class="language-plaintext highlighter-rouge">git reset &lt;hash&gt;</code></strong></h4>
  </li>
  <li><strong>作用</strong>：<code class="language-plaintext highlighter-rouge">git reset &lt;hash&gt;</code> 用于将当前分支的 HEAD（指向当前分支最新提交的指针）重置为指定的提交。</li>
  <li><strong>状态变化</strong>：这会改变分支的历史记录（对于非共享分支），并且根据所用的选项（如 <code class="language-plaintext highlighter-rouge">--soft</code>、<code class="language-plaintext highlighter-rouge">--mixed</code> 或 <code class="language-plaintext highlighter-rouge">--hard</code>），会影响索引和工作目录的状态：
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">--soft</code></strong>：仅重置 HEAD，索引和工作目录保持不变。</li>
      <li><strong><code class="language-plaintext highlighter-rouge">--mixed</code></strong>（默认）：重置 HEAD 和索引，工作目录保持不变。</li>
      <li><strong><code class="language-plaintext highlighter-rouge">--hard</code></strong>：重置 HEAD、索引和工作目录，将所有更改丢弃。
<img src="/images/git-images/git.38.png" alt="" />
<img src="/images/git-images/git.39.png" alt="" />
        <h3 id="26使用分支">2.6.使用分支</h3>
        <p>接下来的操作可以使用在<strong>终端</strong>使用<strong>命令</strong>创建，也可以使用<strong>源代码管理</strong>里的图形界面
使用的相关命令可见上文 <strong>五.Git常用命令</strong> 的 <strong>2.分支操作</strong> 
<img src="/images/git-images/git.40.png" alt="" /></p>
        <h3 id="27合并分支">2.7.合并分支</h3>
        <h4 id="271在新建的分支里的文件做出修改并提交">2.7.1.在新建的分支里的文件做出修改并提交</h4>
        <p><strong>注意：合并时要到你想合并到的那个分支下，而不是在你修改内容的分支下
如图上面搜索栏，点master合并并没有效果</strong>
<img src="/images/git-images/git.41.png" alt="" /></p>
        <h4 id="271返回需要合并到的分支进行合并">2.7.1.返回需要合并到的分支进行合并</h4>
        <p>可以使用命令</p>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout 分支名
</code></pre></div>        </div>
        <p><img src="/images/git-images/git.42.png" alt="" />
选择你需要的合并的分支就能完成合并了
<img src="/images/git-images/git.43.png" alt="" /></p>
        <h2 id="3使用代码托管平台github">3.使用代码托管平台（GitHub）</h2>
        <p>GitHub官网：<a href="https://github.com/">https://github.com/</a></p>
        <h3 id="31创建远程仓库">3.1.创建远程仓库</h3>
        <p><img src="/images/git-images/git.44.png" alt="" />
<img src="/images/git-images/git.45.png" alt="" /></p>
        <h3 id="32添加文件到远程存储库">3.2.添加文件到远程存储库</h3>
        <p><strong>注意：在VS Code中的源代码管理中的图形界面拉取或推送需要先添加远程存储库，这需要你登陆你的GitHub账号，点击添加远程存储库，会自动提示你登录</strong>
<strong>当然在终端使用命令克隆不用存储库，接下来我会演示图形界面推送，和终端中用命令拉取</strong>
<img src="/images/git-images/git.46.png" alt="" />
在上图拉取、推送里选择推送，然后选择你的仓库，就能推送成功
<img src="/images/git-images/git.47.png" alt="" />
<img src="/images/git-images/git.48.png" alt="" /></p>
        <h3 id="33从远程存储库库下载文件到本地">3.3.从远程存储库库下载文件到本地</h3>
        <p><strong>注意：下载文件不需要登陆</strong>
<strong>先创建一个存储项目的文件，再到仓库中复制Https地址</strong>
<img src="/images/git-images/git.49.png" alt="" />
<strong>使用命令克隆</strong></p>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone 地址
</code></pre></div>        </div>
        <p><img src="/images/git-images/git.50.png" alt="" /><img src="/images/git-images/git.51.png" alt="" /></p>
        <h2 id="4团队内协作">4.团队内协作</h2>
        <h3 id="41邀请协作的人">4.1.邀请协作的人</h3>
        <p>点击add people后，输入你需要邀请的人的<strong>用户名</strong>，就会生成一个<strong>邀请函(网址)</strong>
<img src="/images/git-images/git.52.png" alt="" />
将这个邀请函复制，发给你需要邀请的人
<img src="/images/git-images/git.53.png" alt="" />
然后被邀请的人把你给的邀请函输入到浏览器中，就有一个需要确认的是否加入这个项目</p>
      </li>
    </ul>
  </li>
</ul>

<p><img src="/images/git-images/git.54.png" alt="" />
被邀请人同意后，就能直接修改这个仓库，push不再需要权限
<img src="/images/git-images/git.55.png" alt="" /></p>
<h2 id="4跨团队协作">4.跨团队协作</h2>
<h3 id="41fork项目">4.1.fork项目</h3>
<p>就是把别人的仓库复制一份到自己账号下
<img src="/images/git-images/git.56.png" alt="" /></p>
<h3 id="42做出修改">4.2.做出修改</h3>
<h3 id="43发出pull请求">4.3.发出pull请求</h3>
<p>就是让别人合并你修改的部分
<img src="/images/git-images/git.57.png" alt="" />
<img src="/images/git-images/git.58.png" alt="" />
<img src="/images/git-images/git.59.png" alt="" /></p>
<h3 id="44仓库管理者同意pull请求">4.4.仓库管理者同意pull请求</h3>
<p>仓库管理者会看到一个pull request
<img src="/images/git-images/git.60.png" alt="" />
点击Merge pull request就能成功合并
<img src="/images/git-images/git.61.png" alt="" />
合并成功后内容做出修改，并且贡献者中会多出你的用户名
<img src="/images/git-images/git.62.png" alt="" /></p>
<h1 id="七完结">七.完结</h1>
<p><strong>使用VS Code管理Git项目是非常方便的，喜欢使用命令的话<br />
用VS Code提供的终端也是一样的，本文演示的地方可能一部分是用命令<br />
一部分是图形界面操作，可能看起来较为混乱，目的是想将两者都介绍一下<br />
其实专注于一者就能完成所有Git的操作，当然也可两者结合使用</strong></p>]]></content><author><name>secrecy</name><email>verumkeys@gmail.com</email></author><category term="技术，编程" /><category term="Git" /><category term="博客" /><summary type="html"><![CDATA[本篇文章演示如何从0开始使用Git]]></summary></entry><entry><title type="html">VS Code 使用教程</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/17/VS-Code%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" rel="alternate" type="text/html" title="VS Code 使用教程" /><published>2024-10-17T22:05:01+08:00</published><updated>2024-10-17T22:05:01+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/17/VS%20Code%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/17/VS-Code%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"><![CDATA[<h1 id="一下载"><strong>一.下载</strong></h1>

<h2 id="1下载vs-code">1.下载VS Code</h2>
<p>网址：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a>
<img src="/images/vscode-images/vscode.1.png" alt="" /></p>

<h1 id="二配置环境"><strong>二.配置环境</strong></h1>

<h2 id="1打开扩展">1.打开扩展</h2>
<p><img src="/images/vscode-images/vscode.2.png" alt="" /></p>

<h2 id="2安装中文包">2.安装中文包</h2>

<h3 id="21在搜索栏中搜索chinese">2.1.在搜索栏中搜索Chinese</h3>
<h3 id="22选择简体中文安装">2.2.选择简体中文安装</h3>
<h3 id="23重启">2.3.重启</h3>
<p><img src="/images/vscode-images/vscode.3.png" alt="" /></p>

<h1 id="三根据所需语言配置环境cc"><strong>三.根据所需语言配置环境（C/C++）</strong></h1>

<p><strong>不需要此语言请跳过三</strong></p>
<h2 id="1安装插件">1.安装插件</h2>
<h3 id="11cc-插件">1.1.C/C++ 插件</h3>

<ul>
  <li><strong>用途</strong>：这是由微软官方提供的插件，主要用于在 VSCode 上开发和调试 C/C++ 代码。它提供了丰富的功能来增强 C/C++ 开发的体验。</li>
  <li><strong>功能</strong>：
    <ul>
      <li>代码自动补全：帮助你快速编写代码，并提示函数、变量和类型。</li>
      <li>语法高亮：为 C/C++ 代码提供清晰的语法高亮显示。</li>
      <li>调试支持：通过 VSCode 内置的调试功能，可以使用 GDB、LLDB 或 Visual Studio 调试器来调试 C/C++ 程序。</li>
      <li>IntelliSense：通过提供自动补全、悬停信息和参数提示等功能，提高代码编写的效率。</li>
      <li>多平台支持：该插件支持在 Windows、Linux 和 macOS 平台上工作。
<img src="/images/vscode-images/vscode.4.png" alt="" /></li>
    </ul>
  </li>
</ul>

<h3 id="12cc-compile-run-插件">1.2.C/C++ Compile Run 插件</h3>

<ul>
  <li><strong>用途</strong>：该插件简化了在 VSCode 上编译和运行 C/C++ 程序的过程，特别适合需要快速测试代码的开发者。</li>
  <li><strong>功能</strong>：
    <ul>
      <li>一键编译和运行：你只需按一个快捷键（通常是 F6），就可以编译并立即运行代码，而不必手动编写终端命令。</li>
      <li>灵活的配置：你可以通过配置文件自定义编译和运行命令。</li>
      <li>适合小型项目：这个插件更适合快速测试小型 C/C++ 项目，因为它不提供完整的调试功能。
<img src="/images/vscode-images/vscode.5.png" alt="" /></li>
    </ul>
  </li>
</ul>

<h3 id="13better-c-syntax-插件">1.3.Better C++ Syntax 插件</h3>

<ul>
  <li><strong>用途</strong>：这个插件专注于改进 C++ 代码的语法高亮显示和格式化，提供比默认的 C++ 高亮显示更丰富的特性。</li>
  <li><strong>功能</strong>：
    <ul>
      <li>改进的语法高亮：为 C++ 提供更精确的语法高亮，特别是模板和更复杂的语言特性。</li>
      <li>支持现代 C++：该插件支持 C++11、C++14、C++17 等现代 C++ 标准，确保新的语言特性也能得到良好的高亮。</li>
      <li>自定义语法高亮：你可以根据自己的需求自定义 C++ 的高亮规则。
<img src="/images/vscode-images/vscode.6.png" alt="" /></li>
    </ul>
  </li>
</ul>

<h2 id="2配置开发者工具集mingw获得ucrt">2.配置开发者工具集MinGW，获得UCRT</h2>

<p>注意：UCRT是为C和C++设计的标准运行时库，通过MSYS2安装ucrt64工具链时，实际上安装了一个基于UCRT的GCC工具链(这个工具链中包括编译器(gcc,c++),链接器，库文件等)</p>
<h3 id="21下载msys2">2.1.下载MSYS2</h3>
<p>网址：<a href="https://code.visualstudio.com/docs/cpp/config-mingw">https://code.visualstudio.com/docs/cpp/config-mingw</a><br />
注：该网站是英文的，可以使用浏览器自带翻译，翻译成中文，后续配置内容在网站下也有讲解
<img src="/images/vscode-images/vscode.7.png" alt="" /></p>
<h3 id="22安装后复制网站中的命令输入">2.2.安装后复制网站中的命令输入</h3>
<p>注意：安装时碰到Enter a selection (default=all):，回车就行，网站上说的也有
<img src="/images/vscode-images/vscode.8.png" alt="" /></p>
<h3 id="23在电脑文件中找到ucrt64文件下的bin文件就在安装msys2的文件中并复制bin文件的文件地址">2.3.在电脑文件中找到ucrt64文件下的bin文件(就在安装MSYS2的文件中)，并复制bin文件的文件地址</h3>
<p><img src="/images/vscode-images/vscode.9.png" alt="" /></p>
<h3 id="24将ucrt64的bin文件地址到-windows环境变量的path路径中">2.4.将ucrt64的bin文件地址到 Windows环境变量的Path路径中</h3>
<h4 id="241在搜索栏中搜索系统环境变量并打开">2.4.1.在搜索栏中搜索系统环境变量并打开</h4>
<p><img src="/images/vscode-images/vscode.10.png" alt="" /></p>
<h4 id="242-点击环境变量在用户系统变量中选择path变量然后选择编辑">2.4.2. 点击环境变量，在用户/系统变量中，选择Path变量，然后选择编辑</h4>
<h4 id="243-点击新建将复制的文件地址复制进去最后点击确定退出">2.4.3. 点击新建，将复制的文件地址复制进去，最后点击确定退出</h4>
<h4 id="244图片演示">2.4.4.图片演示</h4>
<p><img src="/images/vscode-images/vscode.11.png" alt="" />
<img src="/images/vscode-images/vscode.12.png" alt="" />
<img src="/images/vscode-images/vscode.13.png" alt="" /></p>

<h2 id="3编写cc程序">3.编写C/C++程序</h2>

<h3 id="31创建一个文件">3.1.创建一个文件</h3>
<p><img src="/images/vscode-images/vscode.15.png" alt="" /></p>
<h3 id="32通过vscode打开你上面创建的文件">3.2.通过VScode打开你上面创建的文件</h3>
<p><img src="/images/vscode-images/vscode.16.png" alt="" /></p>
<h3 id="33创建文本文件后缀需为c或cpp再在弹出的语言选择中选择c">3.3.创建文本文件，后缀需为.c或.cpp,再在弹出的语言选择中选择c++</h3>
<p><img src="/images/vscode-images/vscode.17.png" alt="" /></p>
<h3 id="34编写代码并运行可以在终端看到输出结果">3.4.编写代码并运行，可以在终端看到输出结果</h3>
<p><img src="/images/vscode-images/vscode.18.png" alt="" /></p>
<h3 id="35设置在控制台中输出结果">3.5.设置在控制台中输出结果</h3>
<h4 id="351打开cc-compile-run的设置">3.5.1.打开C/C++ Compile Run的设置</h4>
<p><img src="/images/vscode-images/vscode.19.png" alt="" /></p>
<h4 id="352下滑勾选选项run-in-external-terminal">3.5.2.下滑勾选选项Run-in-external-terminal</h4>
<p><img src="/images/vscode-images/vscode.20.png" alt="" /></p>
<h4 id="353配置环境完成">3.5.3.配置环境完成</h4>
<p><img src="/images/vscode-images/vscode.21.png" alt="" /></p>

<h1 id="四根据所需语言配置环境python"><strong>四.根据所需语言配置环境（Python）</strong></h1>

<p><strong>不需要此语言请跳过四</strong></p>
<h2 id="1下载python解释器">1下载Python解释器</h2>
<p>网址：<a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a>
<img src="/images/vscode-images/vscode.22.png" alt="" />
<img src="/images/vscode-images/vscode.23.png" alt="" />(下面两个选项要勾上，第一个就是运行Python程序时会调用它，第二个是把它添加到系统路径，让系统可以直接调用它)</p>
<h2 id="2安装插件">2.安装插件</h2>
<h3 id="21python-插件">2.1.python 插件</h3>
<p><img src="/images/vscode-images/vscode.24.png" alt="" /></p>
<h3 id="22python的主要功能">2.2.python的主要功能</h3>
<ul>
  <li><strong>代码智能提示</strong>：提供 Python 代码的自动补全、函数参数提示、变量/函数定义跳转等功能。</li>
  <li><strong>调试支持</strong>：集成调试器，可以直接在 VS Code 中进行 Python 代码的调试，设置断点、变量监视和调用堆栈查看等。</li>
  <li><strong>代码检查</strong>：支持代码静态分析工具，如 Pylint 和 Flake8，帮助你发现代码中的潜在错误和格式问题。</li>
  <li><strong>虚拟环境和 Conda 支持</strong>：可以轻松选择和管理不同的 Python 解释器、虚拟环境或 Conda 环境。</li>
  <li><strong>Jupyter 支持</strong>：可以在 VS Code 中直接运行 Jupyter Notebooks，进行交互式的 Python 开发，特别适合数据科学工作流。</li>
  <li><strong>测试集成</strong>：支持常用的测试框架（如 unittest、pytest），便于运行和调试测试用例。
这个插件是 Python 开发者在 VS Code 中工作的基础工具，帮助进行代码编写、调试、测试和管理开发环境。
    <h3 id="23python-extension-pack-插件">2.3.Python Extension Pack 插件</h3>
    <p><img src="/images/vscode-images/vscode.26.png" alt="" /></p>
  </li>
</ul>

<h3 id="24python-extension-pack-的主要功能">2.4.Python Extension Pack 的主要功能：</h3>
<p><strong>Python Extension Pack</strong> 是为 Visual Studio Code 的 Python 开发者设计的一组插件包，包含了多个非常有用的扩展，主要包括：</p>
<ol>
  <li><strong>Python</strong> - 提供核心功能，如代码检查（linting）、调试（包括多线程和远程调试）、智能感知（IntelliSense）、代码格式化、重构、单元测试，以及用于数据科学任务的 Jupyter Notebook 支持。</li>
  <li><strong>Jinja</strong> - 提供 Jinja 模板语言的语法高亮和代码片段。</li>
  <li><strong>Django</strong> - 为 Django Web 开发添加了特定的语法和代码片段。</li>
  <li><strong>Visual Studio IntelliCode</strong> - 基于机器学习的 AI 辅助工具，帮助提供智能代码补全和建议。</li>
  <li><strong>Python Environment Manager</strong> - 帮助你在 VS Code 中查看和管理 Python 环境及其依赖包。</li>
  <li><strong>Python Docstring Generator</strong> - 辅助自动生成 Python 函数和类的文档注释。</li>
  <li><strong>Python Indent</strong> - 自动纠正 Python 代码的缩进。</li>
  <li><strong>Jupyter</strong> - 提供对 Jupyter Notebook 的支持，适用于数据科学、机器学习和科学计算等任务。</li>
</ol>

<h2 id="3编写python程序">3.编写Python程序</h2>

<h3 id="31创建一个文件-1">3.1创建一个文件</h3>
<p><img src="/images/vscode-images/vscode.15.png" alt="" /></p>
<h3 id="32通过vscode打开你上面创建的文件-1">3.2.通过VScode打开你上面创建的文件</h3>
<p><img src="/images/vscode-images/vscode.16.png" alt="" /></p>
<h3 id="33创建文本文件后缀需为py再在弹出的语言选择中选择python">3.3.创建文本文件，后缀需为.py,再在弹出的语言选择中选择python</h3>
<p><img src="/images/vscode-images/vscode.17.png" alt="" /></p>
<h3 id="34编写代码并运行可以在终端看到输出结果-1">3.4.编写代码并运行，可以在终端看到输出结果</h3>
<p><img src="/images/vscode-images/vscode.25.png" alt="" /></p>

<h1 id="五根据所需语言配置环境htmlcssjs"><strong>五.根据所需语言配置环境（HTML+CSS+JS）</strong></h1>

<p><strong>不需要此语言请跳过五</strong></p>
<h2 id="1安装插件-1">1.安装插件</h2>
<h3 id="12html-css-support-插件">1.2.HTML CSS Support 插件</h3>
<p><img src="/images/vscode-images/vscode.27.png" alt="" /></p>
<h3 id="13html-css-support的主要功能">1.3.HTML CSS Support的主要功能</h3>

<ul>
  <li>为 HTML 文件中的元素提供 CSS 类名的自动补全。你在 HTML 文件中编辑时，输入 <code class="language-plaintext highlighter-rouge">class</code> 属性时，插件会自动从项目中的 CSS 文件中获取可用的类名并建议补全。</li>
  <li>支持从链接的 CSS 文件中提取类名，还包括嵌入在 HTML 中的 <code class="language-plaintext highlighter-rouge">&lt;style&gt;</code> 标签内的样式。</li>
  <li>这有助于提高开发效率，避免拼写错误，并且能更轻松地管理和使用样式表中的 CSS 类。
这个插件非常适合在 HTML 和 CSS 开发中频繁切换的开发者。</li>
</ul>

<h3 id="14live-server-插件">1.4.Live Server 插件</h3>
<p><img src="/images/vscode-images/vscode.28.png" alt="" /></p>

<h3 id="15live-server的主要功能">1.5.Live Server的主要功能</h3>
<ul>
  <li>启动一个本地开发服务器，让你可以实时预览 HTML、CSS 和 JavaScript 文件的更改。</li>
  <li>每次保存文件时，浏览器会自动刷新页面，立即反映所做的更改（即所谓的 “热重载” 功能）。</li>
  <li>支持自定义端口、根目录等配置，适合多种开发场景。</li>
  <li>提高了开发效率，无需手动刷新浏览器，特别适合前端开发。
对于那些进行网页设计和前端开发的用户来说，这个插件非常实用。</li>
</ul>

<h3 id="16auto-rename-tag-插件">1.6.Auto Rename Tag 插件</h3>
<p><img src="/images/vscode-images/vscode.29.png" alt="" /></p>
<h3 id="17auto-rename-tag的主要功能">1.7.Auto Rename Tag的主要功能</h3>
<ul>
  <li>自动同步重命名 HTML/XML 标签。当你修改或重命名一个标签时，插件会自动更新相应的闭合标签。</li>
  <li>支持所有 HTML、XML 和相关语言中的标签。</li>
  <li>减少了手动修改闭合标签的麻烦，提高了开发效率，尤其是对嵌套标签较多的代码片段非常有用。
这个插件对写 HTML 和 XML 时特别有帮助，能有效避免遗漏或错误的闭合标签。</li>
</ul>

<h2 id="2编写html程序">2.编写HTML程序</h2>
<h3 id="21创建一个文件">2.1.创建一个文件</h3>
<h3 id="22通过vscode打开你上面创建的文件">2.2.通过VScode打开你上面创建的文件</h3>
<h3 id="23创建文本文件后缀需为html">2.3.创建文本文件，后缀需为.html</h3>
<h3 id="24编写代码鼠标右键再点击open-with-live-server">2.4.编写代码，鼠标右键再点击Open with Live Server</h3>
<p><img src="/images/vscode-images/vscode.30.png" alt="" /></p>

<p><img src="/images/vscode-images/vscode.31.png" alt="" /></p>

<h1 id="六快捷操作"><strong>六.快捷操作</strong></h1>

<h3 id="1使用编辑器操场">1.使用编辑器操场</h3>
<p>编辑器操场会提供许多快捷键的使用
<img src="/images/vscode-images/vscode.32.png" alt="" /></p>
<h3 id="2multi-cursor-editing多光标编辑">2.Multi-Cursor Editing（多光标编辑）</h3>
<p>注意：DownArrow就是键盘上的向下箭头，其它同理</p>
<h4 id="21box-selection">2.1.Box selection</h4>
<p>（选择矩形块）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Shift+Alt再拖动鼠标
</code></pre></div></div>
<p>实现选择一个矩形块
<img src="/images/vscode-images/vscode.33.png" alt="" /></p>
<h4 id="22add-a-cursor">2.2.Add a Cursor</h4>
<p>（添加光标）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Crtl+Alt+UpArrow/DownArrow(上/下箭头)
</code></pre></div></div>
<p>将向上/向下额外添加一个光标</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Alt再点击鼠标
</code></pre></div></div>
<p>可以在点击位置额外添加一个光标</p>
<h4 id="23creat-curosrs-on-all-occurences-of-a-string">2.3.Creat curosrs on all occurences of a string</h4>
<p>（选择光标所在字符串，并在字符串的所有出现处创建光标）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Crtl+Shift+L
</code></pre></div></div>
<p>选中光标所在单词的所有单词，并创建一个光标到单词尾<br />
注意：截图不显示光标，实际上每个backgroud的末尾都有一个光标，可以对这个单词进行批量操作
<img src="/images/vscode-images/vscode.34.png" alt="" /></p>
<h3 id="3line-actions行操作">3.Line Actions（行操作）</h3>
<h4 id="31copy-a-line-and-insert-it-above-or-below-the-current-postion">3.1.Copy a line and insert it above or below the current postion</h4>
<p>（复制一行到上/下一行）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Shift+Alt+UpArrow/DownArrow(上/下箭头)
</code></pre></div></div>
<p>会将光标所在行向上/下复制一行</p>
<h4 id="32move-an-entire-line-or-selection-of-lines-up-or-downloads">3.2.Move an entire line or selection of lines up or downloads</h4>
<p>（将所在行与上/下行将换位置）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Alt+UpArrow/DownArrow
</code></pre></div></div>
<h4 id="33delete-the-entire-line">3.3.Delete the entire Line</h4>
<p>（删除选中或所在行）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ctrl+Shift+K
</code></pre></div></div>
<h3 id="4rename-refactoring重命名一个类或函数名的所有字符串">4.Rename Refactoring（重命名一个类或函数名的所有字符串）</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F2
</code></pre></div></div>
<p>先选中需要重命名的函数或类的名称，再点击<strong>F2</strong>进行重命名，注意：这对不是类或函数名的字符串不起作用</p>
<h3 id="5formatting格式化代码">5.Formatting（格式化代码）</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Shift+Alt+F
</code></pre></div></div>
<p>将你的代码格式化，注意：这里的格式化不是删除的意思，而是让你的代码更规范，像是是排布很乱的代码整理的意思</p>
<h3 id="6code-folding代码折叠">6.Code Folding（代码折叠）</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ctrl+Shift+[/]
</code></pre></div></div>
<p>将代码折叠/解除折叠，就像这个笔记软件，一个大点下面的小点都可以折叠起来</p>
<h3 id="7撤销">7.撤销</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ctrl+Z
</code></pre></div></div>
<p>可以撤销到你的上一步，错删时很好用</p>

<h1 id="四命令搜索栏与其它"><strong>四.命令搜索栏与其它</strong></h1>

<h2 id="1使用命令">1.使用命令</h2>
<p>帮助里编辑器操场的上一个显示所有命令，就可以进入可输入命令搜索栏，也可以直接使用快捷键<br />
也可直接在搜索栏里输入一个&gt;进入命令搜索栏</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ctrl+Shift+P
</code></pre></div></div>
<h2 id="2更改语言">2.更改语言</h2>
<p>先<strong>Ctrl+Shift+P</strong>进入命令搜索栏，再在搜索栏中搜索语言，点击配置显示语言就能实现中英文切换
<img src="/images/vscode-images/vscode.35.png" alt="" /></p>
<h2 id="3更改字体">3.更改字体</h2>
<p><img src="/images/vscode-images/vscode.36.png" alt="" /></p>
<h2 id="4快捷键参考">4.快捷键参考</h2>
<p><img src="/images/vscode-images/vscode.37.png" alt="" /></p>

<h1 id="七完结"><strong>七.完结</strong></h1>

<p><strong>根据上述操作，就能正常使用VS Code<br />
VS Code还能方便的管理Git项目，详情请见介绍Git的文章</strong></p>]]></content><author><name>secrecy</name><email>verumkeys@gmail.com</email></author><category term="技术，编程" /><category term="VS Code" /><category term="博客" /><summary type="html"><![CDATA[本篇文章演示如何从0开始使用VS Code]]></summary></entry><entry><title type="html">Jekyll 使用教程</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/17/Jekyll%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" rel="alternate" type="text/html" title="Jekyll 使用教程" /><published>2024-10-17T19:05:01+08:00</published><updated>2024-10-17T19:05:01+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/17/Jekyll%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF%EF%BC%8C%E7%BC%96%E7%A8%8B/2024/10/17/Jekyll%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"><![CDATA[<h1 id="简介"><strong>简介</strong></h1>
<p>本文使用Jekyll来搭建静态网站，并通过Github Pages实现访问<br />
作者实现的静态网站：<a href="https://verumkey.github.io">verumkey.github.io</a><br />
项目仓库：<a href="https://github.com/Verumkey/verumkey.github.io">https://github.com/Verumkey/verumkey.github.io</a><br />
Jekyll官方文档：<a href="https://jekyllrb.com/docs/">https://jekyllrb.com/docs/</a></p>

<h1 id="jekyll概述"><strong>Jekyll概述</strong></h1>

<p>Jekyll 是一个静态网站生成器，专为博客和文档类网站设计，广泛用于 GitHub Pages。它的主要特点是将 Markdown、Liquid 模板和静态文件（如 CSS、JavaScript、图片等）转化为完整的 HTML 静态页面。因为生成的是静态页面，Jekyll 网站速度快、安全性高，且不需要数据库支持。</p>

<h2 id="jekyll-的工作原理">Jekyll 的工作原理：</h2>

<ol>
  <li><strong>Markdown 文件</strong>：你撰写的内容通常以 Markdown 格式保存，它是一种简单的标记语言，易于编写和阅读。</li>
  <li><strong>模板（Layout）和组件（Includes）</strong>：Jekyll 使用 Liquid 模板引擎（由 Shopify 开发），允许你创建可复用的 HTML 模板和组件来组织页面结构，比如头部、脚部等。</li>
  <li><strong>静态文件</strong>：除了内容和模板，Jekyll 还会处理所有静态资源，比如 CSS、JS 和图片。</li>
  <li><strong>生成 HTML</strong>：运行 Jekyll 时，它会读取这些内容并结合模板生成静态 HTML 文件，最终输出一个可直接部署的网站。</li>
</ol>

<h2 id="jekyll-的特点">Jekyll 的特点：</h2>

<ul>
  <li><strong>易于部署</strong>：你可以将 Jekyll 站点托管在 GitHub Pages 上，GitHub 会自动帮你运行 Jekyll，并生成你的网站。</li>
  <li><strong>支持 Markdown</strong>：方便编写内容，尤其是对于写作博客或技术文档。</li>
  <li><strong>无数据库需求</strong>：Jekyll 不需要数据库支持，所有内容都以文件形式存储，速度更快，适合小型或中型网站。</li>
  <li><strong>插件支持</strong>：Jekyll 允许用户通过插件扩展功能，比如添加搜索、自动标签生成等。</li>
</ul>

<h2 id="基本使用步骤">基本使用步骤：</h2>

<ol>
  <li><strong>安装 Jekyll</strong>：通过 Ruby 安装。命令是 <code class="language-plaintext highlighter-rouge">gem install jekyll bundler</code>。</li>
  <li><strong>创建新站点</strong>：运行命令 <code class="language-plaintext highlighter-rouge">jekyll new my-site</code> 创建一个新项目。</li>
  <li><strong>启动开发服务器</strong>：进入站点文件夹后，运行 <code class="language-plaintext highlighter-rouge">jekyll serve</code> 启动本地服务器，Jekyll 会自动编译文件并提供本地预览。</li>
  <li><strong>配置 <code class="language-plaintext highlighter-rouge">_config.yml</code></strong>：通过配置文件定制站点，比如设置站点标题、描述、URL、主题等/</li>
  <li><strong>添加内容</strong>：在 <code class="language-plaintext highlighter-rouge">_posts</code> 文件夹中添加新的 Markdown 文件，即可发布新的博客文章或页面。</li>
</ol>

<h1 id="一在windows上配置jekyll"><strong>一.在Windows上配置Jekyll</strong></h1>

<h2 id="1安装ruby和devkit">1.安装Ruby和DevKit</h2>
<p>网址：<a href="https://rubyinstaller.org/downloads/">https://rubyinstaller.org/downloads/</a>
<img src="/images/Jekyll-images/jekyll.1.png" alt="" /></p>
<h2 id="2安装bundler和jekyll">2.安装Bundler和Jekyll</h2>
<p>在命令行或终端输入：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install bundler jekyll
</code></pre></div></div>
<p><img src="/images/Jekyll-images/jekyll.2.png" alt="" /></p>
<h1 id="二创建jekyll网站项目"><strong>二.创建Jekyll网站项目</strong></h1>
<h2 id="1创建一个存放项目的文件">1.创建一个存放项目的文件</h2>
<p><img src="/images/Jekyll-images/jekyll.3.png" alt="" /></p>
<h2 id="2创建一个jekyll网站项目">2.创建一个Jekyll网站项目</h2>
<h3 id="21使用cd命令进入你上面创建的文件的目录下">2.1.使用cd命令进入你上面创建的文件的目录下</h3>
<p><strong>注意：如果你使用的是cmd,要先切换盘符</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D：
cd "D:\Work\My-Website"
</code></pre></div></div>
<h3 id="22输入命令jekyll-new-文件名">2.2.输入命令：jekyll new 文件名</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll new my-website
</code></pre></div></div>
<h3 id="23进入创建的文件安装项目依赖">2.3.进入创建的文件安装项目依赖</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd my-website
bundle install
</code></pre></div></div>
<h3 id="24运行本地服务器以预览网站">2.4.运行本地服务器以预览网站</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle exec jekyll serve
</code></pre></div></div>
<h3 id="25图片演示">2.5.图片演示</h3>
<p><img src="/images/Jekyll-images/jekyll.4.png" alt="" />
<img src="/images/Jekyll-images/jekyll.5.png" alt="" />
<strong>这就是一个静态网站</strong>
<img src="/images/Jekyll-images/jekyll.6.png" alt="" /></p>
<h3 id="25编辑脚本快速打开">2.5.编辑脚本快速打开</h3>
<p>每次浏览Jekyll网站时，都需要<strong>重新运行</strong>budle exec jekyll serve命令，以此启动一个本地的<strong>开发服务器</strong>，使你能够在浏览器中访问你的<strong>网站</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D:
cd "D:\Work\My-Website\my-website"
bundle exec jekyll serve
</code></pre></div></div>
<p><img src="/images/Jekyll-images/jekyll.7.png" alt="" /></p>
<h1 id="三在github上配置静态网站"><strong>三.在GitHub上配置静态网站</strong></h1>
<h2 id="1创建仓库">1.创建仓库</h2>
<p><img src="/images/Jekyll-images/jekyll.8.png" alt="" />
<strong>GitHub 对静态网页托管的特殊规则决定了你的个人或组织站点的仓库名必须为</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用户名.github.io
</code></pre></div></div>
<p><img src="/images/Jekyll-images/jekyll.9.png" alt="" /></p>
<h3 id="规定由来">规定由来</h3>
<p>GitHub 对静态网页托管的特殊规则决定了你的个人或组织站点的仓库名必须为 <code class="language-plaintext highlighter-rouge">用户名.github.io</code>。这是因为 GitHub Pages 在为个人或组织提供顶级域名托管时，需要使用固定的命名约定。具体原因如下：</p>

<h4 id="1-唯一识别的顶级域名">1. <strong>唯一识别的顶级域名</strong>：</h4>

<p>个人或组织级的 GitHub Pages 网站会使用特定的顶级域名，形式为 <code class="language-plaintext highlighter-rouge">https://用户名.github.io</code>。GitHub 通过仓库名匹配该域名来提供唯一的托管地址。</p>

<ul>
  <li>例如，如果你的 GitHub 用户名是 <code class="language-plaintext highlighter-rouge">exampleuser</code>，那么 GitHub Pages 会自动把 <code class="language-plaintext highlighter-rouge">exampleuser.github.io</code> 解析为你 <code class="language-plaintext highlighter-rouge">exampleuser.github.io</code> 仓库中的内容。这个仓库名直接与该域名绑定，便于 GitHub 自动识别和生成网站。</li>
</ul>

<h4 id="2-自动部署机制">2. <strong>自动部署机制</strong>：</h4>

<p>GitHub Pages 自动识别带有 <code class="language-plaintext highlighter-rouge">.github.io</code> 后缀的仓库名，并将其视为用户的顶级个人或组织站点。当你提交代码到这个仓库时，GitHub Pages 的服务会立即自动触发站点的构建和部署过程。</p>

<p>如果你的仓库名是其他的，比如 <code class="language-plaintext highlighter-rouge">my-website</code>，虽然它也可以用来生成 GitHub Pages 网站，但它只能通过二级域名访问，例如 <code class="language-plaintext highlighter-rouge">https://用户名.github.io/my-website/</code>，而不是直接的 <code class="language-plaintext highlighter-rouge">用户名.github.io</code>。</p>

<h4 id="3-区别于项目页面">3. <strong>区别于项目页面</strong>：</h4>

<p>GitHub Pages 支持两种类型的站点：</p>

<ul>
  <li><strong>用户/组织页面</strong>：这种站点与 GitHub 用户名直接相关，域名是 <code class="language-plaintext highlighter-rouge">用户名.github.io</code>，并且仓库名必须为 <code class="language-plaintext highlighter-rouge">用户名.github.io</code>。</li>
  <li><strong>项目页面</strong>：你可以为 GitHub 中的任何项目创建页面，域名格式为 <code class="language-plaintext highlighter-rouge">https://用户名.github.io/项目名</code>。项目页面的仓库名没有强制要求。</li>
</ul>

<p>通过强制 <code class="language-plaintext highlighter-rouge">用户名.github.io</code> 这样的仓库命名规则，GitHub Pages 可以清楚区分个人/组织站点与项目站点，并将它们映射到不同的 URL 上。</p>

<p>因此，要求个人或组织网站的仓库名必须是 <code class="language-plaintext highlighter-rouge">用户名.github.io</code>，是为了确保每个用户或组织都有一个唯一且固定的顶级域名来展示其内容，并简化自动部署和解析流程。</p>
<h2 id="2配置jekyll">2.配置Jekyll</h2>
<h3 id="21启用github-action">2.1.启用GitHub Action</h3>
<p><img src="/images/Jekyll-images/jekyll.10.png" alt="" /></p>
<h3 id="22github-action介绍">2.2.GitHub Action介绍</h3>

<p>GitHub Actions 是 GitHub 提供的一项持续集成（CI）和持续交付（CD）服务，允许你在 GitHub 仓库中自动执行各种任务和工作流。它让你能够编写、共享和执行自动化流程，以便在代码提交时执行测试、构建、部署等操作。</p>

<h4 id="核心功能">核心功能：</h4>

<ol>
  <li>
    <p><strong>自动化工作流</strong>：GitHub Actions 允许你定义一系列自动化任务（称为 “工作流”），这些工作流可以在特定事件（如代码推送、Pull Request、Issue 创建等）发生时触发。</p>
  </li>
  <li>
    <p><strong>持续集成和持续交付</strong>：它可以用来自动化测试、构建和发布代码。例如，每当你推送代码到 GitHub 时，GitHub Actions 可以自动运行单元测试、构建项目，甚至将应用部署到服务器上。</p>
  </li>
  <li>
    <p><strong>灵活性与可扩展性</strong>：GitHub Actions 允许你根据自己的需求，灵活地定义自定义工作流。工作流是通过 YAML 文件定义的，存储在仓库的 <code class="language-plaintext highlighter-rouge">.github/workflows/</code> 目录中。你可以使用 GitHub 自带的动作（Actions）或创建自定义的动作。</p>
  </li>
</ol>

<h4 id="github-actions-的基本概念">GitHub Actions 的基本概念：</h4>

<ol>
  <li>
    <p><strong>工作流（Workflow）</strong>：</p>

    <ul>
      <li>工作流是由一系列自动化任务组成的。它们是 GitHub Actions 的核心，用来定义你想自动化的过程。工作流文件使用 YAML 语法编写，放置在 <code class="language-plaintext highlighter-rouge">.github/workflows/</code> 目录下。</li>
      <li>每个工作流可以根据事件（如代码提交、Pull Request 等）被触发。</li>
    </ul>
  </li>
  <li>
    <p><strong>事件（Event）</strong>：</p>

    <ul>
      <li>事件是触发工作流的特定动作，比如代码的 <code class="language-plaintext highlighter-rouge">push</code>、<code class="language-plaintext highlighter-rouge">pull_request</code>，创建 Issue，或者手动触发。</li>
      <li>例如，当你推送代码时，可以触发一个测试工作流，确保新代码不会破坏现有功能。</li>
    </ul>
  </li>
  <li>
    <p><strong>任务（Job）</strong>：</p>

    <ul>
      <li>工作流由一个或多个任务组成。每个任务可以在不同的虚拟机环境（例如 Ubuntu、macOS 或 Windows）上运行，并且任务可以并行或按顺序执行。</li>
    </ul>
  </li>
  <li>
    <p><strong>步骤（Step）</strong>：</p>

    <ul>
      <li>每个任务由多个步骤组成。步骤是在运行环境中执行的单个命令或操作。可以使用现有的 Actions 或者在步骤中编写自定义的 Shell 脚本。</li>
    </ul>
  </li>
  <li>
    <p><strong>动作（Action）</strong>：</p>

    <ul>
      <li>动作是 GitHub Actions 中的可复用组件，你可以在步骤中调用它们。GitHub 提供了很多官方的 Actions（如 <code class="language-plaintext highlighter-rouge">actions/checkout</code> 用于检出代码），并且社区中也有许多开源的 Actions 可以使用。</li>
      <li>你也可以编写自己的动作，来实现自定义需求。
        <h4 id="github-actions-的用途">GitHub Actions 的用途：</h4>
      </li>
    </ul>
  </li>
  <li><strong>自动化测试</strong>：每当代码变更时自动运行测试，确保代码的质量。</li>
  <li><strong>持续集成</strong>：合并代码时自动构建和测试项目，避免引入错误。</li>
  <li><strong>自动部署</strong>：在代码推送到某个分支时，自动将项目部署到服务器或云端。</li>
  <li><strong>代码审查</strong>：自动检查代码格式、代码覆盖率等问题，帮助维护代码质量。</li>
  <li><strong>发布管理</strong>：自动生成版本、打包应用，甚至发布到包管理平台（如 npm、Docker 等）。</li>
</ol>

<p>使用 GitHub Actions 对于 Jekyll 项目的帮助主要体现在自动化、灵活性和自定义能力方面。以下是一些具体的优点和场景，说明 GitHub Actions 如何提升你的 Jekyll 项目体验：</p>

<h4 id="1-自动化构建和部署">1. <strong>自动化构建和部署</strong>：</h4>

<ul>
  <li><strong>自动化构建</strong>：通过 GitHub Actions，你可以设置在每次提交代码时自动构建 Jekyll 网站。这样可以确保每次更新后网站的最新版本都会被生成并可用。</li>
  <li><strong>定期部署</strong>：可以配置定期触发的工作流，自动生成和部署 Jekyll 网站，无需手动操作。</li>
</ul>

<h4 id="2-自定义构建过程">2. <strong>自定义构建过程</strong>：</h4>

<ul>
  <li><strong>使用特定版本的 Ruby 和 Jekyll</strong>：可以在工作流中指定使用的 Ruby 和 Jekyll 版本，确保在构建过程中的一致性，避免因环境差异导致的问题。</li>
  <li><strong>预处理和后处理步骤</strong>：在构建前后执行特定的命令，比如优化图片、清理文件、运行自定义脚本等，以确保生成的站点符合你的需求。</li>
</ul>

<h4 id="3-集成其他工具">3. <strong>集成其他工具</strong>：</h4>

<ul>
  <li><strong>测试和验证</strong>：可以在构建过程中添加自动化测试，确保 Jekyll 生成的内容符合特定标准，比如 Markdown 语法、链接有效性等。</li>
  <li><strong>部署到其他平台</strong>：除了 GitHub Pages，你还可以通过 GitHub Actions 将生成的 Jekyll 网站部署到其他平台（如 Netlify、AWS S3、Vercel 等），增强灵活性。</li>
</ul>

<h4 id="4-使用自定义插件">4. <strong>使用自定义插件</strong>：</h4>

<ul>
  <li><strong>支持更多 Jekyll 插件</strong>：GitHub Pages 默认只支持一部分 Jekyll 插件。如果你使用了自定义或不在默认列表中的插件，GitHub Actions 允许你在自己的工作流中设置环境，支持这些插件的使用。</li>
</ul>

<h4 id="5-持续集成和持续交付cicd">5. <strong>持续集成和持续交付（CI/CD）</strong>：</h4>

<ul>
  <li><strong>实现 CI/CD 流程</strong>：通过 GitHub Actions，可以实现完整的 CI/CD 流程，在代码更新时自动进行构建、测试和部署。这使得团队协作时更容易保证代码的质量。</li>
</ul>

<h4 id="6-简化复杂的部署需求">6. <strong>简化复杂的部署需求</strong>：</h4>

<ul>
  <li><strong>配置和管理更复杂的部署需求</strong>：如果你的项目需要处理多个分支、子模块或复杂的文件结构，GitHub Actions 可以提供更强大的控制能力，帮助你管理这些需求。
    <h3 id="23安装jekyll依赖">2.3.安装Jekyll依赖</h3>
    <p><img src="/images/Jekyll-images/jekyll.11.png" alt="" /></p>
    <h3 id="24jekyll依赖作用">2.4.Jekyll依赖作用</h3>
    <h3 id="1-自动构建-jekyll-网站">1. <strong>自动构建 Jekyll 网站</strong>：</h3>
  </li>
  <li>选择这个选项后，GitHub Actions 会自动帮你构建 Jekyll 网站，而不需要你手动运行构建命令。你只需要提交内容更新（比如新的 Markdown 文件），GitHub Actions 就会自动生成静态网页。</li>
</ul>

<h3 id="2-预安装-github-pages-依赖">2. <strong>预安装 GitHub Pages 依赖</strong>：</h3>

<ul>
  <li>这个选项会确保 GitHub Pages 构建过程中所需的 Jekyll 依赖（例如 <code class="language-plaintext highlighter-rouge">github-pages</code> Gem 和其他插件）已经预先安装好。这样你就不需要自己去担心依赖的安装和配置问题。</li>
</ul>

<h3 id="3-简化部署流程">3. <strong>简化部署流程</strong>：</h3>

<ul>
  <li>通过使用 GitHub Actions，整个构建和发布的流程变得自动化且透明。每次你向仓库提交代码或文章时，GitHub Actions 会自动运行，安装依赖、生成 HTML 文件，并将其部署到你的 GitHub Pages 网站。</li>
</ul>

<h3 id="4-确保版本一致性">4. <strong>确保版本一致性</strong>：</h3>

<ul>
  <li>当你选择这个选项时，GitHub Pages 使用的 Jekyll 及其插件的版本会和你在本地或其他地方使用的保持一致。这避免了因为版本差异带来的潜在问题，保证你的 Jekyll 网站能够正常生成。</li>
</ul>

<h4 id="总结"><strong>总结</strong>：</h4>

<ul>
  <li>选择这个选项意味着每次你更新仓库内容时，GitHub Actions 会自动构建你的 Jekyll 网站，并确保所需的依赖已经预先安装好，从而简化了整个网站的生成和部署过程。如果你不选择这个，依然可以用手动配置的方式，但使用 GitHub Actions 自动化这一过程会更加方便。</li>
</ul>

<p><strong>直接提交即可</strong>
<img src="/images/Jekyll-images/jekyll.12.png" alt="" /></p>
<h3 id="25查看网站">2.5.查看网站</h3>
<p><strong>直接在浏览器中输入你的仓库名即可</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用户名.github.io
</code></pre></div></div>
<p><img src="/images/Jekyll-images/jekyll.13.png" alt="" />
当然现在什么都没有
<img src="/images/Jekyll-images/jekyll.14.png" alt="" /></p>
<h2 id="3将jekyll项目push到仓库">3.将Jekyll项目push到仓库</h2>
<h3 id="31打开上传">3.1.打开上传</h3>
<p><img src="/images/Jekyll-images/jekyll.15.png" alt="" /></p>
<h3 id="32复制粘贴">3.2.复制粘贴</h3>
<p>打开你创建的Jekyll项目，<strong>将所有文件全选拖动复制进去</strong>
<img src="/images/Jekyll-images/jekyll.16.png" alt="" /></p>
<h3 id="33提交">3.3.提交</h3>
<p><img src="/images/Jekyll-images/jekyll.17.png" alt="" /></p>
<h3 id="35查看网站">3.5.查看网站</h3>
<p>等待Action自动部署完成，然后点击进去
<img src="/images/Jekyll-images/jekyll.18.png" alt="" />
成功部署后，点击链接，就是你的静态网站网址
<img src="/images/Jekyll-images/jekyll.19.png" alt="" />
<strong>静态网站成功搭建</strong>
<img src="/images/Jekyll-images/jekyll.20.png" alt="" /></p>
<h1 id="四修改jekyll项目"><strong>四.修改Jekyll项目</strong></h1>
<p><strong>介绍：这里演示使用VS Code管理我们的项目</strong></p>
<h2 id="1将远程仓库克隆到本地">1.将远程仓库克隆到本地</h2>
<p>打开用来保存项目的文件夹，然后克隆远程仓库
其实不用初始化，直接克隆就行了
<img src="/images/Jekyll-images/jekyll.21.png" alt="" /></p>
<h2 id="2进入克隆的目录下修改文件">2.进入克隆的目录下修改文件</h2>
<p>示例：我对index.markdown做出了更改
<img src="/images/Jekyll-images/jekyll.22.png" alt="" /></p>
<h2 id="3本地运行">3.本地运行</h2>
<p>本地修改一些文件运行后会根据规则生成一些文件，而在GitHub仓库里修改不会显示
<img src="/images/Jekyll-images/jekyll.23.png" alt="" />
<img src="/images/Jekyll-images/jekyll.24.png" alt="" /></p>
<h2 id="4push到远程仓库">4.push到远程仓库</h2>
<h3 id="41提交更改">4.1.提交更改</h3>
<p><strong>注意：要打开克隆的这个目录，原来的目录</strong>
<img src="/images/Jekyll-images/jekyll.25.png" alt="" /></p>
<h3 id="42推送">4.2.推送</h3>
<p><img src="/images/Jekyll-images/jekyll.26.png" alt="" />
可以在仓库中看到正在push
<img src="/images/Jekyll-images/jekyll.27.png" alt="" /></p>
<h3 id="43查看网站">4.3.查看网站</h3>
<p><strong>可以看出，我们本地打开后是一个样，原封不动push上去竟然还有些差别<br />
这是为什么？<del>我也不知道</del> <br />
我们添加一些文件代替默认的配置，就不会出现这种情况了</strong>
<img src="/images/Jekyll-images/jekyll.28.png" alt="" /></p>
<h1 id="五jekyll-项目文件结构及作用"><strong>五.Jekyll 项目文件结构及作用</strong></h1>

<ol>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">_config.yml</code></strong></p>

    <ul>
      <li>这是 Jekyll 项目的配置文件，定义站点的基本信息和行为，例如站点标题、作者、URL、插件、主题等。</li>
      <li>常见配置项：
        <ul>
          <li><code class="language-plaintext highlighter-rouge">title</code>: 网站的名称</li>
          <li><code class="language-plaintext highlighter-rouge">author</code>: 作者名称</li>
          <li><code class="language-plaintext highlighter-rouge">baseurl</code>: 网站的基本 URL（如果不在根目录下托管）</li>
          <li><code class="language-plaintext highlighter-rouge">permalink</code>: 定义文章 URL 的格式</li>
          <li><code class="language-plaintext highlighter-rouge">theme</code>: 使用的 Jekyll 主题</li>
          <li><code class="language-plaintext highlighter-rouge">markdown</code>: 指定 Markdown 解析器（通常是 <code class="language-plaintext highlighter-rouge">kramdown</code>）</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">index.html</code></strong></p>

    <ul>
      <li>这是网站的主页文件，通常是一个静态 HTML 文件或包含 Jekyll 模板标记的文件。</li>
      <li>它会根据 <code class="language-plaintext highlighter-rouge">_config.yml</code> 中的配置渲染成主页。</li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">_posts/</code></strong></p>

    <ul>
      <li>存放所有博客文章的目录，所有文章都以 <code class="language-plaintext highlighter-rouge">.md</code> 或 <code class="language-plaintext highlighter-rouge">.html</code> 格式编写。</li>
      <li>文章文件命名格式：<code class="language-plaintext highlighter-rouge">YYYY-MM-DD-title.md</code>（年-月-日-文章标题），这个命名方式用于生成文章的 URL 和时间归档。</li>
      <li>每篇文章都需要设置 <strong>Front Matter</strong>（前置信息），用于指定元数据。</li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">_layouts/</code></strong></p>

    <ul>
      <li>存放网站布局文件的目录，Jekyll 用这些布局文件来包裹内容页面。</li>
      <li>常见的布局文件：
        <ul>
          <li><code class="language-plaintext highlighter-rouge">default.html</code>: 网站的默认布局</li>
          <li><code class="language-plaintext highlighter-rouge">post.html</code>: 单篇文章的布局</li>
          <li><code class="language-plaintext highlighter-rouge">page.html</code>: 普通页面的布局</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">_includes/</code></strong></p>

    <ul>
      <li>
        <p>存放可重用的部分或片段的目录，这些片段可以在其他模板文件中通过(有些问题，无法打出)引用</p>
      </li>
      <li>
        <p>常见的包括导航栏、页脚、头部、或其他重复的 HTML 片段。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">_sass/</code></strong></p>

    <ul>
      <li>存放 SASS（CSS 预处理器）文件的目录，用于自定义样式。</li>
      <li>这些文件通常通过主样式文件导入，并编译成单个 CSS 文件。</li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">_site/</code></strong></p>

    <ul>
      <li>Jekyll 将项目编译生成的静态网站文件都会存储在这个目录中，生成的 HTML 文件可以直接部署到服务器上。</li>
      <li>注意：该文件夹在生成时自动创建，不需要手动修改。</li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">assets/</code></strong></p>

    <ul>
      <li>存放项目的静态资源文件，比如图片、CSS、JavaScript 等。</li>
      <li>通常开发者会把自定义的样式或脚本放在这个目录中。</li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">Gemfile</code></strong></p>

    <ul>
      <li>用于 Ruby 环境的依赖管理，包含 Jekyll 和其他插件的安装信息。</li>
      <li><code class="language-plaintext highlighter-rouge">bundle install</code> 命令会依据该文件安装必要的依赖。</li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">pages/</code></strong>（可选）</p>

    <ul>
      <li>通常用于存放自定义的页面，比如关于页面、联系页面等。</li>
      <li>这些页面的布局可以与博客文章不同。</li>
    </ul>
  </li>
</ol>

<h2 id="发文章的规则">发文章的规则</h2>

<ol>
  <li>
    <p><strong>文章文件命名</strong>：</p>

    <ul>
      <li>格式为 <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-title.md</code> 或 <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-title.html</code>，其中 <code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code> 是发布日期，<code class="language-plaintext highlighter-rouge">title</code> 是文章的简短描述，通常以短横线 <code class="language-plaintext highlighter-rouge">-</code> 分隔单词。</li>
      <li>例如：<code class="language-plaintext highlighter-rouge">2024-10-19-my-first-post.md</code>。</li>
    </ul>
  </li>
  <li>
    <p><strong>Front Matter（前置信息）</strong>：</p>

    <ul>
      <li>文章必须在文件的顶部包含 Front Matter，这是用 YAML 格式定义的元数据，用三条短横线包裹。</li>
      <li>例子：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post 
title: "My First Post" date: 2024-10-19 10:00:00 +0800 
categories: [blog, update] 
tags: [jekyll, blog, tutorial] 
---
</code></pre></div>        </div>
      </li>
      <li>常用字段：
        <ul>
          <li><code class="language-plaintext highlighter-rouge">layout</code>: 指定使用哪个布局文件（通常是 <code class="language-plaintext highlighter-rouge">post</code>）</li>
          <li><code class="language-plaintext highlighter-rouge">title</code>: 文章标题</li>
          <li><code class="language-plaintext highlighter-rouge">date</code>: 文章发布日期</li>
          <li><code class="language-plaintext highlighter-rouge">categories</code>: 文章分类，可以用于按分类归档</li>
          <li><code class="language-plaintext highlighter-rouge">tags</code>: 文章标签，用于更细的分类或标签云展示</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>使用 Markdown 或 HTML 编写</strong>：</p>

    <ul>
      <li>文章主体可以使用 Markdown（通常是 <code class="language-plaintext highlighter-rouge">.md</code> 文件）编写，Jekyll 会自动将其转换为 HTML。</li>
      <li>也可以直接使用 <code class="language-plaintext highlighter-rouge">.html</code> 文件，编写自定义的 HTML 内容。</li>
    </ul>
  </li>
  <li>
    <p><strong>URL 生成规则</strong>：</p>

    <ul>
      <li>根据文件名的日期和 <code class="language-plaintext highlighter-rouge">_config.yml</code> 中的 <code class="language-plaintext highlighter-rouge">permalink</code> 配置，Jekyll 会自动生成每篇文章的 URL。</li>
      <li>默认的 URL 规则通常是：<code class="language-plaintext highlighter-rouge">/year/month/day/title/</code>。</li>
    </ul>
  </li>
  <li>
    <p><strong>Drafts（草稿）</strong>：</p>

    <ul>
      <li>如果文章存放在 <code class="language-plaintext highlighter-rouge">_drafts/</code> 目录下，并没有指定发布日期，Jekyll 默认不会发布这些草稿文章。</li>
      <li>如果要预览草稿，可以使用 <code class="language-plaintext highlighter-rouge">jekyll serve --drafts</code> 命令运行。</li>
    </ul>
  </li>
  <li>
    <p><strong>发布文章时的注意事项</strong>：</p>

    <ul>
      <li>确保 Front Matter 的日期是当前或过去的日期，否则 Jekyll 不会将其作为已发布的文章显示。</li>
      <li>若设置了 <code class="language-plaintext highlighter-rouge">future: true</code> 配置项，Jekyll 可以显示未来的文章（即发布日期在未来）。</li>
    </ul>
  </li>
</ol>

<h2 id="总结-1">总结</h2>

<p>Jekyll 的文件结构和规则简单而清晰，每个目录和文件都各司其职。通过合理使用 Front Matter 和布局文件，你可以灵活地创建和管理博客文章，同时根据需要自定义网站的外观和功能。</p>
<h1 id="六markdown基本语法"><strong>六.Markdown基本语法</strong></h1>
<p>在Jekyll中，提交在_post中特定格式的markdown文件会自动转换问html文件<br />
所以需要熟悉它的用法，用来写文章<br />
Markdown 是一种轻量级的标记语言，常用于格式化文本。它的语法简单易懂，适合用于写作和排  版。以下是 Markdown 常用语法的总结：</p>

<h2 id="1-标题">1. 标题</h2>

<p>使用 <code class="language-plaintext highlighter-rouge">#</code> 来表示标题。<code class="language-plaintext highlighter-rouge">#</code> 的数量决定了标题的级别（1-6级）。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题
</code></pre></div></div>
<h2 id="2-段落和换行">2. 段落和换行</h2>

<p>段落通过一个或多个空行分隔。要在段落中插入换行，可以在行尾添加两个空格，然后按 <code class="language-plaintext highlighter-rouge">Enter</code>。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>这是一个段落。  这是另一个段落。  这是一个段落的第一行。   这是第二行。
</code></pre></div></div>
<h2 id="3-强调">3. 强调</h2>

<ul>
  <li><strong>加粗</strong>：使用 <code class="language-plaintext highlighter-rouge">**</code> 或 <code class="language-plaintext highlighter-rouge">__</code> 包围文本。</li>
  <li><em>斜体</em>：使用 <code class="language-plaintext highlighter-rouge">*</code> 或 <code class="language-plaintext highlighter-rouge">_</code> 包围文本。</li>
  <li><del>删除线</del>：使用 <code class="language-plaintext highlighter-rouge">~~</code> 包围文本。</li>
</ul>

<p><strong>加粗文本</strong>   <em>斜体文本</em>   <del>删除线文本</del></p>

<h2 id="4-列表">4. 列表</h2>

<ul>
  <li><strong>无序列表</strong>：使用 <code class="language-plaintext highlighter-rouge">*</code>、<code class="language-plaintext highlighter-rouge">+</code> 或 <code class="language-plaintext highlighter-rouge">-</code> 开始每个列表项。</li>
  <li><strong>有序列表</strong>：使用数字和点号（如 <code class="language-plaintext highlighter-rouge">1.</code>、<code class="language-plaintext highlighter-rouge">2.</code>）表示。</li>
</ul>

<p>无序列表：</p>
<ul>
  <li>项目一 * 项目二   * 子项目一   * 子项目二</li>
  <li>有序列表： 1. 第一项 2. 第二项    1. 子项一    2. 子项二`</li>
</ul>

<h2 id="5-链接">5. 链接</h2>

<p>使用 <code class="language-plaintext highlighter-rouge">[链接文本](URL)</code> 创建链接。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[OpenAI](https://www.openai.com)
</code></pre></div></div>
<p><a href="https://www.openai.com">OpenAI</a></p>
<h2 id="6-图片">6. 图片</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![示例图片](https://example.com/image.jpg)
</code></pre></div></div>
<h2 id="7-引用">7. 引用</h2>

<p>使用 <code class="language-plaintext highlighter-rouge">&gt;</code> 来创建引用。</p>

<blockquote>
  <p>这是一段引用文本。</p>
</blockquote>

<h2 id="8-代码">8. 代码</h2>

<ul>
  <li><strong>行内代码</strong>：使用反引号 <code class="language-plaintext highlighter-rouge">`</code> 包围代码。</li>
  <li><strong>代码块</strong>：使用三个反引号 包围多行代码，可以指定语言。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">这是行内代码</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>这是一个代码块。
</code></pre></div></div>
<h2 id="9-水平线">9. 水平线</h2>

<p>使用三个或更多的 <code class="language-plaintext highlighter-rouge">*</code>、<code class="language-plaintext highlighter-rouge">-</code> 或 <code class="language-plaintext highlighter-rouge">_</code> 创建水平线。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
</code></pre></div></div>
<hr />
<h2 id="10-表格">10. 表格</h2>

<p>使用 <code class="language-plaintext highlighter-rouge">|</code> 分隔列，并使用 <code class="language-plaintext highlighter-rouge">-</code> 创建表头。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| 列1 | 列2 | 列3 | 
|-----|-----|-----| 
| 数据1 | 数据2 | 数据3 | 
| 数据4 | 数据5 | 数据6 |
</code></pre></div></div>
<h2 id="11-任务列表">11. 任务列表</h2>
<p>使用 <code class="language-plaintext highlighter-rouge">- [ ]</code> 创建任务列表项。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- [ ] 待办事项1 
- [x] 已完成事项
</code></pre></div></div>
<h1 id="七fork别人的静态网站仓库">七.fork别人的静态网站仓库</h1>
<p>上文都是介绍怎么自己做静态网站，可能要花费不少时间精力<br />
我们可以fork别人的项目，做出更改</p>
<h2 id="1找到一个合适的静态网站仓库并fork">1.找到一个合适的静态网站仓库并fork</h2>
<p>仓库名是用户名+.github.io的都是<br />
这里我以自己的仓库为例：<a href="https://github.com/Verumkey/verumkey.github.io">https://github.com/Verumkey/verumkey.github.io</a>
<img src="/images/Jekyll-images/jekyll.29.png" alt="" />
仓库名必须是：<strong>用户名.github.io</strong>
<img src="/images/Jekyll-images/jekyll.30.png" alt="" /></p>
<h2 id="2启用github-action">2.启用GitHub Action</h2>
<p><img src="/images/Jekyll-images/jekyll.31.png" alt="" /></p>
<h2 id="3安装jekyll站点">3.安装Jekyll站点</h2>
<p><img src="/images/Jekyll-images/jekyll.32.png" alt="" />
直接提交
<img src="/images/Jekyll-images/jekyll.33.png" alt="" /></p>
<h2 id="4做出修改并保存">4.做出修改并保存</h2>
<h2 id="5查看网站">5.查看网站</h2>
<p>我这里仅改了下标题
<img src="/images/Jekyll-images/jekyll.34.png" alt="" /></p>
<h1 id="八完结"><strong>八.完结</strong></h1>
<p><strong>就我目前的理解：<br />
0.演示中只生成了最基础的Jekyll文件，像丰富网站内容的话，还有一些文件需要添加<br />
1.index.markdown是默认的页面，当你添加了一个index.html作为主页后，记得删除  index.markdown，否则还会显示原来的，因为它的优先级较高<br />
2.可以添加一个_layouts文件和_includes文件，再进行一些配置来添加页眉页脚<br />
3.chatgpt是个好工具，我对Jekyll的了解很大一部分缘于它<br />
4.关于具体怎么修改Jekyll项目，我也不是很清楚,<del>所以我做的静态网站那么简陋</del><br />
可以去看看官方文档，或找找其它教学<br />
5.以后有经验了，我再回来</strong></p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />更新怎么丰富网站内容</li>
</ul>]]></content><author><name>secrecy</name><email>verumkeys@gmail.com</email></author><category term="技术，编程" /><category term="Jekyll" /><category term="博客" /><summary type="html"><![CDATA[本篇文章演示如何获得一个静态网站]]></summary></entry></feed>