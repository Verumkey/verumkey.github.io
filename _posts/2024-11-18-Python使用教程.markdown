---
layout: post
title: "Python 使用教程"
date: 2024-11-18 
categories: [编程语言]
tags: [Python]
excerpt: "Python是一种高级编程语言，因其简洁易读的语法和强大的功能而广泛应用于数据分析、人工智能、网络开发、自动化脚本等多个领域。它支持面向对象、函数式编程，并拥有丰富的第三方库。Python具有跨平台的特性，可以在Windows、Linux和macOS等操作系统上运行。"
---

# 简介
本文主要内容：  
1.介绍Python的概念  
2.演示配置常用的两者Python环境  
一种是VS Code  
一种是PyCharm(~~提供一种专业版激活方式~~)  
3.介绍Python的部分语法  
4.演示一些Python项目的实现  
5.在Python项目演示中使用VS Code编写Python程序  
Python官网：[https://www.python.org/](https://www.python.org/)

---

# 一.Python的概述
Python 是一种广泛使用的高级编程语言，因其简洁、易读和高效而受到开发者的喜爱。Python 由 **Guido van Rossum** 于 1980 年代末期设计，并在 1991 年首次发布。它是一种解释型语言，支持多种编程范式，包括面向对象编程、命令式编程、函数式编程和程序化编程。

## 1.Python的主要特点

1. **简洁易学**：
    
    - Python 的语法非常简洁，接近自然语言，因此适合初学者学习。它有明确的缩进规则，避免了使用大量的括号或花括号来分隔代码块。
    
2. **跨平台支持**：
    
    - Python 可以运行在多种操作系统上，包括 Windows、Linux、macOS 等。只要安装了 Python 解释器，几乎所有平台都能运行 Python 程序。
    
3. **解释型语言**：
    
    - Python 是一种解释型语言，意味着代码在运行时逐行解释执行，不需要编译步骤。这样可以加速开发流程，并且方便调试和交互式操作。
    
4. **动态类型**：
    
    - Python 是动态类型语言，在程序运行时确定数据类型，不需要提前声明变量的类型。这使得 Python 更加灵活，但也可能导致一些运行时错误。
    
5. **广泛的标准库和第三方库**：
    
    - Python 提供了大量的标准库，涵盖了从文件操作、网络通信到数据库交互等各种功能。此外，还有丰富的第三方库和框架，像 NumPy（科学计算）、Pandas（数据分析）、Flask 和 Django（Web 开发）等，这些库扩展了 Python 的应用范围。
    
6. **面向对象**：
    
    - Python 支持面向对象编程（OOP），允许创建类和对象，支持继承、多态、封装等 OOP 特性。尽管如此，Python 也支持其他编程范式，因此在 Python 中，你可以使用面向过程的方式进行开发。
    
7. **社区支持**：
    
    - Python 拥有一个活跃的开发者社区，提供了大量的教程、论坛、开源项目和文档支持。这使得学习和解决问题变得更加容易。
    
8. **适用于多种应用领域**：
    
    - Python 在多种领域有广泛的应用，包括但不限于：
        - **Web 开发**（Flask, Django）
        - **数据科学与机器学习**（NumPy, Pandas, TensorFlow, Scikit-Learn）
        - **自动化脚本**（文件操作、网络请求等）
        - **软件开发**（桌面应用、游戏开发等）
        - **系统管理与运维**

---

## 2.Python的优势

- **易于学习和使用**：Python 以其简单的语法和明确的结构而闻名，非常适合编程初学者。
- **开发效率高**：Python 的高级语法和丰富的库使得开发者能够快速开发功能强大的应用程序。
- **丰富的社区资源**：Python 拥有一个非常活跃的开发社区，开发者可以轻松获取大量的文档、教程和开源项目。
- **广泛的应用场景**：从Web开发到科学计算，Python 适用于几乎所有类型的应用开发。

---

## 3.Python的缺点

- **运行速度相对较慢**：作为解释型语言，Python 的执行速度比编译型语言（如 C++ 或 Java）要慢。这对于一些对性能要求极高的应用（如游戏开发、嵌入式系统）可能是一个限制。
- **GIL（全局解释器锁）**：由于 Python 的 GIL 特性，多线程编程时只能同时运行一个线程，这在处理 CPU 密集型任务时可能会影响性能。

---

##  4.Python主要应用领域

1. **Web 开发**：
    
    - Python 拥有强大的 Web 开发框架，如 Django 和 Flask，它们让 Web 开发更加简洁高效。Python 可以用于构建网站、Web 应用以及 API 服务。
    
1. **数据分析与数据科学**：
    
    - Python 是数据科学领域的首选语言之一。它通过库如 **NumPy**、**Pandas**、**Matplotlib** 等提供强大的数据处理和分析功能。同时，Python 在机器学习和人工智能领域也有着广泛的应用，库如 **TensorFlow**、**Keras**、**Scikit-learn** 提供了易于使用的接口。
    
1. **自动化脚本和任务调度**：
    
    - Python 常用于编写自动化脚本，帮助开发者处理日常任务，如文件处理、自动化测试、Web 数据抓取等。
    
1. **人工智能与机器学习**：
    
    - 由于其简洁的语法和强大的第三方库，Python 已成为机器学习、深度学习和人工智能的主要编程语言之一。
    
1. **科学计算与数值分析**：
    
    - Python 提供了大量的数学和科学计算库，如 **SciPy**、**SymPy** 和 **Matplotlib**，非常适合用于物理学、工程学等领域的研究。
    
1. **桌面应用开发**：
    
    - 虽然 Python 不是开发高性能桌面应用的首选，但它依然可以用于开发桌面应用程序。框架如 **Tkinter**、**PyQt** 和 **Kivy** 可以帮助开发跨平台的桌面应用。

---

## 5.总结

Python 是一种非常灵活和强大的编程语言，凭借其简洁的语法和丰富的库，已成为各个领域（如 Web 开发、数据科学、自动化等）的首选语言。无论是初学者还是经验丰富的开发者，Python 都是一个很好的编程选择。

---

# 二.Python解释器

---

## 1.Python 解释器的作用

1. **执行 Python 代码**：
    
    - 解释器将 Python 程序的源代码转换为机器能够理解的指令，并逐行执行。与编译型语言（如 C 或 C++）不同，解释型语言直接逐行解释和执行代码，而不是先将整个程序编译成可执行文件。
    
2. **语法检查和错误报告**：
    
    - 解释器在执行代码时，会检查代码的语法错误。如果 Python 程序有语法错误，解释器会在执行过程中抛出错误并提供错误信息，帮助开发者修正代码。
    
3. **内存管理**：
    
    - Python 解释器负责管理内存。它会自动为对象分配内存，并使用垃圾回收机制来清理不再使用的内存空间，从而减少内存泄漏的可能。
    
4. **提供交互式环境**：
    
    - Python 解释器可以提供一个交互式的命令行环境（也叫 REPL 环境：Read-Eval-Print Loop），允许开发者直接输入代码并立即看到结果。这对于快速测试、调试和学习 Python 很有帮助。
    
5. **跨平台支持**：
    
    - Python 解释器使得 Python 程序能够在不同的平台（如 Windows、macOS 和 Linux）上运行，而不需要做太多的修改。开发者只需要安装对应操作系统的 Python 解释器。

---

## 2.下载python解释器
官网：[https://www.python.org/downloads/](https://www.python.org/downloads/)  
从Python官网下载的 Python 解释器通常是 **CPython**，即 Python 的官方实现。CPython 是最常用和最流行的 Python 解释器，它由 C 语言编写，并且是 Python 官方推荐的版本。  
**1.下载并打开安装包**
![](/images/vscode-images/vscode.22.png)
![](/images/Python-images/python.1.png)**2.勾选下面两个选项**,至少第二个要勾选  
**3.然后选择Customize installation(自定义安装)**  
**注释：**  
**Install Now**就是默认安装到当前用户下  
**Customize installation**可以自定义安装路径和一些选项  
**第一个选项是使用管理员权限安装 py.exe**(python启动器,用于在 Windows 上更方便地管理和运行不同版本的 Python),会将它安装到系统目录(C:\Windows),否则安装到当前用户目录下  
**第二个选项是把解释器添加到系统路径**，能够使得你在任何命令行窗口中直接运行python命令,而不需要指定 Python 的完整安装路径  
**4.这是默认的配置，不用修改，点击Next**
![](/images/Python-images/python.2.png)
**5.这里可以选择安装到所有用户，这时安装路径就会变成一个公共文件夹**
![](/images/Python-images/python.3.png)
**6.安装**
![](/images/Python-images/python.4.png)

---

# 三.配置Python环境(VS Code)

---

## 1.下载VS Code
网址：[https://code.visualstudio.com/](https://code.visualstudio.com/)
![](/images/vscode-images/vscode.1.png)

---

## 2.配置中文环境
**1.打开扩展**
![](/images/vscode-images/vscode.2.png)
**2.在搜索栏中搜索Chinese  
3.选择简体中文安装  
4.重启**
![](/images/vscode-images/vscode.3.png)

---

## 3.安装插件
### 3.1.python 插件
![](/images/vscode-images/vscode.24.png)
**主要功能:**  
- **代码智能提示**：提供 Python 代码的自动补全、函数参数提示、变量/函数定义跳转等功能。
- **调试支持**：集成调试器，可以直接在 VS Code 中进行 Python 代码的调试，设置断点、变量监视和调用堆栈查看等。
- **代码检查**：支持代码静态分析工具，如 Pylint 和 Flake8，帮助你发现代码中的潜在错误和格式问题。
- **虚拟环境和 Conda 支持**：可以轻松选择和管理不同的 Python 解释器、虚拟环境或 Conda 环境。
- **Jupyter 支持**：可以在 VS Code 中直接运行 Jupyter Notebooks，进行交互式的 Python 开发，特别适合数据科学工作流。
- **测试集成**：支持常用的测试框架（如 unittest、pytest），便于运行和调试测试用例。
这个插件是 Python 开发者在 VS Code 中工作的基础工具，帮助进行代码编写、调试、测试和管理开发环境。

---

### 3.2.Python Extension Pack 插件
![](/images/vscode-images/vscode.26.png)
**主要功能:**  
**Python Extension Pack** 是为 Visual Studio Code 的 Python 开发者设计的一组插件包，包含了多个非常有用的扩展，主要包括：
1. **Python** - 提供核心功能，如代码检查（linting）、调试（包括多线程和远程调试）、智能感知（IntelliSense）、代码格式化、重构、单元测试，以及用于数据科学任务的 Jupyter Notebook 支持。
2. **Jinja** - 提供 Jinja 模板语言的语法高亮和代码片段。
3. **Django** - 为 Django Web 开发添加了特定的语法和代码片段。
4. **IntelliCode** - 基于机器学习的 AI 辅助工具，帮助提供智能代码补全和建议。
5. **Python Environment Manager** - 帮助你在 VS Code 中查看和管理 Python 环境及其依赖包。
6. **Python Docstring Generator** - 辅助自动生成 Python 函数和类的文档注释。
7. **Python Indent** - 自动纠正 Python 代码的缩进。

---

## 4.编写Python程序

**1.创建一个文件**
![](/images/vscode-images/vscode.15.png)
**2.通过VScode打开你上面创建的文件**
![](/images/vscode-images/vscode.16.png)
**3.新建文件，后缀需为.py**
![](/images/vscode-images/vscode.17.png)
**4.编写代码并运行,可以在终端看到输出结果**
![](/images/vscode-images/vscode.25.png)

---

# 四.配置Python环境(PyCharm)

---

**可以选择下载免费的社区版，仅用于学习是绰绰有余**  
**当然也可使用专业版，可以购买正版获得许可证**，也能通过其他方式低成本获得激活(~~网上购买激活码或让商家激活账号~~，当然这些是不正规的)，**接下来会演示一位大神提出的激活方式，仅为交流学习，并不提倡使用盗版**  
**如果你选择使用社区版，就在下载时选择社区版，并跳过激活专业版的教程**  
~~理论上该方法可以激活Jetbrains全家桶的每个软件~~
## 1.PyCharm专业版与社区版的区别
**PyCharm** 是由 JetBrains 开发的一款广受欢迎的 Python 集成开发环境（IDE）。它有两个版本：**专业版（Professional）** 和 **社区版（Community）**。这两个版本在功能上有所不同，下面是它们的主要区别：

### 1.1. 价格

- **社区版（Community）**：免费，开源。适合个人开发者、学习者或者对功能需求较少的用户。
- **专业版（Professional）**：收费版本，需要购买许可证。它提供了更多的高级功能，适用于企业用户、专业开发者和需要高级功能的团队。

### 1.2. 支持的开发环境

- **社区版**：
    
    - 主要支持 Python 开发。
    - 支持基本的编辑、调试和版本控制。
    - 提供 Python 项目的基本功能，如代码补全、语法高亮、代码导航、调试等。
    
- **专业版**：
    
    - **完整的 Python 开发支持**，包括 Flask、Django 等框架的支持。
    - 支持**Web 开发**（HTML、CSS、JavaScript 和前端开发的功能）。
    - 提供**数据库工具**，可以与数据库进行交互，如连接、查询和编辑数据库。
    - 支持**科学计算和数据分析**，包括与 Jupyter Notebooks 的集成。
    - 支持 **Docker** 和 **远程开发**，适合容器化开发和使用远程开发环境。

### 1.3. Web 开发支持

- **社区版**：不支持 Web 开发框架。
- **专业版**：支持 Web 开发框架，如 **Django**、**Flask**、**Pyramid** 等，且包含 Web 调试、模板编辑、前端开发等功能。

### 1.4. 数据库支持

- **社区版**：没有内置数据库支持。
- **专业版**：提供强大的数据库工具，允许你连接、编辑和查询关系型数据库（如 MySQL、PostgreSQL、SQLite、Oracle 等），并且能够在 IDE 内部直接执行 SQL 查询。

### 1.5. 科学计算与数据科学支持

- **社区版**：不支持数据科学的相关功能。
- **专业版**：提供对数据科学、科学计算的支持，包括对 **Jupyter Notebooks**、**Pandas**、**NumPy** 等库的集成，方便数据科学家和研究人员使用。

### 1.6. 远程开发和部署

- **社区版**：不支持远程开发和容器化部署。
- **专业版**：支持远程开发、部署和调试，支持使用 **Docker**、**Vagrant**、**SSH** 等技术进行远程开发，适用于在云服务器或虚拟机上进行开发。

### 1.7. 支持的框架

- **社区版**：支持基本的 Python 语言开发。
- **专业版**：支持更多的开发框架和技术栈，包括：
    - **Web 框架**：如 Django、Flask、Pyramid。
    - **数据科学工具**：如 Jupyter、Matplotlib、Pandas 等。
    - **更多的数据库支持**：包括关系型数据库的查询和管理工具。

### 1.8. 编辑器与调试工具

- **社区版**：提供基本的代码编辑、调试、版本控制支持。
- **专业版**：提供更为强大的调试工具，包括对 **多线程调试**、**Web 应用调试**、**数据库调试**等的支持。

### 1.9. 集成工具

- **社区版**：集成 Git 和 GitHub，支持基础的版本控制。
- **专业版**：集成了更多的版本控制系统，如 Git、Mercurial、Subversion（SVN），并且支持更多的工具集成（例如 Docker 和 Kubernetes 等）。

### 1.10.总结

- **社区版**适合学习、基础的 Python 开发、简单的项目和个人开发者。它涵盖了 Python 开发的基础功能，且免费。
- **专业版**适合需要更强大功能的专业开发者和团队，特别是涉及 Web 开发、数据科学、数据库和远程开发等领域。它提供了更全面的功能，但需要付费。

如果你只是学习 Python 或者进行简单的项目开发，**社区版**完全足够。而如果你从事 Web 开发、数据科学或复杂的企业级开发，或者需要与数据库进行交互，**专业版**将为你提供更多的工具和支持。

---

## 2.下载PyCharm
官网：[https://www.jetbrains.com/zh-cn/pycharm/](https://www.jetbrains.com/zh-cn/pycharm/)  
**1.点击下载**
![](/images/Python-images/python.5.png)
**这个是专业版，需要付费**
![](/images/Python-images/python.6.png)
**下滑可以看到免费的社区版**
![](/images/Python-images/python.7.png)
**1.选择下载哪个版本，下载后打开安装包(这里是专业版)**
![](/images/Python-images/python.8.png)
**2.可以自定义安装路径**
![](/images/Python-images/python.9.png)
**3.推荐将这四个都勾选**
![](/images/Python-images/python.10.png)
**4.可选择将快捷方式安装在哪，然后安装**
![](/images/Python-images/python.11.png)

---

## 3.激活专业版
如果选择使用社区版，可以跳过  
关于激活原理，仅给出自己的理解作为参考：  
这个过程通过修改 PyCharm 的启动参数，使用 Java 代理（`ja-netfilter.jar`）绕过激活检查，同时提供了一种手动或自动配置方式来完成激活。通过使用指定的激活密钥和更改 Java 环境的访问权限，这种方法可以让用户在没有正式许可证的情况下继续使用软件。  
**1.进入网址：**[https://3.jetbra.in/](https://3.jetbra.in/)  
**2.随便选择一个可用的网站进入**
![](/images/Python-images/python.12.png)
**3.下载这个文件并解压缩**
![](/images/Python-images/python.13.png)
**4.打开解压后的文件**
![](/images/Python-images/python.14.png)
**5.关于如何激活，我们可以看看作者给出的方法，打开readme.txt**
![](/images/Python-images/python.15.png)
这里激活的核心是绕过软件的许可证验证  
作者给出了一个自动完成配置的脚本  
![](/images/Python-images/python.16.png)
**6.打开scripts(脚本)**
![](/images/Python-images/python.17.png)
**7.运行安装到所有用户的脚本**，安装到当前用户的脚本也可以  
**注释：**  
**VMOptions 文件**（通常称为 **`vmoptions`** 文件）是一个配置文件，它包含用于定制和配置 **JVM**（Java 虚拟机）运行时行为的启动参数。它允许用户调整 JVM 的内存使用、性能优化、调试设置、代理配置等。  

JetBrains 产品（如 **PyCharm**）是基于 Java 的，因此它们也使用 JVM。通过编辑 `vmoptions` 文件，用户可以修改这些参数来优化应用程序的运行，例如设置内存大小、启用代理等。  

该脚本通过修改 JetBrains 产品（如 PyCharm、IntelliJ IDEA 等）的 `vmoptions` 文件，注入 `ja-netfilter.jar` Java 代理，通常用于绕过授权验证或进行其他定制操作。它首先确保以管理员权限运行，删除旧的配置，然后将新的代理配置应用到目标产品的环境变量中，最终在启动时加载代理文件。
![](/images/Python-images/python.18.png)
![](/images/Python-images/python.19.png)
**8.等待完成**
![](/images/Python-images/python.20.png)
**9.回到之前的网站，找到PyCharm，复制激活码**
![](/images/Python-images/python.21.png)
**10.运行安装好的PyCharm**  
**11.激活许可证的三个选项中选择激活码，然后将激活码粘贴进去，点击激活**
![](/images/Python-images/python.22.png)
**12.可以看到激活完成**  
**可以看到有效期是到2026年9月14日，根据作者的说法，到了有效期后仍可一直使用**  
**到时若不能继续使用，我再回来更新其它方法**
![](/images/Python-images/python.23.png)

---

## 4.编写python程序
在Customize(定制)中可将语言设置为中文
![](/images/Python-images/python.24.png)
![](/images/Python-images/python.25.png)
![](/images/Python-images/python.26.png)

---

# 五.Python的语法

---

这里有许多python书籍的电子版:[https://github.com/square1979/Some_Books](https://github.com/square1979/Some_Books)  
Python 的语法结构是简洁和易读的。以下是 Python 中常见的语法元素和规则的详细概述：
## 1. 注释

- 单行注释：使用 `#` 进行注释。

```python
# 这是一个注释
```

- 多行注释：使用三引号（`'''` 或 `"""`）进行注释。

```python
'''这是多行注释'''
"""
这也是多行注释
"""
```

---

## 2. 变量和数据类型

- 变量赋值：Python 是动态类型语言，变量不需要显式声明类型。

```python
x = 10  # 整数 
y = 3.14  # 浮动数 
name = "John"  # 字符串 
is_active = True  # 布尔值
```

---

## 3. 数据结构

- **列表（List）**：有序、可变的集合。

```python
my_list = [1, 2, 3, 4]
```

- **元组（Tuple）**：有序、不可变的集合。

```python
my_tuple = (1, 2, 3)
```

- **字典（Dictionary）**：键值对的无序集合。

```python
my_dict = {"name": "John", "age": 30}
```

- **集合（Set）**：无序、唯一元素的集合。

```python
my_set = {1, 2, 3}
```

---

## 4. 控制结构

- **条件语句（if-elif-else）**：

```python
if x > 0:
    print("x是正数")
elif x == 0:
    print("x是零")
else:
    print("x是负数")
```

- **循环语句（for 和 while）**：
- `for` 循环：

```python
for i in range(5):
    print(i)
```

- `while` 循环：

```python
count = 0
while count < 5:
    print(count)
    count += 1
```

---

## 5. 函数

- 定义函数使用 `def`：

```python
def greet(name):
    return f"Hello, {name}!"

```

- 调用函数：
  
```python
print(greet("Alice"))
```

---

## 6. 异常处理

- 使用 `try-except` 语句处理异常：

```python
try:
    x = 1 / 0
except ZeroDivisionError:
    print("不能除以零")

```

---

## 7. 类和对象

- 定义类：
 
```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        print(f"Hello, my name is {self.name} and I am {self.age} years old.")
```

- 创建对象：

```python
person = Person("John", 30)
person.greet()
```

---

## 8. 模块和包

- 导入模块：

```python
import math
print(math.sqrt(16))  # 4.0
```

- 从模块中导入特定函数或类：

```python
from math import sqrt
print(sqrt(16))  # 4.0
```

---

## 9. 列表推导式

- 列表推导式是用于创建新列表的一种简洁方法：

```python
squares = [x ** 2 for x in range(5)]
print(squares)  # [0, 1, 4, 9, 16]
```

---

## 10. Lambda 表达式

- 使用 `lambda` 定义匿名函数：

```python
add = lambda x, y: x + y
print(add(2, 3))  # 5
```

---

## 11. 文件操作

- 读取文件：

```python
with open('file.txt', 'r') as file:
    content = file.read()
    print(content)
```

- 写入文件：

```python
with open('file.txt', 'w') as file:
    file.write("Hello, World!")
```

---

## 12. 列表操作

- **连接**：使用 `+` 连接列表。

```python
list1 = [1, 2]
list2 = [3, 4]
combined = list1 + list2
print(combined)  # [1, 2, 3, 4]
```

- **重复**：使用 `*` 重复列表。

```python
repeated = [1, 2] * 3
print(repeated)  # [1, 2, 1, 2, 1, 2]
```

---

## 13. 迭代器与生成器

- 迭代器：

```python
nums = [1, 2, 3]
iter_nums = iter(nums)
print(next(iter_nums))  # 1
print(next(iter_nums))  # 2
```

- 生成器：使用 `yield` 创建生成器。

```python
def count_up_to(max):
    count = 1
    while count <= max:
        yield count
        count += 1
```

---

## 14. Python 特性

- **动态类型**：Python 在运行时决定变量的类型。
- **自动内存管理**：Python 使用垃圾回收机制自动管理内存。
- **缩进**：Python 使用缩进来表示代码块，而不是大括号 `{}`。

---

## 15. 其他常用功能

- **字符串格式化**：Python 3.6 引入了 f-string：

```python
name = "Alice"
age = 30
print(f"My name is {name} and I am {age} years old.")
```

- **枚举（Enum）**：定义一组常量：

```python
from enum import Enum

class Color(Enum):
    RED = 1
    GREEN = 2
    BLUE = 3
```

这只是 Python 语法的一部分。Python 的语法非常丰富，涵盖了从基础到高级的多种特性和功能。在实际编码中，你会根据需求选择使用不同的语法结构和功能。

---

# 六.Python项目